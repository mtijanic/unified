#pragma once

#include <cstdint>

#include "CExoArrayListTemplatedCExoStringPtr.hpp"
#include "CExoArrayListTemplatedCGameEffectPtr.hpp"
#include "CExoArrayListTemplatedCLoopingVisualEffectPtr.hpp"
#include "CExoArrayListTemplatedCNWSExpressionPtr.hpp"
#include "CExoArrayListTemplatedlongunsignedint.hpp"
#include "CExoLinkedListTemplatedCNWSObjectActionNode.hpp"
#include "CExoLocString.hpp"
#include "CExoString.hpp"
#include "CGameObject.hpp"
#include "CNWSScriptVarTable.hpp"
#include "CNWSTransition.hpp"
#include "CResRef.hpp"
#include "CScriptLocation.hpp"
#include "Vector.hpp"

namespace NWNXLib {

namespace API {

// Forward class declarations (defined in the source file)
struct CExoLinkedListNode;
struct CGameEffect;
struct CNWCCMessageData;
struct CNWSAnimBase;
struct CNWSArea;
struct CNWSCreature;
struct CNWSDialog;
struct CNWSExpression;
struct CNWSObjectActionNode;
struct CNWSPlayer;
struct CNWSpell;
struct CResGFF;
struct CResStruct;

struct CNWSObject
    : CGameObject
{
    CExoLocString m_sForGCC;
    uint16_t m_nGroupID;
    uint16_t m_nLastGroupID;
    CExoString m_sTag;
    CExoString m_sTemplate;
    CResRef m_cPortrait;
    uint16_t m_nPortraitId;
    CNWSDialog* m_pDialog;
    uint32_t m_nDialogDelayCalendar;
    uint32_t m_nDialogDelayTimeOfDay;
    int32_t m_bDialogStored;
    uint32_t m_nDialogStoredEntry;
    int32_t m_bDialogPaused;
    uint32_t m_oidDialogOwner;
    int32_t m_nDialogAnimation;
    int32_t m_nAILevel;
    int32_t m_bLock;
    CExoLinkedListNode* m_pAIPosList;
    uint16_t m_nCurrentAction;
    uint32_t m_oidCurrentActionTarget;
    CNWSAnimBase* m_pAnimation;
    uint32_t m_oidArea;
    Vector m_vPosition;
    Vector m_vOrientation;
    uint32_t m_nLastUpdateCalendarDay;
    uint32_t m_nLastUpdateTimeOfDay;
    uint32_t m_nStartActionCalendarDay;
    uint32_t m_nStartActionTimeOfDay;
    uint32_t m_nLastAnimationCalendarDay;
    uint32_t m_nLastAnimationTimeOfDay;
    uint32_t m_nAIUpdateDifference;
    int32_t m_nAnimation;
    float m_fAnimSpeed;
    int32_t m_nCurrentHitPoints;
    int32_t m_nBaseHitPoints;
    int32_t m_nTemporaryHitPoints;
    int32_t m_bAbleToModifyActionQueue;
    int32_t m_bDestroyable;
    int32_t m_bRaiseable;
    int32_t m_bSelectableWhenDead;
    int32_t m_bPlotObject;
    CExoLinkedListTemplatedCNWSObjectActionNode m_lQueuedActions;
    CNWSScriptVarTable m_ScriptVars;
    CExoArrayListTemplatedCGameEffectPtr m_appliedEffects;
    CExoArrayListTemplatedCLoopingVisualEffectPtr m_lstLoopingVisualEffects;
    CExoArrayListTemplatedlongunsignedint m_lstEffectTargets;
    int32_t m_bPendingEffectRemoval;
    uint32_t m_nSavingThrowSpellId;
    int32_t m_nCustomScriptEventId;
    uint32_t m_oidKiller;
    uint32_t m_oidLastHostileActor;
    uint32_t m_oidLastAttacker;
    uint32_t m_oidLastDamager;
    uint32_t m_oidLastDisturbed;
    int32_t* m_pLastDamageList;
    uint16_t m_nLastAttackType;
    uint8_t m_nLastAttackMode;
    uint32_t m_oidLastWeaponAttackedWith;
    uint32_t m_oidInventoryDisturbItem;
    int32_t m_nInventoryDisturbType;
    uint32_t m_oidLastSpeaker;
    int32_t m_bPrivateConversation;
    int32_t m_nConversationPlayHello;
    CExoString m_sLastConversationResref;
    CExoArrayListTemplatedCNWSExpressionPtr m_aListenExpressions;
    int32_t m_nMatchedPos;
    int32_t m_bListening;
    CExoArrayListTemplatedCExoStringPtr m_aExpressionStrings;
    char* m_nDamageImmunity;
    Vector m_vLastSpellTarget;
    uint32_t m_oidLastSpellTarget;
    uint32_t m_nLastSpellId;
    uint8_t m_nLastDomainLevel;
    uint32_t m_nLastSpellProjectileTime;
    int32_t m_bLastSpellCast;
    int32_t m_bLastSpellCastSpontaneous;
    uint8_t m_nLastSpellCastMulticlass;
    uint8_t m_nLastSpellCastMetaType;
    uint32_t m_oidLastSpellCastAtMeCaster;
    uint32_t m_nLastSpellCastAtMe;
    int32_t m_bLastSpellCastAtMeHarmful;
    uint16_t m_nLastSpellCastFeat;
    CNWSObjectActionNode* m_pExecutingAIAction;
    uint16_t m_nEffectArrayIndex;
    int32_t m_bApplyingPostProcessEffects;
    int32_t m_bOpenDoorAnimationPlayed;
    CNWSTransition m_pTransition;

    // The below are auto generated stubs.
    CNWSObject() = default;
    CNWSObject(const CNWSObject&) = default;
    CNWSObject& operator=(const CNWSObject&) = default;

    CNWSObject(unsigned char, uint32_t, int32_t, int32_t);
    ~CNWSObject();
    void AddAction(uint32_t, uint16_t, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*);
    void AddActionAfterFront(uint32_t, uint16_t, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*);
    void AddActionNodeParameter(CNWSObjectActionNode*, uint32_t, uint32_t, void*);
    void AddActionToFront(uint32_t, uint16_t, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*);
    int32_t AddCloseDoorAction(uint32_t, int32_t);
    int32_t AddDoCommandAction(void*);
    int32_t AddGiveItemActions(uint32_t, uint32_t, int32_t);
    int32_t AddLockObjectAction(uint32_t);
    void AddLoopingVisualEffect(uint16_t, uint32_t, unsigned char);
    void AddMatchedExpressionString(const CExoString&);
    int32_t AddOpenDoorAction(uint32_t, int32_t);
    int32_t AddTakeItemActions(uint32_t, uint32_t, int32_t);
    int32_t AddUnlockObjectAction(uint32_t, uint32_t, int32_t);
    int32_t AddUseObjectAction(uint32_t);
    uint32_t AIActionCloseDoor(CNWSObjectActionNode*);
    uint32_t AIActionDialogObject(CNWSObjectActionNode*);
    uint32_t AIActionDoCommand(CNWSObjectActionNode*);
    uint32_t AIActionGiveItem(CNWSObjectActionNode*);
    uint32_t AIActionLockObject(CNWSObjectActionNode*);
    uint32_t AIActionOpenDoor(CNWSObjectActionNode*);
    uint32_t AIActionPauseDialog(CNWSObjectActionNode*);
    uint32_t AIActionPlayAnimation(CNWSObjectActionNode*);
    uint32_t AIActionPlaySound(CNWSObjectActionNode*);
    uint32_t AIActionResumeDialog(CNWSObjectActionNode*);
    uint32_t AIActionSetCommandable(CNWSObjectActionNode*);
    uint32_t AIActionSpeak(CNWSObjectActionNode*);
    uint32_t AIActionSpeakStrRef(CNWSObjectActionNode*);
    uint32_t AIActionTakeItem(CNWSObjectActionNode*);
    uint32_t AIActionUnlockObject(CNWSObjectActionNode*);
    uint32_t AIActionUseObject(CNWSObjectActionNode*);
    uint32_t AIActionWait(CNWSObjectActionNode*);
    int32_t AnimationStationary(uint16_t);
    void ApplyEffect(CGameEffect*, int32_t, int32_t);
    CNWSObject* AsNWSObject();
    void BroadcastCounterSpellData(CNWSpell*, CNWCCMessageData*);
    void BroadcastDialog(CExoString, float);
    void BroadcastFloatyData(CNWCCMessageData*);
    void BroadcastFloatyDataSTRREF(uint32_t);
    void BroadcastSafeProjectile(uint32_t, uint32_t, Vector, Vector, uint32_t, unsigned char, uint32_t, unsigned char, unsigned char);
    void BroadcastSpellData(CNWSpell*, CNWCCMessageData*);
    void CalculateLastSpellProjectileTime(unsigned char);
    Vector CalculateSpellRangedMissTarget(uint32_t, uint32_t);
    int32_t ClearAction(CNWSObjectActionNode*, int32_t);
    void ClearAllActions();
    void ClearAllHostileActions(uint32_t);
    void ClearMatchedExpressionStrings();
    void ClearSpellEffectsOnOthers();
    void CopyScriptVars(CNWSScriptVarTable*);
    void DeleteCurrentAIAction();
    void DoDamage(int32_t);
    int32_t DoDamageImmunity(CNWSCreature*, int32_t, uint16_t, int32_t, int32_t);
    int32_t DoDamageReduction(CNWSCreature*, int32_t, unsigned char, int32_t, int32_t);
    int32_t DoDamageResistance(CNWSCreature*, int32_t, uint16_t, int32_t, int32_t, int32_t);
    int32_t DoSpellImmunity(CNWSObject*);
    int32_t DoSpellLevelAbsorption(CNWSObject*);
    int32_t GetAcceptableAction(uint32_t);
    uint16_t GetActionByGroupId(uint16_t, CNWSObjectActionNode**);
    unsigned char GetAIStateReaction(uint32_t);
    uint16_t GetAQActionIDByID(uint16_t, int32_t);
    CNWSArea* GetArea();
    int16_t GetCurrentHitPoints(int32_t);
    char GetDamageImmunity(unsigned char);
    char GetDamageImmunityByFlags(uint16_t);
    unsigned char GetDamageLevel();
    int32_t GetDead();
    int32_t GetDialogInterruptable();
    CResRef GetDialogResref();
    uint32_t GetEffectSpellId();
    CExoLocString& GetFirstName();
    unsigned char GetGender();
    int32_t GetHasFeatEffectApplied(uint16_t);
    uint16_t GetIDByAQActionID(uint16_t);
    int32_t GetIsPCDying();
    int32_t GetLastDamageAmountByFlags(int32_t);
    CExoLocString& GetLastName();
    CNWSExpression* GetListenExpressionObj(int32_t);
    uint32_t GetLockOrientationToObject();
    int16_t GetMaxHitPoints(int32_t);
    int32_t GetMaximumDamageResistanceVsDamageFlag(uint16_t, int32_t*);
    uint32_t GetNearestObjectByName(const CExoString&, float);
    uint16_t GetNewGroupID();
    CNWSObjectActionNode* GetNodeById(uint16_t, uint16_t);
    int32_t GetNumActionGroups();
    CResRef GetPortrait();
    uint16_t GetPortraitId();
    CExoLinkedListNode* GetPositionByGroupIndex(int32_t);
    int32_t GetReputation(uint32_t, int32_t&, int32_t);
    CScriptLocation GetScriptLocation();
    int32_t HasSpellEffectApplied(uint32_t);
    int32_t IsDialogDelay();
    void LoadActionQueue(CResGFF*, CResStruct*);
    void LoadEffectList(CResGFF*, CResStruct*);
    void LoadListenData(CResGFF*, CResStruct*);
    void LoadObjectState(CResGFF*, CResStruct*);
    void LoadVarTable(CResGFF*, CResStruct*);
    void PlaySoundSet(CNWSPlayer*, unsigned char);
    void RemoveEffect(CGameEffect*);
    void RemoveEffectByCreator(uint32_t);
    int32_t RemoveEffectById(uint64_t);
    void RemoveEffectBySpellId(uint32_t);
    void RemoveEffectTarget(uint32_t);
    void RemoveGroup(uint16_t);
    void RemoveLoopingVisualEffect(uint16_t);
    int32_t RemoveObjectFromDialog(uint32_t);
    void RemoveSomeEffectsOfDurationType(uint16_t);
    int32_t ReplyDialog(uint32_t, uint32_t, int32_t, uint32_t);
    void ReportOverflow(int32_t, int32_t, int32_t, int32_t);
    void RunActions(uint32_t, uint32_t, uint64_t);
    int32_t RunDialogOneLiner(const CExoString&, uint32_t);
    void SaveActionQueue(CResGFF*, CResStruct*);
    void SaveEffectList(CResGFF*, CResStruct*);
    void SaveListenData(CResGFF*, CResStruct*);
    void SaveObjectState(CResGFF*, CResStruct*);
    void SaveVarTable(CResGFF*, CResStruct*);
    int32_t SendDialogEntry(uint32_t, int32_t);
    int32_t SendDialogReplies();
    void SetAnimation(int32_t);
    void SetArea(CNWSArea*);
    void SetDamageImmunity(uint16_t, int32_t);
    void SetDialogDelay(float);
    void SetDialogOwner(uint32_t);
    void SetEffectSpellId(uint32_t);
    void SetGroupInterruptable(uint16_t, int32_t);
    void SetLastHostileActor(uint32_t, int32_t);
    int32_t SetListenExpression(CExoString, int32_t);
    void SetLockOrientationToObject(uint32_t);
    void SetOrientation(Vector);
    void SetPortrait(CResRef);
    void SetPortraitId(uint16_t);
    void SetPosition(Vector, int32_t);
    void SpawnBodyBag();
    void SpellCastAndImpact(uint32_t, Vector, uint32_t, unsigned char, uint32_t, int32_t, int32_t, unsigned char, int32_t);
    int32_t StartDialog(uint32_t, const CExoString&, int32_t, int32_t);
    int32_t StopDialog();
    int32_t TerminateAISliceAfterAction(uint32_t);
    void TestActionList();
    int32_t TestListenExpression(CExoString);
    void UpdateAttributesOnEffect(CGameEffect*, int32_t);
    int32_t UpdateDialog();
    void UpdateEffectList(uint32_t, uint32_t);
    void UpdateEffectPtrs();
};

void CNWSObject__CNWSObjectCtor(CNWSObject* thisPtr, unsigned char, uint32_t, int32_t, int32_t);
void CNWSObject__CNWSObjectDtor__0(CNWSObject* thisPtr);
void CNWSObject__AddAction(CNWSObject* thisPtr, uint32_t, uint16_t, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*);
void CNWSObject__AddActionAfterFront(CNWSObject* thisPtr, uint32_t, uint16_t, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*);
void CNWSObject__AddActionNodeParameter(CNWSObject* thisPtr, CNWSObjectActionNode*, uint32_t, uint32_t, void*);
void CNWSObject__AddActionToFront(CNWSObject* thisPtr, uint32_t, uint16_t, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*, uint32_t, void*);
int32_t CNWSObject__AddCloseDoorAction(CNWSObject* thisPtr, uint32_t, int32_t);
int32_t CNWSObject__AddDoCommandAction(CNWSObject* thisPtr, void*);
int32_t CNWSObject__AddGiveItemActions(CNWSObject* thisPtr, uint32_t, uint32_t, int32_t);
int32_t CNWSObject__AddLockObjectAction(CNWSObject* thisPtr, uint32_t);
void CNWSObject__AddLoopingVisualEffect(CNWSObject* thisPtr, uint16_t, uint32_t, unsigned char);
void CNWSObject__AddMatchedExpressionString(CNWSObject* thisPtr, const CExoString&);
int32_t CNWSObject__AddOpenDoorAction(CNWSObject* thisPtr, uint32_t, int32_t);
int32_t CNWSObject__AddTakeItemActions(CNWSObject* thisPtr, uint32_t, uint32_t, int32_t);
int32_t CNWSObject__AddUnlockObjectAction(CNWSObject* thisPtr, uint32_t, uint32_t, int32_t);
int32_t CNWSObject__AddUseObjectAction(CNWSObject* thisPtr, uint32_t);
uint32_t CNWSObject__AIActionCloseDoor(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionDialogObject(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionDoCommand(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionGiveItem(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionLockObject(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionOpenDoor(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionPauseDialog(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionPlayAnimation(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionPlaySound(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionResumeDialog(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionSetCommandable(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionSpeak(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionSpeakStrRef(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionTakeItem(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionUnlockObject(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionUseObject(CNWSObject* thisPtr, CNWSObjectActionNode*);
uint32_t CNWSObject__AIActionWait(CNWSObject* thisPtr, CNWSObjectActionNode*);
int32_t CNWSObject__AnimationStationary(CNWSObject* thisPtr, uint16_t);
void CNWSObject__ApplyEffect(CNWSObject* thisPtr, CGameEffect*, int32_t, int32_t);
CNWSObject* CNWSObject__AsNWSObject(CNWSObject* thisPtr);
void CNWSObject__BroadcastCounterSpellData(CNWSObject* thisPtr, CNWSpell*, CNWCCMessageData*);
void CNWSObject__BroadcastDialog(CNWSObject* thisPtr, CExoString, float);
void CNWSObject__BroadcastFloatyData(CNWSObject* thisPtr, CNWCCMessageData*);
void CNWSObject__BroadcastFloatyDataSTRREF(CNWSObject* thisPtr, uint32_t);
void CNWSObject__BroadcastSafeProjectile(CNWSObject* thisPtr, uint32_t, uint32_t, Vector, Vector, uint32_t, unsigned char, uint32_t, unsigned char, unsigned char);
void CNWSObject__BroadcastSpellData(CNWSObject* thisPtr, CNWSpell*, CNWCCMessageData*);
void CNWSObject__CalculateLastSpellProjectileTime(CNWSObject* thisPtr, unsigned char);
Vector CNWSObject__CalculateSpellRangedMissTarget(CNWSObject* thisPtr, uint32_t, uint32_t);
int32_t CNWSObject__ClearAction(CNWSObject* thisPtr, CNWSObjectActionNode*, int32_t);
void CNWSObject__ClearAllActions(CNWSObject* thisPtr);
void CNWSObject__ClearAllHostileActions(CNWSObject* thisPtr, uint32_t);
void CNWSObject__ClearMatchedExpressionStrings(CNWSObject* thisPtr);
void CNWSObject__ClearSpellEffectsOnOthers(CNWSObject* thisPtr);
void CNWSObject__CopyScriptVars(CNWSObject* thisPtr, CNWSScriptVarTable*);
void CNWSObject__DeleteCurrentAIAction(CNWSObject* thisPtr);
void CNWSObject__DoDamage(CNWSObject* thisPtr, int32_t);
int32_t CNWSObject__DoDamageImmunity(CNWSObject* thisPtr, CNWSCreature*, int32_t, uint16_t, int32_t, int32_t);
int32_t CNWSObject__DoDamageReduction(CNWSObject* thisPtr, CNWSCreature*, int32_t, unsigned char, int32_t, int32_t);
int32_t CNWSObject__DoDamageResistance(CNWSObject* thisPtr, CNWSCreature*, int32_t, uint16_t, int32_t, int32_t, int32_t);
int32_t CNWSObject__DoSpellImmunity(CNWSObject* thisPtr, CNWSObject*);
int32_t CNWSObject__DoSpellLevelAbsorption(CNWSObject* thisPtr, CNWSObject*);
int32_t CNWSObject__GetAcceptableAction(CNWSObject* thisPtr, uint32_t);
uint16_t CNWSObject__GetActionByGroupId(CNWSObject* thisPtr, uint16_t, CNWSObjectActionNode**);
unsigned char CNWSObject__GetAIStateReaction(CNWSObject* thisPtr, uint32_t);
uint16_t CNWSObject__GetAQActionIDByID(CNWSObject* thisPtr, uint16_t, int32_t);
CNWSArea* CNWSObject__GetArea(CNWSObject* thisPtr);
int16_t CNWSObject__GetCurrentHitPoints(CNWSObject* thisPtr, int32_t);
char CNWSObject__GetDamageImmunity(CNWSObject* thisPtr, unsigned char);
char CNWSObject__GetDamageImmunityByFlags(CNWSObject* thisPtr, uint16_t);
unsigned char CNWSObject__GetDamageLevel(CNWSObject* thisPtr);
int32_t CNWSObject__GetDead(CNWSObject* thisPtr);
int32_t CNWSObject__GetDialogInterruptable(CNWSObject* thisPtr);
CResRef CNWSObject__GetDialogResref(CNWSObject* thisPtr);
uint32_t CNWSObject__GetEffectSpellId(CNWSObject* thisPtr);
CExoLocString& CNWSObject__GetFirstName(CNWSObject* thisPtr);
unsigned char CNWSObject__GetGender(CNWSObject* thisPtr);
int32_t CNWSObject__GetHasFeatEffectApplied(CNWSObject* thisPtr, uint16_t);
uint16_t CNWSObject__GetIDByAQActionID(CNWSObject* thisPtr, uint16_t);
int32_t CNWSObject__GetIsPCDying(CNWSObject* thisPtr);
int32_t CNWSObject__GetLastDamageAmountByFlags(CNWSObject* thisPtr, int32_t);
CExoLocString& CNWSObject__GetLastName(CNWSObject* thisPtr);
CNWSExpression* CNWSObject__GetListenExpressionObj(CNWSObject* thisPtr, int32_t);
uint32_t CNWSObject__GetLockOrientationToObject(CNWSObject* thisPtr);
int16_t CNWSObject__GetMaxHitPoints(CNWSObject* thisPtr, int32_t);
int32_t CNWSObject__GetMaximumDamageResistanceVsDamageFlag(CNWSObject* thisPtr, uint16_t, int32_t*);
uint32_t CNWSObject__GetNearestObjectByName(CNWSObject* thisPtr, const CExoString&, float);
uint16_t CNWSObject__GetNewGroupID(CNWSObject* thisPtr);
CNWSObjectActionNode* CNWSObject__GetNodeById(CNWSObject* thisPtr, uint16_t, uint16_t);
int32_t CNWSObject__GetNumActionGroups(CNWSObject* thisPtr);
CResRef CNWSObject__GetPortrait(CNWSObject* thisPtr);
uint16_t CNWSObject__GetPortraitId(CNWSObject* thisPtr);
CExoLinkedListNode* CNWSObject__GetPositionByGroupIndex(CNWSObject* thisPtr, int32_t);
int32_t CNWSObject__GetReputation(CNWSObject* thisPtr, uint32_t, int32_t&, int32_t);
CScriptLocation CNWSObject__GetScriptLocation(CNWSObject* thisPtr);
int32_t CNWSObject__HasSpellEffectApplied(CNWSObject* thisPtr, uint32_t);
int32_t CNWSObject__IsDialogDelay(CNWSObject* thisPtr);
void CNWSObject__LoadActionQueue(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__LoadEffectList(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__LoadListenData(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__LoadObjectState(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__LoadVarTable(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__PlaySoundSet(CNWSObject* thisPtr, CNWSPlayer*, unsigned char);
void CNWSObject__RemoveEffect(CNWSObject* thisPtr, CGameEffect*);
void CNWSObject__RemoveEffectByCreator(CNWSObject* thisPtr, uint32_t);
int32_t CNWSObject__RemoveEffectById(CNWSObject* thisPtr, uint64_t);
void CNWSObject__RemoveEffectBySpellId(CNWSObject* thisPtr, uint32_t);
void CNWSObject__RemoveEffectTarget(CNWSObject* thisPtr, uint32_t);
void CNWSObject__RemoveGroup(CNWSObject* thisPtr, uint16_t);
void CNWSObject__RemoveLoopingVisualEffect(CNWSObject* thisPtr, uint16_t);
int32_t CNWSObject__RemoveObjectFromDialog(CNWSObject* thisPtr, uint32_t);
void CNWSObject__RemoveSomeEffectsOfDurationType(CNWSObject* thisPtr, uint16_t);
int32_t CNWSObject__ReplyDialog(CNWSObject* thisPtr, uint32_t, uint32_t, int32_t, uint32_t);
void CNWSObject__ReportOverflow(CNWSObject* thisPtr, int32_t, int32_t, int32_t, int32_t);
void CNWSObject__RunActions(CNWSObject* thisPtr, uint32_t, uint32_t, uint64_t);
int32_t CNWSObject__RunDialogOneLiner(CNWSObject* thisPtr, const CExoString&, uint32_t);
void CNWSObject__SaveActionQueue(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__SaveEffectList(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__SaveListenData(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__SaveObjectState(CNWSObject* thisPtr, CResGFF*, CResStruct*);
void CNWSObject__SaveVarTable(CNWSObject* thisPtr, CResGFF*, CResStruct*);
int32_t CNWSObject__SendDialogEntry(CNWSObject* thisPtr, uint32_t, int32_t);
int32_t CNWSObject__SendDialogReplies(CNWSObject* thisPtr);
void CNWSObject__SetAnimation(CNWSObject* thisPtr, int32_t);
void CNWSObject__SetArea(CNWSObject* thisPtr, CNWSArea*);
void CNWSObject__SetDamageImmunity(CNWSObject* thisPtr, uint16_t, int32_t);
void CNWSObject__SetDialogDelay(CNWSObject* thisPtr, float);
void CNWSObject__SetDialogOwner(CNWSObject* thisPtr, uint32_t);
void CNWSObject__SetEffectSpellId(CNWSObject* thisPtr, uint32_t);
void CNWSObject__SetGroupInterruptable(CNWSObject* thisPtr, uint16_t, int32_t);
void CNWSObject__SetLastHostileActor(CNWSObject* thisPtr, uint32_t, int32_t);
int32_t CNWSObject__SetListenExpression(CNWSObject* thisPtr, CExoString, int32_t);
void CNWSObject__SetLockOrientationToObject(CNWSObject* thisPtr, uint32_t);
void CNWSObject__SetOrientation(CNWSObject* thisPtr, Vector);
void CNWSObject__SetPortrait(CNWSObject* thisPtr, CResRef);
void CNWSObject__SetPortraitId(CNWSObject* thisPtr, uint16_t);
void CNWSObject__SetPosition(CNWSObject* thisPtr, Vector, int32_t);
void CNWSObject__SpawnBodyBag(CNWSObject* thisPtr);
void CNWSObject__SpellCastAndImpact(CNWSObject* thisPtr, uint32_t, Vector, uint32_t, unsigned char, uint32_t, int32_t, int32_t, unsigned char, int32_t);
int32_t CNWSObject__StartDialog(CNWSObject* thisPtr, uint32_t, const CExoString&, int32_t, int32_t);
int32_t CNWSObject__StopDialog(CNWSObject* thisPtr);
int32_t CNWSObject__TerminateAISliceAfterAction(CNWSObject* thisPtr, uint32_t);
void CNWSObject__TestActionList(CNWSObject* thisPtr);
int32_t CNWSObject__TestListenExpression(CNWSObject* thisPtr, CExoString);
void CNWSObject__UpdateAttributesOnEffect(CNWSObject* thisPtr, CGameEffect*, int32_t);
int32_t CNWSObject__UpdateDialog(CNWSObject* thisPtr);
void CNWSObject__UpdateEffectList(CNWSObject* thisPtr, uint32_t, uint32_t);
void CNWSObject__UpdateEffectPtrs(CNWSObject* thisPtr);

}

}
