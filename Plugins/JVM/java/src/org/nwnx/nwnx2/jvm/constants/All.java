package org.nwnx.nwnx2.jvm.constants;

public final class All {
  private All() {}

  public final static int ABILITY_CHARISMA = 5;
  public final static int ABILITY_CONSTITUTION = 2;
  public final static int ABILITY_DEXTERITY = 1;
  public final static int ABILITY_INTELLIGENCE = 3;
  public final static int ABILITY_STRENGTH = 0;
  public final static int ABILITY_WISDOM = 4;
  public final static int ACTION_ANIMALEMPATHY = 16;
  public final static int ACTION_ATTACKOBJECT = 3;
  public final static int ACTION_CASTSPELL = 4;
  public final static int ACTION_CLOSEDOOR = 6;
  public final static int ACTION_COUNTERSPELL = 31;
  public final static int ACTION_DIALOGOBJECT = 7;
  public final static int ACTION_DISABLETRAP = 8;
  public final static int ACTION_DROPITEM = 2;
  public final static int ACTION_EXAMINETRAP = 11;
  public final static int ACTION_FLAGTRAP = 10;
  public final static int ACTION_FOLLOW = 35;
  public final static int ACTION_HEAL = 33;
  public final static int ACTION_INVALID = 65535;
  public final static int ACTION_ITEMCASTSPELL = 19;
  public final static int ACTION_KIDAMAGE = 41;
  public final static int ACTION_LOCK = 14;
  public final static int ACTION_MODE_COUNTERSPELL = 5;
  public final static int ACTION_MODE_DEFENSIVE_CAST = 10;
  public final static int ACTION_MODE_DETECT = 0;
  public final static int ACTION_MODE_DIRTY_FIGHTING = 11;
  public final static int ACTION_MODE_EXPERTISE = 8;
  public final static int ACTION_MODE_FLURRY_OF_BLOWS = 6;
  public final static int ACTION_MODE_IMPROVED_EXPERTISE = 9;
  public final static int ACTION_MODE_IMPROVED_POWER_ATTACK = 4;
  public final static int ACTION_MODE_PARRY = 2;
  public final static int ACTION_MODE_POWER_ATTACK = 3;
  public final static int ACTION_MODE_RAPID_SHOT = 7;
  public final static int ACTION_MODE_STEALTH = 1;
  public final static int ACTION_MOVETOPOINT = 0;
  public final static int ACTION_OPENDOOR = 5;
  public final static int ACTION_OPENLOCK = 13;
  public final static int ACTION_PICKPOCKET = 34;
  public final static int ACTION_PICKUPITEM = 1;
  public final static int ACTION_RANDOMWALK = 43;
  public final static int ACTION_RECOVERTRAP = 9;
  public final static int ACTION_REST = 17;
  public final static int ACTION_SETTRAP = 12;
  public final static int ACTION_SIT = 37;
  public final static int ACTION_SMITEGOOD = 40;
  public final static int ACTION_TAUNT = 18;
  public final static int ACTION_USEOBJECT = 15;
  public final static int ACTION_WAIT = 36;
  public final static int AC_ARMOUR_ENCHANTMENT_BONUS = 2;
  public final static int AC_DEFLECTION_BONUS = 4;
  public final static int AC_DODGE_BONUS = 0;
  public final static int AC_NATURAL_BONUS = 1;
  public final static int AC_SHIELD_ENCHANTMENT_BONUS = 3;
  public final static int AC_VS_DAMAGE_TYPE_ALL = 4103;
  public final static int AI_LEVEL_DEFAULT = -1;
  public final static int AI_LEVEL_HIGH = 3;
  public final static int AI_LEVEL_INVALID = -1;
  public final static int AI_LEVEL_LOW = 1;
  public final static int AI_LEVEL_NORMAL = 2;
  public final static int AI_LEVEL_VERY_HIGH = 4;
  public final static int AI_LEVEL_VERY_LOW = 0;
  public final static int ALIGNMENT_ALL = 0;
  public final static int ALIGNMENT_CHAOTIC = 3;
  public final static int ALIGNMENT_EVIL = 5;
  public final static int ALIGNMENT_GOOD = 4;
  public final static int ALIGNMENT_LAWFUL = 2;
  public final static int ALIGNMENT_NEUTRAL = 1;
  public final static int AMBIENT_SOUND_BLACK_SMITH = 80;
  public final static int AMBIENT_SOUND_BORDELLO_MEN_AND_WOMEN = 21;
  public final static int AMBIENT_SOUND_BORDELLO_WOMEN = 20;
  public final static int AMBIENT_SOUND_CASTLE_INTERIOR_LARGE = 68;
  public final static int AMBIENT_SOUND_CASTLE_INTERIOR_MEDIUM = 67;
  public final static int AMBIENT_SOUND_CASTLE_INTERIOR_SMALL = 66;
  public final static int AMBIENT_SOUND_CAVE_EVIL_1_XP2 = 104;
  public final static int AMBIENT_SOUND_CAVE_EVIL_2_XP2 = 105;
  public final static int AMBIENT_SOUND_CAVE_EVIL_3_XP2 = 106;
  public final static int AMBIENT_SOUND_CAVE_INSECTS_1 = 42;
  public final static int AMBIENT_SOUND_CAVE_INSECTS_2 = 43;
  public final static int AMBIENT_SOUND_CAVE_LARGE = 62;
  public final static int AMBIENT_SOUND_CAVE_MEDIUM = 61;
  public final static int AMBIENT_SOUND_CAVE_SMALL = 60;
  public final static int AMBIENT_SOUND_CITY_DAY_CROWDED = 12;
  public final static int AMBIENT_SOUND_CITY_DAY_SPARSE = 13;
  public final static int AMBIENT_SOUND_CITY_MARKET = 15;
  public final static int AMBIENT_SOUND_CITY_NIGHT = 14;
  public final static int AMBIENT_SOUND_CITY_SLUMS_DAY_CROWDED = 9;
  public final static int AMBIENT_SOUND_CITY_SLUMS_DAY_SPARSE = 10;
  public final static int AMBIENT_SOUND_CITY_SLUMS_NIGHT = 11;
  public final static int AMBIENT_SOUND_CITY_TEMPLE_DISTRICT = 16;
  public final static int AMBIENT_SOUND_COMBAT_MUFFLED_1 = 26;
  public final static int AMBIENT_SOUND_COMBAT_MUFFLED_2 = 27;
  public final static int AMBIENT_SOUND_COMBAT_OUTSIDE_1 = 24;
  public final static int AMBIENT_SOUND_COMBAT_OUTSIDE_2 = 25;
  public final static int AMBIENT_SOUND_COMMONER_TAVERN_TALK = 7;
  public final static int AMBIENT_SOUND_CRYPT_MEDIUM_1 = 70;
  public final static int AMBIENT_SOUND_CRYPT_MEDIUM_2 = 71;
  public final static int AMBIENT_SOUND_CRYPT_SMALL = 69;
  public final static int AMBIENT_SOUND_DESERT_DAY_XP1 = 92;
  public final static int AMBIENT_SOUND_DESERT_NIGHT_XP1 = 93;
  public final static int AMBIENT_SOUND_DUNGEON_LAKE_LAVA = 28;
  public final static int AMBIENT_SOUND_EVIL_DRONE_XP2 = 101;
  public final static int AMBIENT_SOUND_EVIL_DUNGEON_LARGE = 59;
  public final static int AMBIENT_SOUND_EVIL_DUNGEON_MEDIUM = 58;
  public final static int AMBIENT_SOUND_EVIL_DUNGEON_SMALL = 57;
  public final static int AMBIENT_SOUND_FOREST_DAY_1 = 49;
  public final static int AMBIENT_SOUND_FOREST_DAY_2 = 50;
  public final static int AMBIENT_SOUND_FOREST_DAY_3 = 51;
  public final static int AMBIENT_SOUND_FOREST_DAY_SCARY = 52;
  public final static int AMBIENT_SOUND_FOREST_MAGICAL = 56;
  public final static int AMBIENT_SOUND_FOREST_NIGHT_1 = 53;
  public final static int AMBIENT_SOUND_FOREST_NIGHT_2 = 54;
  public final static int AMBIENT_SOUND_FOREST_NIGHT_SCARY = 55;
  public final static int AMBIENT_SOUND_FROZEN_HELL_XP2 = 103;
  public final static int AMBIENT_SOUND_GUST_CAVERN = 35;
  public final static int AMBIENT_SOUND_GUST_CHASM = 34;
  public final static int AMBIENT_SOUND_GUST_DRAFT = 37;
  public final static int AMBIENT_SOUND_GUST_GRASS = 36;
  public final static int AMBIENT_SOUND_HAUNTED_INTERIOR_1 = 77;
  public final static int AMBIENT_SOUND_HAUNTED_INTERIOR_2 = 78;
  public final static int AMBIENT_SOUND_HAUNTED_INTERIOR_3 = 79;
  public final static int AMBIENT_SOUND_HOUSE_INTERIOR_1 = 72;
  public final static int AMBIENT_SOUND_HOUSE_INTERIOR_2 = 73;
  public final static int AMBIENT_SOUND_HOUSE_INTERIOR_3 = 74;
  public final static int AMBIENT_SOUND_INTERIOR_INSECTS_1 = 44;
  public final static int AMBIENT_SOUND_INTERIOR_INSECTS_2 = 45;
  public final static int AMBIENT_SOUND_KITCHEN_INTERIOR_LARGE = 76;
  public final static int AMBIENT_SOUND_KITCHEN_INTERIOR_SMALL = 75;
  public final static int AMBIENT_SOUND_LARGE_GROUP_TALKS_INSIDE = 6;
  public final static int AMBIENT_SOUND_LIZARD_FOLK_CAVE_CRYSTALS = 46;
  public final static int AMBIENT_SOUND_MAGICAL_INTERIOR_AIRLAB = 88;
  public final static int AMBIENT_SOUND_MAGICAL_INTERIOR_EARTHLAB = 87;
  public final static int AMBIENT_SOUND_MAGICAL_INTERIOR_FIRELAB = 86;
  public final static int AMBIENT_SOUND_MAGICAL_INTERIOR_WATERLAB = 89;
  public final static int AMBIENT_SOUND_MAGIC_INTERIOR_EVIL = 85;
  public final static int AMBIENT_SOUND_MAGIC_INTERIOR_LARGE = 84;
  public final static int AMBIENT_SOUND_MAGIC_INTERIOR_MEDIUM = 83;
  public final static int AMBIENT_SOUND_MAGIC_INTERIOR_SMALL = 82;
  public final static int AMBIENT_SOUND_MEDIUM_GROUP_TALKS_INSIDE = 5;
  public final static int AMBIENT_SOUND_MEN_WHISPER_INSIDE = 1;
  public final static int AMBIENT_SOUND_MINE_LARGE = 65;
  public final static int AMBIENT_SOUND_MINE_MEDIUM = 64;
  public final static int AMBIENT_SOUND_MINE_SMALL = 63;
  public final static int AMBIENT_SOUND_MONASTERY_INTERIOR_XP1 = 94;
  public final static int AMBIENT_SOUND_NOBLE_TAVERN_TALK = 8;
  public final static int AMBIENT_SOUND_NONE = 0;
  public final static int AMBIENT_SOUND_PEOPLE_WHISPER_INSIDE = 3;
  public final static int AMBIENT_SOUND_PIT_CRIES = 81;
  public final static int AMBIENT_SOUND_PLAIN_OF_FIRE_XP2 = 102;
  public final static int AMBIENT_SOUND_RAIN_HARD = 39;
  public final static int AMBIENT_SOUND_RAIN_LIGHT = 38;
  public final static int AMBIENT_SOUND_RAIN_STORM_BIG = 41;
  public final static int AMBIENT_SOUND_RAIN_STORM_SMALL = 40;
  public final static int AMBIENT_SOUND_RIOT_MUFFLED = 23;
  public final static int AMBIENT_SOUND_RIOT_OUTSIDE = 22;
  public final static int AMBIENT_SOUND_RUIN_HAUNTED_XP1 = 98;
  public final static int AMBIENT_SOUND_RUIN_RUMBLING_XP1 = 97;
  public final static int AMBIENT_SOUND_RUIN_WET_XP1 = 96;
  public final static int AMBIENT_SOUND_SAND_STORM_EXTREME_XP1 = 100;
  public final static int AMBIENT_SOUND_SAND_STORM_LIGHT_XP1 = 99;
  public final static int AMBIENT_SOUND_SEWERS_1 = 47;
  public final static int AMBIENT_SOUND_SEWERS_2 = 48;
  public final static int AMBIENT_SOUND_SEWER_SLUDGE_LAKE = 29;
  public final static int AMBIENT_SOUND_SMALL_GROUP_TALKS_INSIDE = 4;
  public final static int AMBIENT_SOUND_TAVERN_ROWDY = 107;
  public final static int AMBIENT_SOUND_TOWN_DAY_CROWDED = 17;
  public final static int AMBIENT_SOUND_TOWN_DAY_SPARSE = 18;
  public final static int AMBIENT_SOUND_TOWN_NIGHT = 19;
  public final static int AMBIENT_SOUND_WIND_FOREST = 33;
  public final static int AMBIENT_SOUND_WIND_MEDIUM = 31;
  public final static int AMBIENT_SOUND_WIND_SOFT = 30;
  public final static int AMBIENT_SOUND_WIND_STRONG = 32;
  public final static int AMBIENT_SOUND_WINTER_DAY_WET_XP1 = 90;
  public final static int AMBIENT_SOUND_WINTER_DAY_WINDY_XP1 = 91;
  public final static int AMBIENT_SOUND_WOMEN_WHISPER_INSIDE = 2;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_BADGER = 0;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_BEAR = 2;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_BOAR = 3;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_DIRERAT = 8;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_DIREWOLF = 7;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_HAWK = 4;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_NONE = 255;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_PANTHER = 5;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_SPIDER = 6;
  public final static int ANIMAL_COMPANION_CREATURE_TYPE_WOLF = 1;
  public final static int ANIMATION_DISMOUNT1 = 42;
  public final static int ANIMATION_DOOR_CLOSE = 204;
  public final static int ANIMATION_DOOR_DESTROY = 207;
  public final static int ANIMATION_DOOR_OPEN1 = 205;
  public final static int ANIMATION_DOOR_OPEN2 = 206;
  public final static int ANIMATION_FIREFORGET_BOW = 105;
  public final static int ANIMATION_FIREFORGET_DODGE_DUCK = 115;
  public final static int ANIMATION_FIREFORGET_DODGE_SIDE = 114;
  public final static int ANIMATION_FIREFORGET_DRINK = 113;
  public final static int ANIMATION_FIREFORGET_GREETING = 107;
  public final static int ANIMATION_FIREFORGET_HEAD_TURN_LEFT = 100;
  public final static int ANIMATION_FIREFORGET_HEAD_TURN_RIGHT = 101;
  public final static int ANIMATION_FIREFORGET_PAUSE_BORED = 103;
  public final static int ANIMATION_FIREFORGET_PAUSE_SCRATCH_HEAD = 102;
  public final static int ANIMATION_FIREFORGET_READ = 112;
  public final static int ANIMATION_FIREFORGET_SALUTE = 104;
  public final static int ANIMATION_FIREFORGET_SPASM = 116;
  public final static int ANIMATION_FIREFORGET_STEAL = 106;
  public final static int ANIMATION_FIREFORGET_TAUNT = 108;
  public final static int ANIMATION_FIREFORGET_VICTORY1 = 109;
  public final static int ANIMATION_FIREFORGET_VICTORY2 = 110;
  public final static int ANIMATION_FIREFORGET_VICTORY3 = 111;
  public final static int ANIMATION_LOOPING_CONJURE1 = 18;
  public final static int ANIMATION_LOOPING_CONJURE2 = 19;
  public final static int ANIMATION_LOOPING_CUSTOM1 = 21;
  public final static int ANIMATION_LOOPING_CUSTOM10 = 30;
  public final static int ANIMATION_LOOPING_CUSTOM11 = 31;
  public final static int ANIMATION_LOOPING_CUSTOM12 = 32;
  public final static int ANIMATION_LOOPING_CUSTOM13 = 33;
  public final static int ANIMATION_LOOPING_CUSTOM14 = 34;
  public final static int ANIMATION_LOOPING_CUSTOM15 = 35;
  public final static int ANIMATION_LOOPING_CUSTOM16 = 36;
  public final static int ANIMATION_LOOPING_CUSTOM17 = 37;
  public final static int ANIMATION_LOOPING_CUSTOM18 = 38;
  public final static int ANIMATION_LOOPING_CUSTOM19 = 39;
  public final static int ANIMATION_LOOPING_CUSTOM2 = 22;
  public final static int ANIMATION_LOOPING_CUSTOM20 = 40;
  public final static int ANIMATION_LOOPING_CUSTOM3 = 23;
  public final static int ANIMATION_LOOPING_CUSTOM4 = 24;
  public final static int ANIMATION_LOOPING_CUSTOM5 = 25;
  public final static int ANIMATION_LOOPING_CUSTOM6 = 26;
  public final static int ANIMATION_LOOPING_CUSTOM7 = 27;
  public final static int ANIMATION_LOOPING_CUSTOM8 = 28;
  public final static int ANIMATION_LOOPING_CUSTOM9 = 29;
  public final static int ANIMATION_LOOPING_DEAD_BACK = 17;
  public final static int ANIMATION_LOOPING_DEAD_FRONT = 16;
  public final static int ANIMATION_LOOPING_GET_LOW = 12;
  public final static int ANIMATION_LOOPING_GET_MID = 13;
  public final static int ANIMATION_LOOPING_LISTEN = 2;
  public final static int ANIMATION_LOOPING_LOOK_FAR = 5;
  public final static int ANIMATION_LOOPING_MEDITATE = 3;
  public final static int ANIMATION_LOOPING_PAUSE = 0;
  public final static int ANIMATION_LOOPING_PAUSE2 = 1;
  public final static int ANIMATION_LOOPING_PAUSE_DRUNK = 15;
  public final static int ANIMATION_LOOPING_PAUSE_TIRED = 14;
  public final static int ANIMATION_LOOPING_SIT_CHAIR = 6;
  public final static int ANIMATION_LOOPING_SIT_CROSS = 7;
  public final static int ANIMATION_LOOPING_SPASM = 20;
  public final static int ANIMATION_LOOPING_TALK_FORCEFUL = 10;
  public final static int ANIMATION_LOOPING_TALK_LAUGHING = 11;
  public final static int ANIMATION_LOOPING_TALK_NORMAL = 8;
  public final static int ANIMATION_LOOPING_TALK_PLEADING = 9;
  public final static int ANIMATION_LOOPING_WORSHIP = 4;
  public final static int ANIMATION_MOUNT1 = 41;
  public final static int ANIMATION_PLACEABLE_ACTIVATE = 200;
  public final static int ANIMATION_PLACEABLE_CLOSE = 203;
  public final static int ANIMATION_PLACEABLE_DEACTIVATE = 201;
  public final static int ANIMATION_PLACEABLE_OPEN = 202;
  public final static int AOE_MOB_BLINDING = 17;
  public final static int AOE_MOB_CIRCCHAOS = 15;
  public final static int AOE_MOB_CIRCEVIL = 12;
  public final static int AOE_MOB_CIRCGOOD = 13;
  public final static int AOE_MOB_CIRCLAW = 14;
  public final static int AOE_MOB_DRAGON_FEAR = 36;
  public final static int AOE_MOB_ELECTRICAL = 25;
  public final static int AOE_MOB_FEAR = 16;
  public final static int AOE_MOB_FIRE = 23;
  public final static int AOE_MOB_FROST = 24;
  public final static int AOE_MOB_HORRIFICAPPEARANCE = 44;
  public final static int AOE_MOB_INVISIBILITY_PURGE = 35;
  public final static int AOE_MOB_MENACE = 19;
  public final static int AOE_MOB_PROTECTION = 22;
  public final static int AOE_MOB_SILENCE = 30;
  public final static int AOE_MOB_STUN = 21;
  public final static int AOE_MOB_TIDE_OF_BATTLE = 41;
  public final static int AOE_MOB_TROGLODYTE_STENCH = 45;
  public final static int AOE_MOB_TYRANT_FOG = 27;
  public final static int AOE_MOB_UNEARTHLY = 18;
  public final static int AOE_MOB_UNNATURAL = 20;
  public final static int AOE_PER_CREEPING_DOOM = 33;
  public final static int AOE_PER_CUSTOM_AOE = 37;
  public final static int AOE_PER_DARKNESS = 11;
  public final static int AOE_PER_DELAY_BLAST_FIREBALL = 31;
  public final static int AOE_PER_ENTANGLE = 9;
  public final static int AOE_PER_EVARDS_BLACK_TENTACLES = 34;
  public final static int AOE_PER_FOGACID = 0;
  public final static int AOE_PER_FOGFIRE = 1;
  public final static int AOE_PER_FOGGHOUL = 26;
  public final static int AOE_PER_FOGKILL = 3;
  public final static int AOE_PER_FOGMIND = 4;
  public final static int AOE_PER_FOGSTINK = 2;
  public final static int AOE_PER_FOG_OF_BEWILDERMENT = 39;
  public final static int AOE_PER_GLYPH_OF_WARDING = 38;
  public final static int AOE_PER_GREASE = 32;
  public final static int AOE_PER_INVIS_SPHERE = 29;
  public final static int AOE_PER_OVERMIND = 43;
  public final static int AOE_PER_STONEHOLD = 42;
  public final static int AOE_PER_STORM = 28;
  public final static int AOE_PER_VINE_MINE_CAMOUFLAGE = 40;
  public final static int AOE_PER_WALLBLADE = 7;
  public final static int AOE_PER_WALLFIRE = 5;
  public final static int AOE_PER_WALLWIND = 6;
  public final static int AOE_PER_WEB = 8;
  public final static int APPEARANCE_TYPE_ALLIP = 186;
  public final static int APPEARANCE_TYPE_ANIMATED_CHEST = 469;
  public final static int APPEARANCE_TYPE_ARANEA = 157;
  public final static int APPEARANCE_TYPE_ARCH_TARGET = 200;
  public final static int APPEARANCE_TYPE_ARIBETH = 190;
  public final static int APPEARANCE_TYPE_ASABI_CHIEFTAIN = 353;
  public final static int APPEARANCE_TYPE_ASABI_SHAMAN = 354;
  public final static int APPEARANCE_TYPE_ASABI_WARRIOR = 355;
  public final static int APPEARANCE_TYPE_AZER_FEMALE = 429;
  public final static int APPEARANCE_TYPE_AZER_MALE = 428;
  public final static int APPEARANCE_TYPE_BADGER = 8;
  public final static int APPEARANCE_TYPE_BADGER_DIRE = 9;
  public final static int APPEARANCE_TYPE_BALOR = 38;
  public final static int APPEARANCE_TYPE_BARTENDER = 234;
  public final static int APPEARANCE_TYPE_BASILISK = 369;
  public final static int APPEARANCE_TYPE_BAT = 10;
  public final static int APPEARANCE_TYPE_BAT_HORROR = 11;
  public final static int APPEARANCE_TYPE_BEAR_BLACK = 12;
  public final static int APPEARANCE_TYPE_BEAR_BROWN = 13;
  public final static int APPEARANCE_TYPE_BEAR_DIRE = 15;
  public final static int APPEARANCE_TYPE_BEAR_KODIAK = 204;
  public final static int APPEARANCE_TYPE_BEAR_POLAR = 14;
  public final static int APPEARANCE_TYPE_BEETLE_FIRE = 18;
  public final static int APPEARANCE_TYPE_BEETLE_SLICER = 17;
  public final static int APPEARANCE_TYPE_BEETLE_STAG = 19;
  public final static int APPEARANCE_TYPE_BEETLE_STINK = 20;
  public final static int APPEARANCE_TYPE_BEGGER = 220;
  public final static int APPEARANCE_TYPE_BEHOLDER = 401;
  public final static int APPEARANCE_TYPE_BEHOLDER_EYEBALL = 403;
  public final static int APPEARANCE_TYPE_BEHOLDER_MAGE = 402;
  public final static int APPEARANCE_TYPE_BEHOLDER_MOTHER = 472;
  public final static int APPEARANCE_TYPE_BLOOD_SAILER = 221;
  public final static int APPEARANCE_TYPE_BOAR = 21;
  public final static int APPEARANCE_TYPE_BOAR_DIRE = 22;
  public final static int APPEARANCE_TYPE_BODAK = 23;
  public final static int APPEARANCE_TYPE_BUGBEAR_A = 29;
  public final static int APPEARANCE_TYPE_BUGBEAR_B = 30;
  public final static int APPEARANCE_TYPE_BUGBEAR_CHIEFTAIN_A = 25;
  public final static int APPEARANCE_TYPE_BUGBEAR_CHIEFTAIN_B = 26;
  public final static int APPEARANCE_TYPE_BUGBEAR_SHAMAN_A = 27;
  public final static int APPEARANCE_TYPE_BUGBEAR_SHAMAN_B = 28;
  public final static int APPEARANCE_TYPE_BULETTE = 481;
  public final static int APPEARANCE_TYPE_CAT_CAT_DIRE = 95;
  public final static int APPEARANCE_TYPE_CAT_COUGAR = 203;
  public final static int APPEARANCE_TYPE_CAT_CRAG_CAT = 94;
  public final static int APPEARANCE_TYPE_CAT_JAGUAR = 98;
  public final static int APPEARANCE_TYPE_CAT_KRENSHAR = 96;
  public final static int APPEARANCE_TYPE_CAT_LEOPARD = 93;
  public final static int APPEARANCE_TYPE_CAT_LION = 97;
  public final static int APPEARANCE_TYPE_CAT_MPANTHER = 306;
  public final static int APPEARANCE_TYPE_CAT_PANTHER = 202;
  public final static int APPEARANCE_TYPE_CHICKEN = 31;
  public final static int APPEARANCE_TYPE_COCKATRICE = 368;
  public final static int APPEARANCE_TYPE_COMBAT_DUMMY = 201;
  public final static int APPEARANCE_TYPE_CONVICT = 238;
  public final static int APPEARANCE_TYPE_COW = 34;
  public final static int APPEARANCE_TYPE_CULT_MEMBER = 212;
  public final static int APPEARANCE_TYPE_DEEP_ROTHE = 416;
  public final static int APPEARANCE_TYPE_DEER = 35;
  public final static int APPEARANCE_TYPE_DEER_STAG = 37;
  public final static int APPEARANCE_TYPE_DEMI_LICH = 430;
  public final static int APPEARANCE_TYPE_DEVIL = 392;
  public final static int APPEARANCE_TYPE_DOG = 176;
  public final static int APPEARANCE_TYPE_DOG_BLINKDOG = 174;
  public final static int APPEARANCE_TYPE_DOG_DIRE_WOLF = 175;
  public final static int APPEARANCE_TYPE_DOG_FENHOUND = 177;
  public final static int APPEARANCE_TYPE_DOG_HELL_HOUND = 179;
  public final static int APPEARANCE_TYPE_DOG_SHADOW_MASTIF = 180;
  public final static int APPEARANCE_TYPE_DOG_WINTER_WOLF = 184;
  public final static int APPEARANCE_TYPE_DOG_WOLF = 181;
  public final static int APPEARANCE_TYPE_DOG_WORG = 185;
  public final static int APPEARANCE_TYPE_DOOM_KNIGHT = 40;
  public final static int APPEARANCE_TYPE_DRACOLICH = 405;
  public final static int APPEARANCE_TYPE_DRAGON_BLACK = 41;
  public final static int APPEARANCE_TYPE_DRAGON_BLUE = 47;
  public final static int APPEARANCE_TYPE_DRAGON_BRASS = 42;
  public final static int APPEARANCE_TYPE_DRAGON_BRONZE = 45;
  public final static int APPEARANCE_TYPE_DRAGON_COPPER = 43;
  public final static int APPEARANCE_TYPE_DRAGON_GOLD = 46;
  public final static int APPEARANCE_TYPE_DRAGON_GREEN = 48;
  public final static int APPEARANCE_TYPE_DRAGON_PRIS = 425;
  public final static int APPEARANCE_TYPE_DRAGON_RED = 49;
  public final static int APPEARANCE_TYPE_DRAGON_SHADOW = 418;
  public final static int APPEARANCE_TYPE_DRAGON_SILVER = 44;
  public final static int APPEARANCE_TYPE_DRAGON_WHITE = 50;
  public final static int APPEARANCE_TYPE_DRIDER = 406;
  public final static int APPEARANCE_TYPE_DRIDER_CHIEF = 407;
  public final static int APPEARANCE_TYPE_DRIDER_FEMALE = 446;
  public final static int APPEARANCE_TYPE_DROW_CLERIC = 215;
  public final static int APPEARANCE_TYPE_DROW_FEMALE_1 = 478;
  public final static int APPEARANCE_TYPE_DROW_FEMALE_2 = 479;
  public final static int APPEARANCE_TYPE_DROW_FIGHTER = 216;
  public final static int APPEARANCE_TYPE_DROW_MATRON = 410;
  public final static int APPEARANCE_TYPE_DROW_SLAVE = 408;
  public final static int APPEARANCE_TYPE_DROW_WARRIOR_1 = 476;
  public final static int APPEARANCE_TYPE_DROW_WARRIOR_2 = 477;
  public final static int APPEARANCE_TYPE_DROW_WARRIOR_3 = 480;
  public final static int APPEARANCE_TYPE_DROW_WIZARD = 409;
  public final static int APPEARANCE_TYPE_DRUEGAR_CLERIC = 218;
  public final static int APPEARANCE_TYPE_DRUEGAR_FIGHTER = 217;
  public final static int APPEARANCE_TYPE_DRYAD = 51;
  public final static int APPEARANCE_TYPE_DUERGAR_CHIEF = 412;
  public final static int APPEARANCE_TYPE_DUERGAR_SLAVE = 411;
  public final static int APPEARANCE_TYPE_DWARF = 0;
  public final static int APPEARANCE_TYPE_DWARF_GOLEM = 474;
  public final static int APPEARANCE_TYPE_DWARF_HALFORC = 475;
  public final static int APPEARANCE_TYPE_DWARF_NPC_FEMALE = 248;
  public final static int APPEARANCE_TYPE_DWARF_NPC_MALE = 249;
  public final static int APPEARANCE_TYPE_ELEMENTAL_AIR = 52;
  public final static int APPEARANCE_TYPE_ELEMENTAL_AIR_ELDER = 53;
  public final static int APPEARANCE_TYPE_ELEMENTAL_EARTH = 56;
  public final static int APPEARANCE_TYPE_ELEMENTAL_EARTH_ELDER = 57;
  public final static int APPEARANCE_TYPE_ELEMENTAL_FIRE = 60;
  public final static int APPEARANCE_TYPE_ELEMENTAL_FIRE_ELDER = 61;
  public final static int APPEARANCE_TYPE_ELEMENTAL_WATER = 69;
  public final static int APPEARANCE_TYPE_ELEMENTAL_WATER_ELDER = 68;
  public final static int APPEARANCE_TYPE_ELF = 1;
  public final static int APPEARANCE_TYPE_ELF_NPC_FEMALE = 245;
  public final static int APPEARANCE_TYPE_ELF_NPC_MALE_01 = 246;
  public final static int APPEARANCE_TYPE_ELF_NPC_MALE_02 = 247;
  public final static int APPEARANCE_TYPE_ETTERCAP = 166;
  public final static int APPEARANCE_TYPE_ETTIN = 72;
  public final static int APPEARANCE_TYPE_FAERIE_DRAGON = 374;
  public final static int APPEARANCE_TYPE_FAIRY = 55;
  public final static int APPEARANCE_TYPE_FALCON = 144;
  public final static int APPEARANCE_TYPE_FEMALE_01 = 222;
  public final static int APPEARANCE_TYPE_FEMALE_02 = 223;
  public final static int APPEARANCE_TYPE_FEMALE_03 = 224;
  public final static int APPEARANCE_TYPE_FEMALE_04 = 225;
  public final static int APPEARANCE_TYPE_FORMIAN_MYRMARCH = 362;
  public final static int APPEARANCE_TYPE_FORMIAN_QUEEN = 363;
  public final static int APPEARANCE_TYPE_FORMIAN_WARRIOR = 361;
  public final static int APPEARANCE_TYPE_FORMIAN_WORKER = 360;
  public final static int APPEARANCE_TYPE_GARGOYLE = 73;
  public final static int APPEARANCE_TYPE_GELATINOUS_CUBE = 470;
  public final static int APPEARANCE_TYPE_GHAST = 74;
  public final static int APPEARANCE_TYPE_GHOUL = 76;
  public final static int APPEARANCE_TYPE_GHOUL_LORD = 77;
  public final static int APPEARANCE_TYPE_GIANT_FIRE = 80;
  public final static int APPEARANCE_TYPE_GIANT_FIRE_FEMALE = 351;
  public final static int APPEARANCE_TYPE_GIANT_FROST = 81;
  public final static int APPEARANCE_TYPE_GIANT_FROST_FEMALE = 350;
  public final static int APPEARANCE_TYPE_GIANT_HILL = 78;
  public final static int APPEARANCE_TYPE_GIANT_MOUNTAIN = 79;
  public final static int APPEARANCE_TYPE_GNOLL_WARRIOR = 388;
  public final static int APPEARANCE_TYPE_GNOLL_WIZ = 389;
  public final static int APPEARANCE_TYPE_GNOME = 2;
  public final static int APPEARANCE_TYPE_GNOME_NPC_FEMALE = 243;
  public final static int APPEARANCE_TYPE_GNOME_NPC_MALE = 244;
  public final static int APPEARANCE_TYPE_GOBLIN_A = 86;
  public final static int APPEARANCE_TYPE_GOBLIN_B = 87;
  public final static int APPEARANCE_TYPE_GOBLIN_CHIEF_A = 82;
  public final static int APPEARANCE_TYPE_GOBLIN_CHIEF_B = 83;
  public final static int APPEARANCE_TYPE_GOBLIN_SHAMAN_A = 84;
  public final static int APPEARANCE_TYPE_GOBLIN_SHAMAN_B = 85;
  public final static int APPEARANCE_TYPE_GOLEM_ADAMANTIUM = 421;
  public final static int APPEARANCE_TYPE_GOLEM_BONE = 24;
  public final static int APPEARANCE_TYPE_GOLEM_CLAY = 91;
  public final static int APPEARANCE_TYPE_GOLEM_DEMONFLESH = 468;
  public final static int APPEARANCE_TYPE_GOLEM_FLESH = 88;
  public final static int APPEARANCE_TYPE_GOLEM_IRON = 89;
  public final static int APPEARANCE_TYPE_GOLEM_MITHRAL = 420;
  public final static int APPEARANCE_TYPE_GOLEM_STONE = 92;
  public final static int APPEARANCE_TYPE_GORGON = 367;
  public final static int APPEARANCE_TYPE_GRAY_OOZE = 393;
  public final static int APPEARANCE_TYPE_GREY_RENDER = 205;
  public final static int APPEARANCE_TYPE_GYNOSPHINX = 365;
  public final static int APPEARANCE_TYPE_HALFLING = 3;
  public final static int APPEARANCE_TYPE_HALFLING_NPC_FEMALE = 250;
  public final static int APPEARANCE_TYPE_HALFLING_NPC_MALE = 251;
  public final static int APPEARANCE_TYPE_HALF_ELF = 4;
  public final static int APPEARANCE_TYPE_HALF_ORC = 5;
  public final static int APPEARANCE_TYPE_HALF_ORC_NPC_FEMALE = 252;
  public final static int APPEARANCE_TYPE_HALF_ORC_NPC_MALE_01 = 253;
  public final static int APPEARANCE_TYPE_HALF_ORC_NPC_MALE_02 = 254;
  public final static int APPEARANCE_TYPE_HARPY = 419;
  public final static int APPEARANCE_TYPE_HELMED_HORROR = 100;
  public final static int APPEARANCE_TYPE_HEURODIS_LICH = 370;
  public final static int APPEARANCE_TYPE_HOBGOBLIN_WARRIOR = 390;
  public final static int APPEARANCE_TYPE_HOBGOBLIN_WIZARD = 391;
  public final static int APPEARANCE_TYPE_HOOK_HORROR = 102;
  public final static int APPEARANCE_TYPE_HOUSE_GUARD = 219;
  public final static int APPEARANCE_TYPE_HUMAN = 6;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_01 = 255;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_02 = 256;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_03 = 257;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_04 = 258;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_05 = 259;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_06 = 260;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_07 = 261;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_08 = 262;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_09 = 263;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_10 = 264;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_11 = 265;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_FEMALE_12 = 266;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_01 = 267;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_02 = 268;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_03 = 269;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_04 = 270;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_05 = 271;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_06 = 272;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_07 = 273;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_08 = 274;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_09 = 275;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_10 = 276;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_11 = 277;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_12 = 278;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_13 = 279;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_14 = 280;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_15 = 281;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_16 = 282;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_17 = 283;
  public final static int APPEARANCE_TYPE_HUMAN_NPC_MALE_18 = 284;
  public final static int APPEARANCE_TYPE_IMP = 105;
  public final static int APPEARANCE_TYPE_INN_KEEPER = 233;
  public final static int APPEARANCE_TYPE_INTELLECT_DEVOURER = 117;
  public final static int APPEARANCE_TYPE_INVALID = -1;
  public final static int APPEARANCE_TYPE_INVISIBLE_HUMAN_MALE = 298;
  public final static int APPEARANCE_TYPE_INVISIBLE_STALKER = 64;
  public final static int APPEARANCE_TYPE_KID_FEMALE = 242;
  public final static int APPEARANCE_TYPE_KID_MALE = 241;
  public final static int APPEARANCE_TYPE_KOBOLD_A = 302;
  public final static int APPEARANCE_TYPE_KOBOLD_B = 305;
  public final static int APPEARANCE_TYPE_KOBOLD_CHIEF_A = 300;
  public final static int APPEARANCE_TYPE_KOBOLD_CHIEF_B = 303;
  public final static int APPEARANCE_TYPE_KOBOLD_SHAMAN_A = 301;
  public final static int APPEARANCE_TYPE_KOBOLD_SHAMAN_B = 304;
  public final static int APPEARANCE_TYPE_LANTERN_ARCHON = 103;
  public final static int APPEARANCE_TYPE_LICH = 39;
  public final static int APPEARANCE_TYPE_LIZARDFOLK_A = 134;
  public final static int APPEARANCE_TYPE_LIZARDFOLK_B = 135;
  public final static int APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_A = 132;
  public final static int APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_B = 133;
  public final static int APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_A = 130;
  public final static int APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_B = 131;
  public final static int APPEARANCE_TYPE_LUSKAN_GUARD = 211;
  public final static int APPEARANCE_TYPE_MALE_01 = 226;
  public final static int APPEARANCE_TYPE_MALE_02 = 227;
  public final static int APPEARANCE_TYPE_MALE_03 = 228;
  public final static int APPEARANCE_TYPE_MALE_04 = 229;
  public final static int APPEARANCE_TYPE_MALE_05 = 230;
  public final static int APPEARANCE_TYPE_MANTICORE = 366;
  public final static int APPEARANCE_TYPE_MEDUSA = 352;
  public final static int APPEARANCE_TYPE_MEPHISTO_BIG = 404;
  public final static int APPEARANCE_TYPE_MEPHISTO_NORM = 471;
  public final static int APPEARANCE_TYPE_MEPHIT_AIR = 106;
  public final static int APPEARANCE_TYPE_MEPHIT_DUST = 107;
  public final static int APPEARANCE_TYPE_MEPHIT_EARTH = 108;
  public final static int APPEARANCE_TYPE_MEPHIT_FIRE = 109;
  public final static int APPEARANCE_TYPE_MEPHIT_ICE = 110;
  public final static int APPEARANCE_TYPE_MEPHIT_MAGMA = 114;
  public final static int APPEARANCE_TYPE_MEPHIT_OOZE = 112;
  public final static int APPEARANCE_TYPE_MEPHIT_SALT = 111;
  public final static int APPEARANCE_TYPE_MEPHIT_STEAM = 113;
  public final static int APPEARANCE_TYPE_MEPHIT_WATER = 115;
  public final static int APPEARANCE_TYPE_MINDFLAYER = 413;
  public final static int APPEARANCE_TYPE_MINDFLAYER_2 = 414;
  public final static int APPEARANCE_TYPE_MINDFLAYER_ALHOON = 415;
  public final static int APPEARANCE_TYPE_MINOGON = 119;
  public final static int APPEARANCE_TYPE_MINOTAUR = 120;
  public final static int APPEARANCE_TYPE_MINOTAUR_CHIEFTAIN = 121;
  public final static int APPEARANCE_TYPE_MINOTAUR_SHAMAN = 122;
  public final static int APPEARANCE_TYPE_MOHRG = 123;
  public final static int APPEARANCE_TYPE_MUMMY_COMMON = 58;
  public final static int APPEARANCE_TYPE_MUMMY_FIGHTER_2 = 59;
  public final static int APPEARANCE_TYPE_MUMMY_GREATER = 124;
  public final static int APPEARANCE_TYPE_MUMMY_WARRIOR = 125;
  public final static int APPEARANCE_TYPE_NWN_AARIN = 188;
  public final static int APPEARANCE_TYPE_NWN_ARIBETH_EVIL = 189;
  public final static int APPEARANCE_TYPE_NWN_HAEDRALINE = 191;
  public final static int APPEARANCE_TYPE_NWN_MAUGRIM = 193;
  public final static int APPEARANCE_TYPE_NWN_MORAG = 192;
  public final static int APPEARANCE_TYPE_NWN_NASHER = 296;
  public final static int APPEARANCE_TYPE_NWN_SEDOS = 297;
  public final static int APPEARANCE_TYPE_NW_MILITIA_MEMBER = 210;
  public final static int APPEARANCE_TYPE_NYMPH = 126;
  public final static int APPEARANCE_TYPE_OBJECT_BLUE = 436;
  public final static int APPEARANCE_TYPE_OBJECT_BOAT = 473;
  public final static int APPEARANCE_TYPE_OBJECT_CANDLE = 433;
  public final static int APPEARANCE_TYPE_OBJECT_CHAIR = 431;
  public final static int APPEARANCE_TYPE_OBJECT_CHEST = 434;
  public final static int APPEARANCE_TYPE_OBJECT_CYAN = 437;
  public final static int APPEARANCE_TYPE_OBJECT_FLAME_LARGE = 445;
  public final static int APPEARANCE_TYPE_OBJECT_FLAME_MEDIUM = 444;
  public final static int APPEARANCE_TYPE_OBJECT_FLAME_SMALL = 443;
  public final static int APPEARANCE_TYPE_OBJECT_GREEN = 438;
  public final static int APPEARANCE_TYPE_OBJECT_ORANGE = 440;
  public final static int APPEARANCE_TYPE_OBJECT_PURPLE = 442;
  public final static int APPEARANCE_TYPE_OBJECT_RED = 441;
  public final static int APPEARANCE_TYPE_OBJECT_TABLE = 432;
  public final static int APPEARANCE_TYPE_OBJECT_WHITE = 435;
  public final static int APPEARANCE_TYPE_OBJECT_YELLOW = 439;
  public final static int APPEARANCE_TYPE_OCHRE_JELLY_LARGE = 394;
  public final static int APPEARANCE_TYPE_OCHRE_JELLY_MEDIUM = 396;
  public final static int APPEARANCE_TYPE_OCHRE_JELLY_SMALL = 398;
  public final static int APPEARANCE_TYPE_OGRE = 127;
  public final static int APPEARANCE_TYPE_OGREB = 207;
  public final static int APPEARANCE_TYPE_OGRE_CHIEFTAIN = 128;
  public final static int APPEARANCE_TYPE_OGRE_CHIEFTAINB = 208;
  public final static int APPEARANCE_TYPE_OGRE_MAGE = 129;
  public final static int APPEARANCE_TYPE_OGRE_MAGEB = 209;
  public final static int APPEARANCE_TYPE_OLD_MAN = 239;
  public final static int APPEARANCE_TYPE_OLD_WOMAN = 240;
  public final static int APPEARANCE_TYPE_ORC_A = 140;
  public final static int APPEARANCE_TYPE_ORC_B = 141;
  public final static int APPEARANCE_TYPE_ORC_CHIEFTAIN_A = 136;
  public final static int APPEARANCE_TYPE_ORC_CHIEFTAIN_B = 137;
  public final static int APPEARANCE_TYPE_ORC_SHAMAN_A = 138;
  public final static int APPEARANCE_TYPE_ORC_SHAMAN_B = 139;
  public final static int APPEARANCE_TYPE_OX = 142;
  public final static int APPEARANCE_TYPE_PARROT = 7;
  public final static int APPEARANCE_TYPE_PENGUIN = 206;
  public final static int APPEARANCE_TYPE_PLAGUE_VICTIM = 231;
  public final static int APPEARANCE_TYPE_PROSTITUTE_01 = 236;
  public final static int APPEARANCE_TYPE_PROSTITUTE_02 = 237;
  public final static int APPEARANCE_TYPE_PSEUDODRAGON = 375;
  public final static int APPEARANCE_TYPE_QUASIT = 104;
  public final static int APPEARANCE_TYPE_RAKSHASA_BEAR_MALE = 294;
  public final static int APPEARANCE_TYPE_RAKSHASA_TIGER_FEMALE = 290;
  public final static int APPEARANCE_TYPE_RAKSHASA_TIGER_MALE = 293;
  public final static int APPEARANCE_TYPE_RAKSHASA_WOLF_MALE = 295;
  public final static int APPEARANCE_TYPE_RAT = 386;
  public final static int APPEARANCE_TYPE_RAT_DIRE = 387;
  public final static int APPEARANCE_TYPE_RAVEN = 145;
  public final static int APPEARANCE_TYPE_SAHUAGIN = 65;
  public final static int APPEARANCE_TYPE_SAHUAGIN_CLERIC = 67;
  public final static int APPEARANCE_TYPE_SAHUAGIN_LEADER = 66;
  public final static int APPEARANCE_TYPE_SEAGULL_FLYING = 291;
  public final static int APPEARANCE_TYPE_SEAGULL_WALKING = 292;
  public final static int APPEARANCE_TYPE_SEA_HAG = 454;
  public final static int APPEARANCE_TYPE_SHADOW = 146;
  public final static int APPEARANCE_TYPE_SHADOW_FIEND = 147;
  public final static int APPEARANCE_TYPE_SHARK_GOBLIN = 449;
  public final static int APPEARANCE_TYPE_SHARK_HAMMERHEAD = 448;
  public final static int APPEARANCE_TYPE_SHARK_MAKO = 447;
  public final static int APPEARANCE_TYPE_SHIELD_GUARDIAN = 90;
  public final static int APPEARANCE_TYPE_SHOP_KEEPER = 232;
  public final static int APPEARANCE_TYPE_SKELETAL_DEVOURER = 36;
  public final static int APPEARANCE_TYPE_SKELETON_CHIEFTAIN = 182;
  public final static int APPEARANCE_TYPE_SKELETON_COMMON = 63;
  public final static int APPEARANCE_TYPE_SKELETON_MAGE = 148;
  public final static int APPEARANCE_TYPE_SKELETON_PRIEST = 62;
  public final static int APPEARANCE_TYPE_SKELETON_WARRIOR = 150;
  public final static int APPEARANCE_TYPE_SKELETON_WARRIOR_1 = 70;
  public final static int APPEARANCE_TYPE_SKELETON_WARRIOR_2 = 71;
  public final static int APPEARANCE_TYPE_SLAAD_BLACK = 426;
  public final static int APPEARANCE_TYPE_SLAAD_BLUE = 151;
  public final static int APPEARANCE_TYPE_SLAAD_DEATH = 152;
  public final static int APPEARANCE_TYPE_SLAAD_GRAY = 153;
  public final static int APPEARANCE_TYPE_SLAAD_GREEN = 154;
  public final static int APPEARANCE_TYPE_SLAAD_RED = 155;
  public final static int APPEARANCE_TYPE_SLAAD_WHITE = 427;
  public final static int APPEARANCE_TYPE_SPECTRE = 156;
  public final static int APPEARANCE_TYPE_SPHINX = 364;
  public final static int APPEARANCE_TYPE_SPIDER_DEMON = 422;
  public final static int APPEARANCE_TYPE_SPIDER_DIRE = 158;
  public final static int APPEARANCE_TYPE_SPIDER_GIANT = 159;
  public final static int APPEARANCE_TYPE_SPIDER_PHASE = 160;
  public final static int APPEARANCE_TYPE_SPIDER_SWORD = 161;
  public final static int APPEARANCE_TYPE_SPIDER_WRAITH = 162;
  public final static int APPEARANCE_TYPE_STINGER = 356;
  public final static int APPEARANCE_TYPE_STINGER_CHIEFTAIN = 358;
  public final static int APPEARANCE_TYPE_STINGER_MAGE = 359;
  public final static int APPEARANCE_TYPE_STINGER_WARRIOR = 357;
  public final static int APPEARANCE_TYPE_SUCCUBUS = 163;
  public final static int APPEARANCE_TYPE_SVIRF_FEMALE = 424;
  public final static int APPEARANCE_TYPE_SVIRF_MALE = 423;
  public final static int APPEARANCE_TYPE_TROGLODYTE = 451;
  public final static int APPEARANCE_TYPE_TROGLODYTE_CLERIC = 453;
  public final static int APPEARANCE_TYPE_TROGLODYTE_WARRIOR = 452;
  public final static int APPEARANCE_TYPE_TROLL = 167;
  public final static int APPEARANCE_TYPE_TROLL_CHIEFTAIN = 164;
  public final static int APPEARANCE_TYPE_TROLL_SHAMAN = 165;
  public final static int APPEARANCE_TYPE_UMBERHULK = 168;
  public final static int APPEARANCE_TYPE_UTHGARD_ELK_TRIBE = 213;
  public final static int APPEARANCE_TYPE_UTHGARD_TIGER_TRIBE = 214;
  public final static int APPEARANCE_TYPE_VAMPIRE_FEMALE = 288;
  public final static int APPEARANCE_TYPE_VAMPIRE_MALE = 289;
  public final static int APPEARANCE_TYPE_VROCK = 101;
  public final static int APPEARANCE_TYPE_WAITRESS = 235;
  public final static int APPEARANCE_TYPE_WAR_DEVOURER = 54;
  public final static int APPEARANCE_TYPE_WERECAT = 99;
  public final static int APPEARANCE_TYPE_WERERAT = 170;
  public final static int APPEARANCE_TYPE_WEREWOLF = 171;
  public final static int APPEARANCE_TYPE_WIGHT = 172;
  public final static int APPEARANCE_TYPE_WILL_O_WISP = 116;
  public final static int APPEARANCE_TYPE_WRAITH = 187;
  public final static int APPEARANCE_TYPE_WYRMLING_BLACK = 378;
  public final static int APPEARANCE_TYPE_WYRMLING_BLUE = 377;
  public final static int APPEARANCE_TYPE_WYRMLING_BRASS = 381;
  public final static int APPEARANCE_TYPE_WYRMLING_BRONZE = 383;
  public final static int APPEARANCE_TYPE_WYRMLING_COPPER = 382;
  public final static int APPEARANCE_TYPE_WYRMLING_GOLD = 385;
  public final static int APPEARANCE_TYPE_WYRMLING_GREEN = 379;
  public final static int APPEARANCE_TYPE_WYRMLING_RED = 376;
  public final static int APPEARANCE_TYPE_WYRMLING_SILVER = 384;
  public final static int APPEARANCE_TYPE_WYRMLING_WHITE = 380;
  public final static int APPEARANCE_TYPE_YUAN_TI = 285;
  public final static int APPEARANCE_TYPE_YUAN_TI_CHIEFTEN = 286;
  public final static int APPEARANCE_TYPE_YUAN_TI_WIZARD = 287;
  public final static int APPEARANCE_TYPE_ZOMBIE = 198;
  public final static int APPEARANCE_TYPE_ZOMBIE_ROTTING = 195;
  public final static int APPEARANCE_TYPE_ZOMBIE_TYRANT_FOG = 199;
  public final static int APPEARANCE_TYPE_ZOMBIE_WARRIOR_1 = 196;
  public final static int APPEARANCE_TYPE_ZOMBIE_WARRIOR_2 = 197;
  public final static int AREA_ABOVEGROUND = 1;
  public final static int AREA_ARTIFICIAL = 0;
  public final static int AREA_HEIGHT = 0;
  public final static int AREA_INVALID = -1;
  public final static int AREA_NATURAL = 1;
  public final static int AREA_TRANSITION_BEHOLDER_01 = 95;
  public final static int AREA_TRANSITION_BEHOLDER_02 = 96;
  public final static int AREA_TRANSITION_CARAVAN_DESERT = 84;
  public final static int AREA_TRANSITION_CARAVAN_RURAL = 85;
  public final static int AREA_TRANSITION_CARAVAN_WINTER = 83;
  public final static int AREA_TRANSITION_CASTLE_01 = 34;
  public final static int AREA_TRANSITION_CASTLE_02 = 35;
  public final static int AREA_TRANSITION_CASTLE_03 = 36;
  public final static int AREA_TRANSITION_CASTLE_04 = 37;
  public final static int AREA_TRANSITION_CASTLE_05 = 38;
  public final static int AREA_TRANSITION_CASTLE_06 = 39;
  public final static int AREA_TRANSITION_CASTLE_07 = 40;
  public final static int AREA_TRANSITION_CASTLE_08 = 41;
  public final static int AREA_TRANSITION_CITY = 2;
  public final static int AREA_TRANSITION_CITY_01 = 2;
  public final static int AREA_TRANSITION_CITY_02 = 3;
  public final static int AREA_TRANSITION_CITY_03 = 4;
  public final static int AREA_TRANSITION_CITY_04 = 5;
  public final static int AREA_TRANSITION_CITY_05 = 6;
  public final static int AREA_TRANSITION_CRYPT = 7;
  public final static int AREA_TRANSITION_CRYPT_01 = 7;
  public final static int AREA_TRANSITION_CRYPT_02 = 8;
  public final static int AREA_TRANSITION_CRYPT_03 = 9;
  public final static int AREA_TRANSITION_CRYPT_04 = 10;
  public final static int AREA_TRANSITION_CRYPT_05 = 11;
  public final static int AREA_TRANSITION_DESERT_01 = 73;
  public final static int AREA_TRANSITION_DESERT_02 = 74;
  public final static int AREA_TRANSITION_DESERT_03 = 75;
  public final static int AREA_TRANSITION_DESERT_04 = 76;
  public final static int AREA_TRANSITION_DESERT_05 = 77;
  public final static int AREA_TRANSITION_DROW_01 = 97;
  public final static int AREA_TRANSITION_DROW_02 = 98;
  public final static int AREA_TRANSITION_DROW_03 = 104;
  public final static int AREA_TRANSITION_DROW_04 = 105;
  public final static int AREA_TRANSITION_DUNGEON_01 = 12;
  public final static int AREA_TRANSITION_DUNGEON_02 = 13;
  public final static int AREA_TRANSITION_DUNGEON_03 = 14;
  public final static int AREA_TRANSITION_DUNGEON_04 = 15;
  public final static int AREA_TRANSITION_DUNGEON_05 = 16;
  public final static int AREA_TRANSITION_DUNGEON_06 = 17;
  public final static int AREA_TRANSITION_DUNGEON_07 = 18;
  public final static int AREA_TRANSITION_DUNGEON_08 = 19;
  public final static int AREA_TRANSITION_FOREST = 58;
  public final static int AREA_TRANSITION_FOREST_01 = 58;
  public final static int AREA_TRANSITION_FOREST_02 = 59;
  public final static int AREA_TRANSITION_FOREST_03 = 60;
  public final static int AREA_TRANSITION_FOREST_04 = 61;
  public final static int AREA_TRANSITION_FOREST_05 = 62;
  public final static int AREA_TRANSITION_ILLITHID_01 = 99;
  public final static int AREA_TRANSITION_ILLITHID_02 = 100;
  public final static int AREA_TRANSITION_INTERIOR_01 = 42;
  public final static int AREA_TRANSITION_INTERIOR_02 = 43;
  public final static int AREA_TRANSITION_INTERIOR_03 = 44;
  public final static int AREA_TRANSITION_INTERIOR_04 = 45;
  public final static int AREA_TRANSITION_INTERIOR_05 = 46;
  public final static int AREA_TRANSITION_INTERIOR_06 = 47;
  public final static int AREA_TRANSITION_INTERIOR_07 = 48;
  public final static int AREA_TRANSITION_INTERIOR_08 = 49;
  public final static int AREA_TRANSITION_INTERIOR_09 = 50;
  public final static int AREA_TRANSITION_INTERIOR_10 = 51;
  public final static int AREA_TRANSITION_INTERIOR_11 = 52;
  public final static int AREA_TRANSITION_INTERIOR_12 = 53;
  public final static int AREA_TRANSITION_INTERIOR_13 = 54;
  public final static int AREA_TRANSITION_INTERIOR_14 = 55;
  public final static int AREA_TRANSITION_INTERIOR_15 = 56;
  public final static int AREA_TRANSITION_INTERIOR_16 = 57;
  public final static int AREA_TRANSITION_MAGICAL_01 = 86;
  public final static int AREA_TRANSITION_MAGICAL_02 = 87;
  public final static int AREA_TRANSITION_MINES_01 = 20;
  public final static int AREA_TRANSITION_MINES_02 = 21;
  public final static int AREA_TRANSITION_MINES_03 = 22;
  public final static int AREA_TRANSITION_MINES_04 = 23;
  public final static int AREA_TRANSITION_MINES_05 = 24;
  public final static int AREA_TRANSITION_MINES_06 = 25;
  public final static int AREA_TRANSITION_MINES_07 = 26;
  public final static int AREA_TRANSITION_MINES_08 = 27;
  public final static int AREA_TRANSITION_MINES_09 = 28;
  public final static int AREA_TRANSITION_RANDOM = 0;
  public final static int AREA_TRANSITION_RUINS_01 = 78;
  public final static int AREA_TRANSITION_RUINS_02 = 79;
  public final static int AREA_TRANSITION_RUINS_03 = 80;
  public final static int AREA_TRANSITION_RUINS_04 = 81;
  public final static int AREA_TRANSITION_RUINS_05 = 82;
  public final static int AREA_TRANSITION_RURAL = 63;
  public final static int AREA_TRANSITION_RURAL_01 = 63;
  public final static int AREA_TRANSITION_RURAL_02 = 64;
  public final static int AREA_TRANSITION_RURAL_03 = 65;
  public final static int AREA_TRANSITION_RURAL_04 = 66;
  public final static int AREA_TRANSITION_RURAL_05 = 67;
  public final static int AREA_TRANSITION_SEWER_01 = 29;
  public final static int AREA_TRANSITION_SEWER_02 = 30;
  public final static int AREA_TRANSITION_SEWER_03 = 31;
  public final static int AREA_TRANSITION_SEWER_04 = 32;
  public final static int AREA_TRANSITION_SEWER_05 = 33;
  public final static int AREA_TRANSITION_UNDERDARK_01 = 88;
  public final static int AREA_TRANSITION_UNDERDARK_02 = 89;
  public final static int AREA_TRANSITION_UNDERDARK_03 = 90;
  public final static int AREA_TRANSITION_UNDERDARK_04 = 91;
  public final static int AREA_TRANSITION_UNDERDARK_05 = 92;
  public final static int AREA_TRANSITION_UNDERDARK_06 = 93;
  public final static int AREA_TRANSITION_UNDERDARK_07 = 94;
  public final static int AREA_TRANSITION_USER_DEFINED = 1;
  public final static int AREA_TRANSITION_WASTELAND_01 = 101;
  public final static int AREA_TRANSITION_WASTELAND_02 = 102;
  public final static int AREA_TRANSITION_WASTELAND_03 = 103;
  public final static int AREA_TRANSITION_WRURAL_01 = 68;
  public final static int AREA_TRANSITION_WRURAL_02 = 69;
  public final static int AREA_TRANSITION_WRURAL_03 = 70;
  public final static int AREA_TRANSITION_WRURAL_04 = 71;
  public final static int AREA_TRANSITION_WRURAL_05 = 72;
  public final static int AREA_UNDERGROUND = 0;
  public final static int AREA_WIDTH = 1;
  public final static int ASSOCIATE_COMMAND_ATTACKNEAREST = -3;
  public final static int ASSOCIATE_COMMAND_DISARMTRAP = -20;
  public final static int ASSOCIATE_COMMAND_FOLLOWMASTER = -5;
  public final static int ASSOCIATE_COMMAND_GUARDMASTER = -7;
  public final static int ASSOCIATE_COMMAND_HEALMASTER = -4;
  public final static int ASSOCIATE_COMMAND_INVENTORY = -19;
  public final static int ASSOCIATE_COMMAND_LEAVEPARTY = -17;
  public final static int ASSOCIATE_COMMAND_MASTERATTACKEDOTHER = -15;
  public final static int ASSOCIATE_COMMAND_MASTERFAILEDLOCKPICK = -6;
  public final static int ASSOCIATE_COMMAND_MASTERGOINGTOBEATTACKED = -16;
  public final static int ASSOCIATE_COMMAND_MASTERSAWTRAP = -14;
  public final static int ASSOCIATE_COMMAND_MASTERUNDERATTACK = -11;
  public final static int ASSOCIATE_COMMAND_PICKLOCK = -18;
  public final static int ASSOCIATE_COMMAND_RELEASEDOMINATION = -12;
  public final static int ASSOCIATE_COMMAND_STANDGROUND = -2;
  public final static int ASSOCIATE_COMMAND_TOGGLECASTING = -21;
  public final static int ASSOCIATE_COMMAND_TOGGLESEARCH = -23;
  public final static int ASSOCIATE_COMMAND_TOGGLESTEALTH = -22;
  public final static int ASSOCIATE_COMMAND_UNPOSSESSFAMILIAR = -13;
  public final static int ASSOCIATE_COMMAND_UNSUMMONANIMALCOMPANION = -9;
  public final static int ASSOCIATE_COMMAND_UNSUMMONFAMILIAR = -8;
  public final static int ASSOCIATE_COMMAND_UNSUMMONSUMMONED = -10;
  public final static int ASSOCIATE_TYPE_ANIMALCOMPANION = 2;
  public final static int ASSOCIATE_TYPE_DOMINATED = 5;
  public final static int ASSOCIATE_TYPE_FAMILIAR = 3;
  public final static int ASSOCIATE_TYPE_HENCHMAN = 1;
  public final static int ASSOCIATE_TYPE_NONE = 0;
  public final static int ASSOCIATE_TYPE_SUMMONED = 4;
  public final static int ATTACK_BONUS_MISC = 0;
  public final static int ATTACK_BONUS_OFFHAND = 2;
  public final static int ATTACK_BONUS_ONHAND = 1;
  public final static int ATTITUDE_AGGRESSIVE = 1;
  public final static int ATTITUDE_DEFENSIVE = 2;
  public final static int ATTITUDE_NEUTRAL = 0;
  public final static int ATTITUDE_SPECIAL = 3;
  public final static int BASE_ITEM_AMULET = 19;
  public final static int BASE_ITEM_ARMOR = 16;
  public final static int BASE_ITEM_ARROW = 20;
  public final static int BASE_ITEM_BASTARDSWORD = 3;
  public final static int BASE_ITEM_BATTLEAXE = 2;
  public final static int BASE_ITEM_BELT = 21;
  public final static int BASE_ITEM_BLANK_POTION = 101;
  public final static int BASE_ITEM_BLANK_SCROLL = 102;
  public final static int BASE_ITEM_BLANK_WAND = 103;
  public final static int BASE_ITEM_BOLT = 25;
  public final static int BASE_ITEM_BOOK = 74;
  public final static int BASE_ITEM_BOOTS = 26;
  public final static int BASE_ITEM_BRACER = 78;
  public final static int BASE_ITEM_BULLET = 27;
  public final static int BASE_ITEM_CBLUDGWEAPON = 71;
  public final static int BASE_ITEM_CLOAK = 80;
  public final static int BASE_ITEM_CLUB = 28;
  public final static int BASE_ITEM_CPIERCWEAPON = 70;
  public final static int BASE_ITEM_CRAFTMATERIALMED = 109;
  public final static int BASE_ITEM_CRAFTMATERIALSML = 110;
  public final static int BASE_ITEM_CREATUREITEM = 73;
  public final static int BASE_ITEM_CSLASHWEAPON = 69;
  public final static int BASE_ITEM_CSLSHPRCWEAP = 72;
  public final static int BASE_ITEM_DAGGER = 22;
  public final static int BASE_ITEM_DART = 31;
  public final static int BASE_ITEM_DIREMACE = 32;
  public final static int BASE_ITEM_DOUBLEAXE = 33;
  public final static int BASE_ITEM_DWARVENWARAXE = 108;
  public final static int BASE_ITEM_ENCHANTED_POTION = 104;
  public final static int BASE_ITEM_ENCHANTED_SCROLL = 105;
  public final static int BASE_ITEM_ENCHANTED_WAND = 106;
  public final static int BASE_ITEM_GEM = 77;
  public final static int BASE_ITEM_GLOVES = 36;
  public final static int BASE_ITEM_GOLD = 76;
  public final static int BASE_ITEM_GREATAXE = 18;
  public final static int BASE_ITEM_GREATSWORD = 13;
  public final static int BASE_ITEM_GRENADE = 81;
  public final static int BASE_ITEM_HALBERD = 10;
  public final static int BASE_ITEM_HANDAXE = 38;
  public final static int BASE_ITEM_HEALERSKIT = 39;
  public final static int BASE_ITEM_HEAVYCROSSBOW = 6;
  public final static int BASE_ITEM_HEAVYFLAIL = 35;
  public final static int BASE_ITEM_HELMET = 17;
  public final static int BASE_ITEM_INVALID = 256;
  public final static int BASE_ITEM_KAMA = 40;
  public final static int BASE_ITEM_KATANA = 41;
  public final static int BASE_ITEM_KEY = 65;
  public final static int BASE_ITEM_KUKRI = 42;
  public final static int BASE_ITEM_LARGEBOX = 66;
  public final static int BASE_ITEM_LARGESHIELD = 56;
  public final static int BASE_ITEM_LIGHTCROSSBOW = 7;
  public final static int BASE_ITEM_LIGHTFLAIL = 4;
  public final static int BASE_ITEM_LIGHTHAMMER = 37;
  public final static int BASE_ITEM_LIGHTMACE = 9;
  public final static int BASE_ITEM_LONGBOW = 8;
  public final static int BASE_ITEM_LONGSWORD = 1;
  public final static int BASE_ITEM_MAGICROD = 44;
  public final static int BASE_ITEM_MAGICSTAFF = 45;
  public final static int BASE_ITEM_MAGICWAND = 46;
  public final static int BASE_ITEM_MISCLARGE = 34;
  public final static int BASE_ITEM_MISCMEDIUM = 29;
  public final static int BASE_ITEM_MISCSMALL = 24;
  public final static int BASE_ITEM_MISCTALL = 43;
  public final static int BASE_ITEM_MISCTHIN = 79;
  public final static int BASE_ITEM_MISCWIDE = 68;
  public final static int BASE_ITEM_MORNINGSTAR = 47;
  public final static int BASE_ITEM_POTIONS = 49;
  public final static int BASE_ITEM_QUARTERSTAFF = 50;
  public final static int BASE_ITEM_RAPIER = 51;
  public final static int BASE_ITEM_RING = 52;
  public final static int BASE_ITEM_SCIMITAR = 53;
  public final static int BASE_ITEM_SCROLL = 54;
  public final static int BASE_ITEM_SCYTHE = 55;
  public final static int BASE_ITEM_SHORTBOW = 11;
  public final static int BASE_ITEM_SHORTSPEAR = 58;
  public final static int BASE_ITEM_SHORTSWORD = 0;
  public final static int BASE_ITEM_SHURIKEN = 59;
  public final static int BASE_ITEM_SICKLE = 60;
  public final static int BASE_ITEM_SLING = 61;
  public final static int BASE_ITEM_SMALLSHIELD = 14;
  public final static int BASE_ITEM_SPELLSCROLL = 75;
  public final static int BASE_ITEM_THIEVESTOOLS = 62;
  public final static int BASE_ITEM_THROWINGAXE = 63;
  public final static int BASE_ITEM_TORCH = 15;
  public final static int BASE_ITEM_TOWERSHIELD = 57;
  public final static int BASE_ITEM_TRAPKIT = 64;
  public final static int BASE_ITEM_TRIDENT = 95;
  public final static int BASE_ITEM_TWOBLADEDSWORD = 12;
  public final static int BASE_ITEM_WARHAMMER = 5;
  public final static int BASE_ITEM_WHIP = 111;
  public final static int BODY_NODE_CHEST = 1;
  public final static int BODY_NODE_HAND = 0;
  public final static int BODY_NODE_MONSTER_0 = 2;
  public final static int BODY_NODE_MONSTER_1 = 3;
  public final static int BODY_NODE_MONSTER_2 = 4;
  public final static int BODY_NODE_MONSTER_3 = 5;
  public final static int BODY_NODE_MONSTER_4 = 6;
  public final static int BODY_NODE_MONSTER_5 = 7;
  public final static int BODY_NODE_MONSTER_6 = 8;
  public final static int BODY_NODE_MONSTER_7 = 9;
  public final static int BODY_NODE_MONSTER_8 = 10;
  public final static int BODY_NODE_MONSTER_9 = 11;
  public final static int CAMERA_MODE_CHASE_CAMERA = 0;
  public final static int CAMERA_MODE_STIFF_CHASE_CAMERA = 2;
  public final static int CAMERA_MODE_TOP_DOWN = 1;
  public final static int CAMERA_TRANSITION_TYPE_CRAWL = 2;
  public final static int CAMERA_TRANSITION_TYPE_FAST = 70;
  public final static int CAMERA_TRANSITION_TYPE_MEDIUM = 40;
  public final static int CAMERA_TRANSITION_TYPE_SLOW = 20;
  public final static int CAMERA_TRANSITION_TYPE_SNAP = 0;
  public final static int CAMERA_TRANSITION_TYPE_VERY_FAST = 100;
  public final static int CAMERA_TRANSITION_TYPE_VERY_SLOW = 5;
  public final static int CLASS_TYPE_ABERRATION = 11;
  public final static int CLASS_TYPE_ANIMAL = 12;
  public final static int CLASS_TYPE_ARCANE_ARCHER = 29;
  public final static int CLASS_TYPE_ASSASSIN = 30;
  public final static int CLASS_TYPE_BARBARIAN = 0;
  public final static int CLASS_TYPE_BARD = 1;
  public final static int CLASS_TYPE_BEAST = 21;
  public final static int CLASS_TYPE_BLACKGUARD = 31;
  public final static int CLASS_TYPE_CLERIC = 2;
  public final static int CLASS_TYPE_COMMONER = 20;
  public final static int CLASS_TYPE_CONSTRUCT = 13;
  public final static int CLASS_TYPE_DIVINECHAMPION = 32;
  public final static int CLASS_TYPE_DIVINE_CHAMPION = 32;
  public final static int CLASS_TYPE_DRAGON = 18;
  public final static int CLASS_TYPE_DRAGONDISCIPLE = 37;
  public final static int CLASS_TYPE_DRAGON_DISCIPLE = 37;
  public final static int CLASS_TYPE_DRUID = 3;
  public final static int CLASS_TYPE_DWARVENDEFENDER = 36;
  public final static int CLASS_TYPE_DWARVEN_DEFENDER = 36;
  public final static int CLASS_TYPE_ELEMENTAL = 16;
  public final static int CLASS_TYPE_EYE_OF_GRUUMSH = 39;
  public final static int CLASS_TYPE_FEY = 17;
  public final static int CLASS_TYPE_FIGHTER = 4;
  public final static int CLASS_TYPE_GIANT = 22;
  public final static int CLASS_TYPE_HARPER = 28;
  public final static int CLASS_TYPE_HUMANOID = 14;
  public final static int CLASS_TYPE_INVALID = 255;
  public final static int CLASS_TYPE_MAGICAL_BEAST = 23;
  public final static int CLASS_TYPE_MONK = 5;
  public final static int CLASS_TYPE_MONSTROUS = 15;
  public final static int CLASS_TYPE_OOZE = 38;
  public final static int CLASS_TYPE_OUTSIDER = 24;
  public final static int CLASS_TYPE_PALADIN = 6;
  public final static int CLASS_TYPE_PALEMASTER = 34;
  public final static int CLASS_TYPE_PALE_MASTER = 34;
  public final static int CLASS_TYPE_PURPLE_DRAGON_KNIGHT = 41;
  public final static int CLASS_TYPE_RANGER = 7;
  public final static int CLASS_TYPE_ROGUE = 8;
  public final static int CLASS_TYPE_SHADOWDANCER = 27;
  public final static int CLASS_TYPE_SHAPECHANGER = 25;
  public final static int CLASS_TYPE_SHIFTER = 35;
  public final static int CLASS_TYPE_SHOU_DISCIPLE = 40;
  public final static int CLASS_TYPE_SORCERER = 9;
  public final static int CLASS_TYPE_UNDEAD = 19;
  public final static int CLASS_TYPE_VERMIN = 26;
  public final static int CLASS_TYPE_WEAPON_MASTER = 33;
  public final static int CLASS_TYPE_WIZARD = 10;
  public final static int COLOR_CHANNEL_HAIR = 1;
  public final static int COLOR_CHANNEL_SKIN = 0;
  public final static int COLOR_CHANNEL_TATTOO_1 = 2;
  public final static int COLOR_CHANNEL_TATTOO_2 = 3;
  public final static int COMBAT_MODE_DEFENSIVE_CASTING = 8;
  public final static int COMBAT_MODE_DEFENSIVE_STANCE = 10;
  public final static int COMBAT_MODE_DIRTY_FIGHTING = 9;
  public final static int COMBAT_MODE_EXPERTISE = 6;
  public final static int COMBAT_MODE_FLURRY_OF_BLOWS = 4;
  public final static int COMBAT_MODE_IMPROVED_EXPERTISE = 7;
  public final static int COMBAT_MODE_IMPROVED_POWER_ATTACK = 3;
  public final static int COMBAT_MODE_INVALID = 0;
  public final static int COMBAT_MODE_PARRY = 1;
  public final static int COMBAT_MODE_POWER_ATTACK = 2;
  public final static int COMBAT_MODE_RAPID_SHOT = 5;
  public final static int CREATURE_MODEL_TYPE_NONE = 0;
  public final static int CREATURE_MODEL_TYPE_SKIN = 1;
  public final static int CREATURE_MODEL_TYPE_TATTOO = 2;
  public final static int CREATURE_MODEL_TYPE_UNDEAD = 255;
  public final static int CREATURE_PART_BELT = 8;
  public final static int CREATURE_PART_HEAD = 20;
  public final static int CREATURE_PART_LEFT_BICEP = 13;
  public final static int CREATURE_PART_LEFT_FOOT = 1;
  public final static int CREATURE_PART_LEFT_FOREARM = 11;
  public final static int CREATURE_PART_LEFT_HAND = 17;
  public final static int CREATURE_PART_LEFT_SHIN = 3;
  public final static int CREATURE_PART_LEFT_SHOULDER = 15;
  public final static int CREATURE_PART_LEFT_THIGH = 4;
  public final static int CREATURE_PART_NECK = 9;
  public final static int CREATURE_PART_PELVIS = 6;
  public final static int CREATURE_PART_RIGHT_BICEP = 12;
  public final static int CREATURE_PART_RIGHT_FOOT = 0;
  public final static int CREATURE_PART_RIGHT_FOREARM = 10;
  public final static int CREATURE_PART_RIGHT_HAND = 16;
  public final static int CREATURE_PART_RIGHT_SHIN = 2;
  public final static int CREATURE_PART_RIGHT_SHOULDER = 14;
  public final static int CREATURE_PART_RIGHT_THIGH = 5;
  public final static int CREATURE_PART_TORSO = 7;
  public final static int CREATURE_SIZE_HUGE = 5;
  public final static int CREATURE_SIZE_INVALID = 0;
  public final static int CREATURE_SIZE_LARGE = 4;
  public final static int CREATURE_SIZE_MEDIUM = 3;
  public final static int CREATURE_SIZE_SMALL = 2;
  public final static int CREATURE_SIZE_TINY = 1;
  public final static int CREATURE_TAIL_TYPE_BONE = 2;
  public final static int CREATURE_TAIL_TYPE_DEVIL = 3;
  public final static int CREATURE_TAIL_TYPE_LIZARD = 1;
  public final static int CREATURE_TAIL_TYPE_NONE = 0;
  public final static int CREATURE_TYPE_CLASS = 2;
  public final static int CREATURE_TYPE_DOES_NOT_HAVE_SPELL_EFFECT = 6;
  public final static int CREATURE_TYPE_HAS_SPELL_EFFECT = 5;
  public final static int CREATURE_TYPE_IS_ALIVE = 4;
  public final static int CREATURE_TYPE_PERCEPTION = 7;
  public final static int CREATURE_TYPE_PLAYER_CHAR = 1;
  public final static int CREATURE_TYPE_RACIAL_TYPE = 0;
  public final static int CREATURE_TYPE_REPUTATION = 3;
  public final static int CREATURE_WING_TYPE_ANGEL = 2;
  public final static int CREATURE_WING_TYPE_BAT = 3;
  public final static int CREATURE_WING_TYPE_BIRD = 6;
  public final static int CREATURE_WING_TYPE_BUTTERFLY = 5;
  public final static int CREATURE_WING_TYPE_DEMON = 1;
  public final static int CREATURE_WING_TYPE_DRAGON = 4;
  public final static int CREATURE_WING_TYPE_NONE = 0;
  public final static int DAMAGE_BONUS_1 = 1;
  public final static int DAMAGE_BONUS_10 = 20;
  public final static int DAMAGE_BONUS_11 = 21;
  public final static int DAMAGE_BONUS_12 = 22;
  public final static int DAMAGE_BONUS_13 = 23;
  public final static int DAMAGE_BONUS_14 = 24;
  public final static int DAMAGE_BONUS_15 = 25;
  public final static int DAMAGE_BONUS_16 = 26;
  public final static int DAMAGE_BONUS_17 = 27;
  public final static int DAMAGE_BONUS_18 = 28;
  public final static int DAMAGE_BONUS_19 = 29;
  public final static int DAMAGE_BONUS_2 = 2;
  public final static int DAMAGE_BONUS_20 = 30;
  public final static int DAMAGE_BONUS_3 = 3;
  public final static int DAMAGE_BONUS_4 = 4;
  public final static int DAMAGE_BONUS_5 = 5;
  public final static int DAMAGE_BONUS_6 = 16;
  public final static int DAMAGE_BONUS_7 = 17;
  public final static int DAMAGE_BONUS_8 = 18;
  public final static int DAMAGE_BONUS_9 = 19;
  public final static int DAMAGE_POWER_ENERGY = 6;
  public final static int DAMAGE_POWER_NORMAL = 0;
  public final static int DAMAGE_POWER_PLUS_EIGHT = 9;
  public final static int DAMAGE_POWER_PLUS_EIGHTEEN = 19;
  public final static int DAMAGE_POWER_PLUS_ELEVEN = 12;
  public final static int DAMAGE_POWER_PLUS_FIFTEEN = 16;
  public final static int DAMAGE_POWER_PLUS_FIVE = 5;
  public final static int DAMAGE_POWER_PLUS_FOUR = 4;
  public final static int DAMAGE_POWER_PLUS_FOURTEEN = 15;
  public final static int DAMAGE_POWER_PLUS_NINE = 10;
  public final static int DAMAGE_POWER_PLUS_NINTEEN = 20;
  public final static int DAMAGE_POWER_PLUS_ONE = 1;
  public final static int DAMAGE_POWER_PLUS_SEVEN = 8;
  public final static int DAMAGE_POWER_PLUS_SEVENTEEN = 18;
  public final static int DAMAGE_POWER_PLUS_SIX = 7;
  public final static int DAMAGE_POWER_PLUS_SIXTEEN = 17;
  public final static int DAMAGE_POWER_PLUS_TEN = 11;
  public final static int DAMAGE_POWER_PLUS_THIRTEEN = 14;
  public final static int DAMAGE_POWER_PLUS_THREE = 3;
  public final static int DAMAGE_POWER_PLUS_TWELVE = 13;
  public final static int DAMAGE_POWER_PLUS_TWENTY = 21;
  public final static int DAMAGE_POWER_PLUS_TWO = 2;
  public final static int DAMAGE_TYPE_ACID = 16;
  public final static int DAMAGE_TYPE_BASE_WEAPON = 4096;
  public final static int DAMAGE_TYPE_BLUDGEONING = 1;
  public final static int DAMAGE_TYPE_COLD = 32;
  public final static int DAMAGE_TYPE_DIVINE = 64;
  public final static int DAMAGE_TYPE_ELECTRICAL = 128;
  public final static int DAMAGE_TYPE_FIRE = 256;
  public final static int DAMAGE_TYPE_MAGICAL = 8;
  public final static int DAMAGE_TYPE_NEGATIVE = 512;
  public final static int DAMAGE_TYPE_PIERCING = 2;
  public final static int DAMAGE_TYPE_POSITIVE = 1024;
  public final static int DAMAGE_TYPE_SLASHING = 4;
  public final static int DAMAGE_TYPE_SONIC = 2048;
  public final static int DEFENSIVE_CASTING_MODE_ACTIVATED = 1;
  public final static int DEFENSIVE_CASTING_MODE_DISABLED = 0;
  public final static int DETECT_MODE_ACTIVE = 1;
  public final static int DETECT_MODE_PASSIVE = 0;
  public final static float DIRECTION_EAST = 0.0f;
  public final static float DIRECTION_NORTH = 90.0f;
  public final static float DIRECTION_SOUTH = 270.0f;
  public final static float DIRECTION_WEST = 180.0f;
  public final static int DISEASE_BLINDING_SICKNESS = 0;
  public final static int DISEASE_BURROW_MAGGOTS = 14;
  public final static int DISEASE_CACKLE_FEVER = 1;
  public final static int DISEASE_DEMON_FEVER = 3;
  public final static int DISEASE_DEVIL_CHILLS = 2;
  public final static int DISEASE_DREAD_BLISTERS = 13;
  public final static int DISEASE_FILTH_FEVER = 4;
  public final static int DISEASE_GHOUL_ROT = 11;
  public final static int DISEASE_MINDFIRE = 5;
  public final static int DISEASE_MUMMY_ROT = 6;
  public final static int DISEASE_RED_ACHE = 7;
  public final static int DISEASE_RED_SLAAD_EGGS = 10;
  public final static int DISEASE_SHAKES = 8;
  public final static int DISEASE_SLIMY_DOOM = 9;
  public final static int DISEASE_SOLDIER_SHAKES = 15;
  public final static int DISEASE_VERMIN_MADNESS = 16;
  public final static int DISEASE_ZOMBIE_CREEP = 12;
  public final static int DOOR_ACTION_BASH = 2;
  public final static int DOOR_ACTION_IGNORE = 3;
  public final static int DOOR_ACTION_KNOCK = 4;
  public final static int DOOR_ACTION_OPEN = 0;
  public final static int DOOR_ACTION_UNLOCK = 1;
  public final static int DURATION_TYPE_INSTANT = 0;
  public final static int DURATION_TYPE_PERMANENT = 2;
  public final static int DURATION_TYPE_TEMPORARY = 1;
  public final static int EFFECT_TYPE_ABILITY_DECREASE = 39;
  public final static int EFFECT_TYPE_ABILITY_INCREASE = 38;
  public final static int EFFECT_TYPE_AC_DECREASE = 47;
  public final static int EFFECT_TYPE_AC_INCREASE = 46;
  public final static int EFFECT_TYPE_ARCANE_SPELL_FAILURE = 18;
  public final static int EFFECT_TYPE_AREA_OF_EFFECT = 20;
  public final static int EFFECT_TYPE_ATTACK_DECREASE = 41;
  public final static int EFFECT_TYPE_ATTACK_INCREASE = 40;
  public final static int EFFECT_TYPE_BEAM = 21;
  public final static int EFFECT_TYPE_BLINDNESS = 67;
  public final static int EFFECT_TYPE_CHARMED = 23;
  public final static int EFFECT_TYPE_CONCEALMENT = 72;
  public final static int EFFECT_TYPE_CONFUSED = 24;
  public final static int EFFECT_TYPE_CURSE = 33;
  public final static int EFFECT_TYPE_CUTSCENEGHOST = 83;
  public final static int EFFECT_TYPE_CUTSCENEIMMOBILIZE = 84;
  public final static int EFFECT_TYPE_CUTSCENE_PARALYZE = 80;
  public final static int EFFECT_TYPE_DAMAGE_DECREASE = 43;
  public final static int EFFECT_TYPE_DAMAGE_IMMUNITY_DECREASE = 45;
  public final static int EFFECT_TYPE_DAMAGE_IMMUNITY_INCREASE = 44;
  public final static int EFFECT_TYPE_DAMAGE_INCREASE = 42;
  public final static int EFFECT_TYPE_DAMAGE_REDUCTION = 7;
  public final static int EFFECT_TYPE_DAMAGE_RESISTANCE = 1;
  public final static int EFFECT_TYPE_DARKNESS = 58;
  public final static int EFFECT_TYPE_DAZED = 28;
  public final static int EFFECT_TYPE_DEAF = 13;
  public final static int EFFECT_TYPE_DISAPPEARAPPEAR = 75;
  public final static int EFFECT_TYPE_DISEASE = 32;
  public final static int EFFECT_TYPE_DISPELMAGICALL = 59;
  public final static int EFFECT_TYPE_DISPELMAGICBEST = 69;
  public final static int EFFECT_TYPE_DOMINATED = 26;
  public final static int EFFECT_TYPE_ELEMENTALSHIELD = 60;
  public final static int EFFECT_TYPE_ENEMY_ATTACK_BONUS = 17;
  public final static int EFFECT_TYPE_ENTANGLE = 11;
  public final static int EFFECT_TYPE_ETHEREAL = 81;
  public final static int EFFECT_TYPE_FRIGHTENED = 25;
  public final static int EFFECT_TYPE_HASTE = 36;
  public final static int EFFECT_TYPE_IMMUNITY = 15;
  public final static int EFFECT_TYPE_IMPROVEDINVISIBILITY = 57;
  public final static int EFFECT_TYPE_INVALIDEFFECT = 0;
  public final static int EFFECT_TYPE_INVISIBILITY = 56;
  public final static int EFFECT_TYPE_INVULNERABLE = 12;
  public final static int EFFECT_TYPE_MISS_CHANCE = 71;
  public final static int EFFECT_TYPE_MOVEMENT_SPEED_DECREASE = 49;
  public final static int EFFECT_TYPE_MOVEMENT_SPEED_INCREASE = 48;
  public final static int EFFECT_TYPE_NEGATIVELEVEL = 61;
  public final static int EFFECT_TYPE_PARALYZE = 27;
  public final static int EFFECT_TYPE_PETRIFY = 79;
  public final static int EFFECT_TYPE_POISON = 31;
  public final static int EFFECT_TYPE_POLYMORPH = 62;
  public final static int EFFECT_TYPE_REGENERATE = 3;
  public final static int EFFECT_TYPE_RESURRECTION = 14;
  public final static int EFFECT_TYPE_SANCTUARY = 63;
  public final static int EFFECT_TYPE_SAVING_THROW_DECREASE = 51;
  public final static int EFFECT_TYPE_SAVING_THROW_INCREASE = 50;
  public final static int EFFECT_TYPE_SEEINVISIBLE = 65;
  public final static int EFFECT_TYPE_SILENCE = 34;
  public final static int EFFECT_TYPE_SKILL_DECREASE = 55;
  public final static int EFFECT_TYPE_SKILL_INCREASE = 54;
  public final static int EFFECT_TYPE_SLEEP = 30;
  public final static int EFFECT_TYPE_SLOW = 37;
  public final static int EFFECT_TYPE_SPELLLEVELABSORPTION = 68;
  public final static int EFFECT_TYPE_SPELL_FAILURE = 82;
  public final static int EFFECT_TYPE_SPELL_IMMUNITY = 73;
  public final static int EFFECT_TYPE_SPELL_RESISTANCE_DECREASE = 53;
  public final static int EFFECT_TYPE_SPELL_RESISTANCE_INCREASE = 52;
  public final static int EFFECT_TYPE_STUNNED = 29;
  public final static int EFFECT_TYPE_SWARM = 76;
  public final static int EFFECT_TYPE_TEMPORARY_HITPOINTS = 9;
  public final static int EFFECT_TYPE_TIMESTOP = 66;
  public final static int EFFECT_TYPE_TRUESEEING = 64;
  public final static int EFFECT_TYPE_TURNED = 35;
  public final static int EFFECT_TYPE_TURN_RESISTANCE_DECREASE = 77;
  public final static int EFFECT_TYPE_TURN_RESISTANCE_INCREASE = 78;
  public final static int EFFECT_TYPE_ULTRAVISION = 70;
  public final static int EFFECT_TYPE_VISUALEFFECT = 74;
  public final static int ENCOUNTER_DIFFICULTY_EASY = 1;
  public final static int ENCOUNTER_DIFFICULTY_HARD = 3;
  public final static int ENCOUNTER_DIFFICULTY_IMPOSSIBLE = 4;
  public final static int ENCOUNTER_DIFFICULTY_NORMAL = 2;
  public final static int ENCOUNTER_DIFFICULTY_VERY_EASY = 0;
  public final static int EVENT_ATTACKED = 1005;
  public final static int EVENT_DAMAGED = 1006;
  public final static int EVENT_DIALOGUE = 1004;
  public final static int EVENT_DISTURBED = 1008;
  public final static int EVENT_END_COMBAT_ROUND = 1003;
  public final static int EVENT_HEARTBEAT = 1001;
  public final static int EVENT_PERCEIVE = 1002;
  public final static int EVENT_SCRIPT_AREAOFEFFECT_ON_HEARTBEAT = 11000;
  public final static int EVENT_SCRIPT_AREAOFEFFECT_ON_OBJECT_ENTER = 11002;
  public final static int EVENT_SCRIPT_AREAOFEFFECT_ON_OBJECT_EXIT = 11003;
  public final static int EVENT_SCRIPT_AREAOFEFFECT_ON_USER_DEFINED_EVENT = 11001;
  public final static int EVENT_SCRIPT_AREA_ON_ENTER = 4002;
  public final static int EVENT_SCRIPT_AREA_ON_EXIT = 4003;
  public final static int EVENT_SCRIPT_AREA_ON_HEARTBEAT = 4000;
  public final static int EVENT_SCRIPT_AREA_ON_USER_DEFINED_EVENT = 4001;
  public final static int EVENT_SCRIPT_CREATURE_ON_BLOCKED_BY_DOOR = 5012;
  public final static int EVENT_SCRIPT_CREATURE_ON_DAMAGED = 5004;
  public final static int EVENT_SCRIPT_CREATURE_ON_DEATH = 5010;
  public final static int EVENT_SCRIPT_CREATURE_ON_DIALOGUE = 5007;
  public final static int EVENT_SCRIPT_CREATURE_ON_DISTURBED = 5005;
  public final static int EVENT_SCRIPT_CREATURE_ON_END_COMBATROUND = 5006;
  public final static int EVENT_SCRIPT_CREATURE_ON_HEARTBEAT = 5000;
  public final static int EVENT_SCRIPT_CREATURE_ON_MELEE_ATTACKED = 5003;
  public final static int EVENT_SCRIPT_CREATURE_ON_NOTICE = 5001;
  public final static int EVENT_SCRIPT_CREATURE_ON_RESTED = 5009;
  public final static int EVENT_SCRIPT_CREATURE_ON_SPAWN_IN = 5008;
  public final static int EVENT_SCRIPT_CREATURE_ON_SPELLCASTAT = 5002;
  public final static int EVENT_SCRIPT_CREATURE_ON_USER_DEFINED_EVENT = 5011;
  public final static int EVENT_SCRIPT_DOOR_ON_CLICKED = 10012;
  public final static int EVENT_SCRIPT_DOOR_ON_CLOSE = 10001;
  public final static int EVENT_SCRIPT_DOOR_ON_DAMAGE = 10002;
  public final static int EVENT_SCRIPT_DOOR_ON_DEATH = 10003;
  public final static int EVENT_SCRIPT_DOOR_ON_DIALOGUE = 10013;
  public final static int EVENT_SCRIPT_DOOR_ON_DISARM = 10004;
  public final static int EVENT_SCRIPT_DOOR_ON_FAIL_TO_OPEN = 10014;
  public final static int EVENT_SCRIPT_DOOR_ON_HEARTBEAT = 10005;
  public final static int EVENT_SCRIPT_DOOR_ON_LOCK = 10006;
  public final static int EVENT_SCRIPT_DOOR_ON_MELEE_ATTACKED = 10007;
  public final static int EVENT_SCRIPT_DOOR_ON_OPEN = 10000;
  public final static int EVENT_SCRIPT_DOOR_ON_SPELLCASTAT = 10008;
  public final static int EVENT_SCRIPT_DOOR_ON_TRAPTRIGGERED = 10009;
  public final static int EVENT_SCRIPT_DOOR_ON_UNLOCK = 10010;
  public final static int EVENT_SCRIPT_DOOR_ON_USERDEFINED = 10011;
  public final static int EVENT_SCRIPT_ENCOUNTER_ON_ENCOUNTER_EXHAUSTED = 13003;
  public final static int EVENT_SCRIPT_ENCOUNTER_ON_HEARTBEAT = 13002;
  public final static int EVENT_SCRIPT_ENCOUNTER_ON_OBJECT_ENTER = 13000;
  public final static int EVENT_SCRIPT_ENCOUNTER_ON_OBJECT_EXIT = 13001;
  public final static int EVENT_SCRIPT_ENCOUNTER_ON_USER_DEFINED_EVENT = 13004;
  public final static int EVENT_SCRIPT_MODULE_ON_ACQUIRE_ITEM = 3007;
  public final static int EVENT_SCRIPT_MODULE_ON_ACTIVATE_ITEM = 3006;
  public final static int EVENT_SCRIPT_MODULE_ON_CLIENT_ENTER = 3004;
  public final static int EVENT_SCRIPT_MODULE_ON_CLIENT_EXIT = 3005;
  public final static int EVENT_SCRIPT_MODULE_ON_EQUIP_ITEM = 3015;
  public final static int EVENT_SCRIPT_MODULE_ON_HEARTBEAT = 3000;
  public final static int EVENT_SCRIPT_MODULE_ON_LOSE_ITEM = 3008;
  public final static int EVENT_SCRIPT_MODULE_ON_MODULE_LOAD = 3002;
  public final static int EVENT_SCRIPT_MODULE_ON_MODULE_START = 3003;
  public final static int EVENT_SCRIPT_MODULE_ON_PLAYER_CANCEL_CUTSCENE = 3014;
  public final static int EVENT_SCRIPT_MODULE_ON_PLAYER_CHAT = 3017;
  public final static int EVENT_SCRIPT_MODULE_ON_PLAYER_DEATH = 3009;
  public final static int EVENT_SCRIPT_MODULE_ON_PLAYER_DYING = 3010;
  public final static int EVENT_SCRIPT_MODULE_ON_PLAYER_LEVEL_UP = 3013;
  public final static int EVENT_SCRIPT_MODULE_ON_PLAYER_REST = 3012;
  public final static int EVENT_SCRIPT_MODULE_ON_RESPAWN_BUTTON_PRESSED = 3011;
  public final static int EVENT_SCRIPT_MODULE_ON_UNEQUIP_ITEM = 3016;
  public final static int EVENT_SCRIPT_MODULE_ON_USER_DEFINED_EVENT = 3001;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_CLOSED = 9000;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_DAMAGED = 9001;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_DEATH = 9002;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_DIALOGUE = 9014;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_DISARM = 9003;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_HEARTBEAT = 9004;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_INVENTORYDISTURBED = 9005;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_LEFT_CLICK = 9015;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_LOCK = 9006;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_MELEEATTACKED = 9007;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_OPEN = 9008;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_SPELLCASTAT = 9009;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_TRAPTRIGGERED = 9010;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_UNLOCK = 9011;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_USED = 9012;
  public final static int EVENT_SCRIPT_PLACEABLE_ON_USER_DEFINED_EVENT = 9013;
  public final static int EVENT_SCRIPT_STORE_ON_CLOSE = 14001;
  public final static int EVENT_SCRIPT_STORE_ON_OPEN = 14000;
  public final static int EVENT_SCRIPT_TRIGGER_ON_CLICKED = 7006;
  public final static int EVENT_SCRIPT_TRIGGER_ON_DISARMED = 7005;
  public final static int EVENT_SCRIPT_TRIGGER_ON_HEARTBEAT = 7000;
  public final static int EVENT_SCRIPT_TRIGGER_ON_OBJECT_ENTER = 7001;
  public final static int EVENT_SCRIPT_TRIGGER_ON_OBJECT_EXIT = 7002;
  public final static int EVENT_SCRIPT_TRIGGER_ON_TRAPTRIGGERED = 7004;
  public final static int EVENT_SCRIPT_TRIGGER_ON_USER_DEFINED_EVENT = 7003;
  public final static int EVENT_SPELL_CAST_AT = 1011;
  public final static float FADE_SPEED_FAST = 0.017f;
  public final static float FADE_SPEED_FASTEST = 0.25f;
  public final static float FADE_SPEED_MEDIUM = 0.01f;
  public final static float FADE_SPEED_SLOW = 0.005f;
  public final static float FADE_SPEED_SLOWEST = 0.003f;
  public final static int FALSE = 0;
  public final static int FAMILIAR_CREATURE_TYPE_BAT = 0;
  public final static int FAMILIAR_CREATURE_TYPE_CRAGCAT = 1;
  public final static int FAMILIAR_CREATURE_TYPE_EYEBALL = 10;
  public final static int FAMILIAR_CREATURE_TYPE_FAIRY_DRAGON = 8;
  public final static int FAMILIAR_CREATURE_TYPE_FIREMEPHIT = 4;
  public final static int FAMILIAR_CREATURE_TYPE_HELLHOUND = 2;
  public final static int FAMILIAR_CREATURE_TYPE_ICEMEPHIT = 5;
  public final static int FAMILIAR_CREATURE_TYPE_IMP = 3;
  public final static int FAMILIAR_CREATURE_TYPE_NONE = 255;
  public final static int FAMILIAR_CREATURE_TYPE_PIXIE = 6;
  public final static int FAMILIAR_CREATURE_TYPE_PSEUDO_DRAGON = 9;
  public final static int FAMILIAR_CREATURE_TYPE_RAVEN = 7;
  public final static int FEAT_AIR_DOMAIN_POWER = 311;
  public final static int FEAT_ALERTNESS = 0;
  public final static int FEAT_AMBIDEXTERITY = 1;
  public final static int FEAT_ANIMAL_COMPANION = 199;
  public final static int FEAT_ANIMAL_DOMAIN_POWER = 312;
  public final static int FEAT_ANIMATE_DEAD = 889;
  public final static int FEAT_ARCANE_DEFENSE_ABJURATION = 415;
  public final static int FEAT_ARCANE_DEFENSE_CONJURATION = 416;
  public final static int FEAT_ARCANE_DEFENSE_DIVINATION = 417;
  public final static int FEAT_ARCANE_DEFENSE_ENCHANTMENT = 418;
  public final static int FEAT_ARCANE_DEFENSE_EVOCATION = 419;
  public final static int FEAT_ARCANE_DEFENSE_ILLUSION = 420;
  public final static int FEAT_ARCANE_DEFENSE_NECROMANCY = 421;
  public final static int FEAT_ARCANE_DEFENSE_TRANSMUTATION = 422;
  public final static int FEAT_ARMOR_PROFICIENCY_HEAVY = 2;
  public final static int FEAT_ARMOR_PROFICIENCY_LIGHT = 3;
  public final static int FEAT_ARMOR_PROFICIENCY_MEDIUM = 4;
  public final static int FEAT_ARTIST = 378;
  public final static int FEAT_AURA_OF_COURAGE = 300;
  public final static int FEAT_BARBARIAN_ENDURANCE = 194;
  public final static int FEAT_BARBARIAN_RAGE = 293;
  public final static int FEAT_BARDIC_KNOWLEDGE = 197;
  public final static int FEAT_BARD_SONGS = 257;
  public final static int FEAT_BATTLE_TRAINING_VERSUS_GIANTS = 233;
  public final static int FEAT_BATTLE_TRAINING_VERSUS_GOBLINS = 232;
  public final static int FEAT_BATTLE_TRAINING_VERSUS_ORCS = 231;
  public final static int FEAT_BATTLE_TRAINING_VERSUS_REPTILIANS = 242;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_10D6 = 1013;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_11D6 = 1014;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_12D6 = 1015;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_13D6 = 1016;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_14D6 = 1017;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_15D6 = 1018;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_1D6 = 460;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_2D6 = 461;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_3D6 = 462;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_4D6 = 1007;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_5D6 = 1008;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_6D6 = 1009;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_7D6 = 1010;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_8D6 = 1011;
  public final static int FEAT_BLACKGUARD_SNEAK_ATTACK_9D6 = 1012;
  public final static int FEAT_BLINDSIGHT_10_FEET = 486;
  public final static int FEAT_BLINDSIGHT_5_FEET = 485;
  public final static int FEAT_BLINDSIGHT_60_FEET = 488;
  public final static int FEAT_BLIND_FIGHT = 408;
  public final static int FEAT_BLOODED = 379;
  public final static int FEAT_BONE_SKIN_2 = 886;
  public final static int FEAT_BONE_SKIN_4 = 887;
  public final static int FEAT_BONE_SKIN_6 = 888;
  public final static int FEAT_BREW_POTION = 944;
  public final static int FEAT_BULLHEADED = 380;
  public final static int FEAT_BULLS_STRENGTH = 478;
  public final static int FEAT_CALLED_SHOT = 5;
  public final static int FEAT_CIRCLE_KICK = 409;
  public final static int FEAT_CLEAVE = 6;
  public final static int FEAT_COMBAT_CASTING = 7;
  public final static int FEAT_CONTAGION = 479;
  public final static int FEAT_COURTLY_MAGOCRACY = 381;
  public final static int FEAT_CRAFT_HARPER_ITEM = 440;
  public final static int FEAT_CRAFT_WAND = 946;
  public final static int FEAT_CRIPPLING_STRIKE = 222;
  public final static int FEAT_CURSE_SONG = 871;
  public final static int FEAT_DAMAGE_REDUCTION = 196;
  public final static int FEAT_DAMAGE_REDUCTION_6 = 948;
  public final static int FEAT_DARKVISION = 228;
  public final static int FEAT_DEATHLESS_MASTERY = 896;
  public final static int FEAT_DEATHLESS_MASTER_TOUCH = 897;
  public final static int FEAT_DEATHLESS_VIGOR = 891;
  public final static int FEAT_DEATH_DOMAIN_POWER = 310;
  public final static int FEAT_DEFENSIVE_ROLL = 223;
  public final static int FEAT_DEFLECT_ARROWS = 8;
  public final static int FEAT_DENEIRS_EYE = 437;
  public final static int FEAT_DESTRUCTION_DOMAIN_POWER = 313;
  public final static int FEAT_DIAMOND_BODY = 214;
  public final static int FEAT_DIAMOND_SOUL = 215;
  public final static int FEAT_DIRTY_FIGHTING = 425;
  public final static int FEAT_DISARM = 9;
  public final static int FEAT_DIVINE_GRACE = 217;
  public final static int FEAT_DIVINE_HEALTH = 219;
  public final static int FEAT_DIVINE_MIGHT = 413;
  public final static int FEAT_DIVINE_SHIELD = 414;
  public final static int FEAT_DIVINE_WRATH = 909;
  public final static int FEAT_DODGE = 10;
  public final static int FEAT_DRAGON_ABILITIES = 962;
  public final static int FEAT_DRAGON_ARMOR = 961;
  public final static int FEAT_DRAGON_DIS_BREATH = 965;
  public final static int FEAT_DRAGON_HDINCREASE_D10 = 1044;
  public final static int FEAT_DRAGON_HDINCREASE_D6 = 1042;
  public final static int FEAT_DRAGON_HDINCREASE_D8 = 1043;
  public final static int FEAT_DRAGON_IMMUNE_FIRE = 964;
  public final static int FEAT_DRAGON_IMMUNE_PARALYSIS = 963;
  public final static int FEAT_DWARVEN_DEFENDER_DEFENSIVE_STANCE = 947;
  public final static int FEAT_EARTH_DOMAIN_POWER = 314;
  public final static int FEAT_ELEMENTAL_SHAPE = 304;
  public final static int FEAT_EMPOWER_SPELL = 11;
  public final static int FEAT_EMPTY_BODY = 297;
  public final static int FEAT_EPIC_ARCANE_ARCHER = 977;
  public final static int FEAT_EPIC_ARMOR_SKIN = 490;
  public final static int FEAT_EPIC_ASSASSIN = 978;
  public final static int FEAT_EPIC_AUTOMATIC_QUICKEN_1 = 857;
  public final static int FEAT_EPIC_AUTOMATIC_QUICKEN_2 = 858;
  public final static int FEAT_EPIC_AUTOMATIC_QUICKEN_3 = 859;
  public final static int FEAT_EPIC_AUTOMATIC_SILENT_SPELL_1 = 860;
  public final static int FEAT_EPIC_AUTOMATIC_SILENT_SPELL_2 = 861;
  public final static int FEAT_EPIC_AUTOMATIC_SILENT_SPELL_3 = 862;
  public final static int FEAT_EPIC_AUTOMATIC_STILL_SPELL_1 = 863;
  public final static int FEAT_EPIC_AUTOMATIC_STILL_SPELL_2 = 864;
  public final static int FEAT_EPIC_AUTOMATIC_STILL_SPELL_3 = 865;
  public final static int FEAT_EPIC_BANE_OF_ENEMIES = 855;
  public final static int FEAT_EPIC_BARBARIAN = 967;
  public final static int FEAT_EPIC_BARBARIAN_DAMAGE_REDUCTION = 1067;
  public final static int FEAT_EPIC_BARD = 968;
  public final static int FEAT_EPIC_BLACKGUARD = 979;
  public final static int FEAT_EPIC_BLINDING_SPEED = 491;
  public final static int FEAT_EPIC_CHARACTER = 1001;
  public final static int FEAT_EPIC_CLERIC = 969;
  public final static int FEAT_EPIC_CONSTRUCT_SHAPE = 1061;
  public final static int FEAT_EPIC_DAMAGE_REDUCTION_3 = 492;
  public final static int FEAT_EPIC_DAMAGE_REDUCTION_6 = 493;
  public final static int FEAT_EPIC_DAMAGE_REDUCTION_9 = 494;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_BASTARDSWORD = 528;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_BATTLEAXE = 516;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_CLUB = 495;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_CREATURE = 532;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_DAGGER = 496;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_DART = 497;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_DIREMACE = 529;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_DOUBLEAXE = 530;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_DWAXE = 955;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_GREATAXE = 517;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_GREATSWORD = 513;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_HALBERD = 518;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_HANDAXE = 514;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_HEAVYCROSSBOW = 498;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_HEAVYFLAIL = 522;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_KAMA = 523;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_KATANA = 527;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_KUKRI = 524;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTCROSSBOW = 499;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTFLAIL = 520;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTHAMMER = 519;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTMACE = 500;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_LONGBOW = 507;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_LONGSWORD = 512;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_MORNINGSTAR = 501;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_QUARTERSTAFF = 502;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_RAPIER = 510;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SCIMITAR = 511;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SCYTHE = 526;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SHORTBOW = 508;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SHORTSPEAR = 503;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SHORTSWORD = 509;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SHURIKEN = 525;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SICKLE = 504;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_SLING = 505;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_THROWINGAXE = 515;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_TRIDENT = 1075;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_TWOBLADEDSWORD = 531;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_UNARMED = 506;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_WARHAMMER = 521;
  public final static int FEAT_EPIC_DEVASTATING_CRITICAL_WHIP = 996;
  public final static int FEAT_EPIC_DIVINE_CHAMPION = 982;
  public final static int FEAT_EPIC_DODGE = 856;
  public final static int FEAT_EPIC_DRUID = 970;
  public final static int FEAT_EPIC_DRUID_INFINITE_ELEMENTAL_SHAPE = 1069;
  public final static int FEAT_EPIC_DRUID_INFINITE_WILDSHAPE = 1068;
  public final static int FEAT_EPIC_DWARVEN_DEFENDER = 985;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_1 = 543;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_10 = 552;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_2 = 544;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_3 = 545;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_4 = 546;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_5 = 547;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_6 = 548;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_7 = 549;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_8 = 550;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ACID_9 = 551;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_1 = 533;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_10 = 542;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_2 = 534;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_3 = 535;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_4 = 536;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_5 = 537;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_6 = 538;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_7 = 539;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_8 = 540;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_COLD_9 = 541;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_1 = 563;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_10 = 572;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_2 = 564;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_3 = 565;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_4 = 566;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_5 = 567;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_6 = 568;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_7 = 569;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_8 = 570;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_9 = 571;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_1 = 553;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_10 = 562;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_2 = 554;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_3 = 555;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_4 = 556;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_5 = 557;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_6 = 558;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_7 = 559;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_8 = 560;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_FIRE_9 = 561;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_1 = 573;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_10 = 582;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_2 = 574;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_3 = 575;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_4 = 576;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_5 = 577;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_6 = 578;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_7 = 579;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_8 = 580;
  public final static int FEAT_EPIC_ENERGY_RESISTANCE_SONIC_9 = 581;
  public final static int FEAT_EPIC_EPIC_FIEND = 1003;
  public final static int FEAT_EPIC_EPIC_SHADOWLORD = 1002;
  public final static int FEAT_EPIC_FIGHTER = 966;
  public final static int FEAT_EPIC_FORTITUDE = 583;
  public final static int FEAT_EPIC_GREAT_CHARISMA_1 = 764;
  public final static int FEAT_EPIC_GREAT_CHARISMA_10 = 773;
  public final static int FEAT_EPIC_GREAT_CHARISMA_2 = 765;
  public final static int FEAT_EPIC_GREAT_CHARISMA_3 = 766;
  public final static int FEAT_EPIC_GREAT_CHARISMA_4 = 767;
  public final static int FEAT_EPIC_GREAT_CHARISMA_5 = 768;
  public final static int FEAT_EPIC_GREAT_CHARISMA_6 = 769;
  public final static int FEAT_EPIC_GREAT_CHARISMA_7 = 770;
  public final static int FEAT_EPIC_GREAT_CHARISMA_8 = 771;
  public final static int FEAT_EPIC_GREAT_CHARISMA_9 = 772;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_1 = 774;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_10 = 783;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_2 = 775;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_3 = 776;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_4 = 777;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_5 = 778;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_6 = 779;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_7 = 780;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_8 = 781;
  public final static int FEAT_EPIC_GREAT_CONSTITUTION_9 = 782;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_1 = 784;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_10 = 793;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_2 = 785;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_3 = 786;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_4 = 787;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_5 = 788;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_6 = 789;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_7 = 790;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_8 = 791;
  public final static int FEAT_EPIC_GREAT_DEXTERITY_9 = 792;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_1 = 794;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_10 = 803;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_2 = 795;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_3 = 796;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_4 = 797;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_5 = 798;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_6 = 799;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_7 = 800;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_8 = 801;
  public final static int FEAT_EPIC_GREAT_INTELLIGENCE_9 = 802;
  public final static int FEAT_EPIC_GREAT_SMITING_1 = 824;
  public final static int FEAT_EPIC_GREAT_SMITING_10 = 833;
  public final static int FEAT_EPIC_GREAT_SMITING_2 = 825;
  public final static int FEAT_EPIC_GREAT_SMITING_3 = 826;
  public final static int FEAT_EPIC_GREAT_SMITING_4 = 827;
  public final static int FEAT_EPIC_GREAT_SMITING_5 = 828;
  public final static int FEAT_EPIC_GREAT_SMITING_6 = 829;
  public final static int FEAT_EPIC_GREAT_SMITING_7 = 830;
  public final static int FEAT_EPIC_GREAT_SMITING_8 = 831;
  public final static int FEAT_EPIC_GREAT_SMITING_9 = 832;
  public final static int FEAT_EPIC_GREAT_STRENGTH_1 = 814;
  public final static int FEAT_EPIC_GREAT_STRENGTH_10 = 823;
  public final static int FEAT_EPIC_GREAT_STRENGTH_2 = 815;
  public final static int FEAT_EPIC_GREAT_STRENGTH_3 = 816;
  public final static int FEAT_EPIC_GREAT_STRENGTH_4 = 817;
  public final static int FEAT_EPIC_GREAT_STRENGTH_5 = 818;
  public final static int FEAT_EPIC_GREAT_STRENGTH_6 = 819;
  public final static int FEAT_EPIC_GREAT_STRENGTH_7 = 820;
  public final static int FEAT_EPIC_GREAT_STRENGTH_8 = 821;
  public final static int FEAT_EPIC_GREAT_STRENGTH_9 = 822;
  public final static int FEAT_EPIC_GREAT_WISDOM_1 = 804;
  public final static int FEAT_EPIC_GREAT_WISDOM_10 = 813;
  public final static int FEAT_EPIC_GREAT_WISDOM_2 = 805;
  public final static int FEAT_EPIC_GREAT_WISDOM_3 = 806;
  public final static int FEAT_EPIC_GREAT_WISDOM_4 = 807;
  public final static int FEAT_EPIC_GREAT_WISDOM_5 = 808;
  public final static int FEAT_EPIC_GREAT_WISDOM_6 = 809;
  public final static int FEAT_EPIC_GREAT_WISDOM_7 = 810;
  public final static int FEAT_EPIC_GREAT_WISDOM_8 = 811;
  public final static int FEAT_EPIC_GREAT_WISDOM_9 = 812;
  public final static int FEAT_EPIC_HARPER_SCOUT = 981;
  public final static int FEAT_EPIC_IMPROVED_COMBAT_CASTING = 696;
  public final static int FEAT_EPIC_IMPROVED_KI_STRIKE_4 = 697;
  public final static int FEAT_EPIC_IMPROVED_KI_STRIKE_5 = 698;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_1 = 834;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_10 = 843;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_2 = 835;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_3 = 836;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_4 = 837;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_5 = 838;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_6 = 839;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_7 = 840;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_8 = 841;
  public final static int FEAT_EPIC_IMPROVED_SNEAK_ATTACK_9 = 842;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_1 = 699;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_10 = 708;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_2 = 700;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_3 = 701;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_4 = 702;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_5 = 703;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_6 = 704;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_7 = 705;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_8 = 706;
  public final static int FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_9 = 707;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_1 = 844;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_10 = 853;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_2 = 845;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_3 = 846;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_4 = 847;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_5 = 848;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_6 = 849;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_7 = 850;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_8 = 851;
  public final static int FEAT_EPIC_IMPROVED_STUNNING_FIST_9 = 852;
  public final static int FEAT_EPIC_LASTING_INSPIRATION = 870;
  public final static int FEAT_EPIC_MONK = 971;
  public final static int FEAT_EPIC_OUTSIDER_SHAPE = 1060;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_BASTARDSWORD = 742;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_BATTLEAXE = 730;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_CLUB = 709;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_CREATURE = 746;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_DAGGER = 710;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_DART = 711;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_DIREMACE = 743;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_DOUBLEAXE = 744;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_DWAXE = 958;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_GREATAXE = 731;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_GREATSWORD = 727;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_HALBERD = 732;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_HANDAXE = 728;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_HEAVYCROSSBOW = 712;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_HEAVYFLAIL = 736;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_KAMA = 737;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_KATANA = 741;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_KUKRI = 738;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTCROSSBOW = 713;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTFLAIL = 734;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTHAMMER = 733;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTMACE = 714;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_LONGBOW = 721;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_LONGSWORD = 726;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_MORNINGSTAR = 715;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_QUARTERSTAFF = 716;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_RAPIER = 724;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SCIMITAR = 725;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SCYTHE = 740;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SHORTBOW = 722;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SHORTSPEAR = 717;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SHORTSWORD = 723;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SHURIKEN = 739;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SICKLE = 718;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_SLING = 719;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_THROWINGAXE = 729;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_TRIDENT = 1078;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_TWOBLADEDSWORD = 745;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_UNARMED = 720;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_WARHAMMER = 735;
  public final static int FEAT_EPIC_OVERWHELMING_CRITICAL_WHIP = 999;
  public final static int FEAT_EPIC_PALADIN = 972;
  public final static int FEAT_EPIC_PALE_MASTER = 984;
  public final static int FEAT_EPIC_PERFECT_HEALTH = 747;
  public final static int FEAT_EPIC_PROWESS = 584;
  public final static int FEAT_EPIC_RANGER = 973;
  public final static int FEAT_EPIC_RED_DRAGON_DISC = 987;
  public final static int FEAT_EPIC_REFLEXES = 585;
  public final static int FEAT_EPIC_REPUTATION = 586;
  public final static int FEAT_EPIC_ROGUE = 974;
  public final static int FEAT_EPIC_SELF_CONCEALMENT_10 = 748;
  public final static int FEAT_EPIC_SELF_CONCEALMENT_20 = 749;
  public final static int FEAT_EPIC_SELF_CONCEALMENT_30 = 750;
  public final static int FEAT_EPIC_SELF_CONCEALMENT_40 = 751;
  public final static int FEAT_EPIC_SELF_CONCEALMENT_50 = 752;
  public final static int FEAT_EPIC_SHADOWDANCER = 980;
  public final static int FEAT_EPIC_SHIFTER = 986;
  public final static int FEAT_EPIC_SHIFTER_INFINITE_HUMANOID_SHAPE = 1066;
  public final static int FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_1 = 1062;
  public final static int FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_2 = 1063;
  public final static int FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_3 = 1064;
  public final static int FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_4 = 1065;
  public final static int FEAT_EPIC_SKILL_FOCUS_ANIMAL_EMPATHY = 587;
  public final static int FEAT_EPIC_SKILL_FOCUS_APPRAISE = 588;
  public final static int FEAT_EPIC_SKILL_FOCUS_BLUFF = 917;
  public final static int FEAT_EPIC_SKILL_FOCUS_CONCENTRATION = 589;
  public final static int FEAT_EPIC_SKILL_FOCUS_CRAFT_ARMOR = 913;
  public final static int FEAT_EPIC_SKILL_FOCUS_CRAFT_TRAP = 590;
  public final static int FEAT_EPIC_SKILL_FOCUS_CRAFT_WEAPON = 914;
  public final static int FEAT_EPIC_SKILL_FOCUS_DISABLETRAP = 591;
  public final static int FEAT_EPIC_SKILL_FOCUS_DISCIPLINE = 592;
  public final static int FEAT_EPIC_SKILL_FOCUS_HEAL = 593;
  public final static int FEAT_EPIC_SKILL_FOCUS_HIDE = 594;
  public final static int FEAT_EPIC_SKILL_FOCUS_INTIMIDATE = 918;
  public final static int FEAT_EPIC_SKILL_FOCUS_LISTEN = 595;
  public final static int FEAT_EPIC_SKILL_FOCUS_LORE = 596;
  public final static int FEAT_EPIC_SKILL_FOCUS_MOVESILENTLY = 597;
  public final static int FEAT_EPIC_SKILL_FOCUS_OPENLOCK = 598;
  public final static int FEAT_EPIC_SKILL_FOCUS_PARRY = 599;
  public final static int FEAT_EPIC_SKILL_FOCUS_PERFORM = 600;
  public final static int FEAT_EPIC_SKILL_FOCUS_PERSUADE = 601;
  public final static int FEAT_EPIC_SKILL_FOCUS_PICKPOCKET = 602;
  public final static int FEAT_EPIC_SKILL_FOCUS_SEARCH = 603;
  public final static int FEAT_EPIC_SKILL_FOCUS_SETTRAP = 604;
  public final static int FEAT_EPIC_SKILL_FOCUS_SPELLCRAFT = 605;
  public final static int FEAT_EPIC_SKILL_FOCUS_SPOT = 606;
  public final static int FEAT_EPIC_SKILL_FOCUS_TAUNT = 607;
  public final static int FEAT_EPIC_SKILL_FOCUS_TUMBLE = 608;
  public final static int FEAT_EPIC_SKILL_FOCUS_USEMAGICDEVICE = 609;
  public final static int FEAT_EPIC_SORCERER = 975;
  public final static int FEAT_EPIC_SPELL_DRAGON_KNIGHT = 875;
  public final static int FEAT_EPIC_SPELL_EPIC_WARDING = 990;
  public final static int FEAT_EPIC_SPELL_FOCUS_ABJURATION = 610;
  public final static int FEAT_EPIC_SPELL_FOCUS_CONJURATION = 611;
  public final static int FEAT_EPIC_SPELL_FOCUS_DIVINATION = 612;
  public final static int FEAT_EPIC_SPELL_FOCUS_ENCHANTMENT = 613;
  public final static int FEAT_EPIC_SPELL_FOCUS_EVOCATION = 614;
  public final static int FEAT_EPIC_SPELL_FOCUS_ILLUSION = 615;
  public final static int FEAT_EPIC_SPELL_FOCUS_NECROMANCY = 616;
  public final static int FEAT_EPIC_SPELL_FOCUS_TRANSMUTATION = 617;
  public final static int FEAT_EPIC_SPELL_HELLBALL = 876;
  public final static int FEAT_EPIC_SPELL_MAGE_ARMOUR = 877;
  public final static int FEAT_EPIC_SPELL_MUMMY_DUST = 874;
  public final static int FEAT_EPIC_SPELL_PENETRATION = 618;
  public final static int FEAT_EPIC_SPELL_RUIN = 878;
  public final static int FEAT_EPIC_SUPERIOR_INITIATIVE = 753;
  public final static int FEAT_EPIC_SUPERIOR_WEAPON_FOCUS = 1071;
  public final static int FEAT_EPIC_TERRIFYING_RAGE = 989;
  public final static int FEAT_EPIC_THUNDERING_RAGE = 988;
  public final static int FEAT_EPIC_TOUGHNESS_1 = 754;
  public final static int FEAT_EPIC_TOUGHNESS_10 = 763;
  public final static int FEAT_EPIC_TOUGHNESS_2 = 755;
  public final static int FEAT_EPIC_TOUGHNESS_3 = 756;
  public final static int FEAT_EPIC_TOUGHNESS_4 = 757;
  public final static int FEAT_EPIC_TOUGHNESS_5 = 758;
  public final static int FEAT_EPIC_TOUGHNESS_6 = 759;
  public final static int FEAT_EPIC_TOUGHNESS_7 = 760;
  public final static int FEAT_EPIC_TOUGHNESS_8 = 761;
  public final static int FEAT_EPIC_TOUGHNESS_9 = 762;
  public final static int FEAT_EPIC_WEAPON_FOCUS_BASTARDSWORD = 652;
  public final static int FEAT_EPIC_WEAPON_FOCUS_BATTLEAXE = 640;
  public final static int FEAT_EPIC_WEAPON_FOCUS_CLUB = 619;
  public final static int FEAT_EPIC_WEAPON_FOCUS_CREATURE = 656;
  public final static int FEAT_EPIC_WEAPON_FOCUS_DAGGER = 620;
  public final static int FEAT_EPIC_WEAPON_FOCUS_DART = 621;
  public final static int FEAT_EPIC_WEAPON_FOCUS_DIREMACE = 653;
  public final static int FEAT_EPIC_WEAPON_FOCUS_DOUBLEAXE = 654;
  public final static int FEAT_EPIC_WEAPON_FOCUS_DWAXE = 956;
  public final static int FEAT_EPIC_WEAPON_FOCUS_GREATAXE = 641;
  public final static int FEAT_EPIC_WEAPON_FOCUS_GREATSWORD = 637;
  public final static int FEAT_EPIC_WEAPON_FOCUS_HALBERD = 642;
  public final static int FEAT_EPIC_WEAPON_FOCUS_HANDAXE = 638;
  public final static int FEAT_EPIC_WEAPON_FOCUS_HEAVYCROSSBOW = 622;
  public final static int FEAT_EPIC_WEAPON_FOCUS_HEAVYFLAIL = 646;
  public final static int FEAT_EPIC_WEAPON_FOCUS_KAMA = 647;
  public final static int FEAT_EPIC_WEAPON_FOCUS_KATANA = 651;
  public final static int FEAT_EPIC_WEAPON_FOCUS_KUKRI = 648;
  public final static int FEAT_EPIC_WEAPON_FOCUS_LIGHTCROSSBOW = 623;
  public final static int FEAT_EPIC_WEAPON_FOCUS_LIGHTFLAIL = 644;
  public final static int FEAT_EPIC_WEAPON_FOCUS_LIGHTHAMMER = 643;
  public final static int FEAT_EPIC_WEAPON_FOCUS_LIGHTMACE = 624;
  public final static int FEAT_EPIC_WEAPON_FOCUS_LONGBOW = 631;
  public final static int FEAT_EPIC_WEAPON_FOCUS_LONGSWORD = 636;
  public final static int FEAT_EPIC_WEAPON_FOCUS_MORNINGSTAR = 625;
  public final static int FEAT_EPIC_WEAPON_FOCUS_QUARTERSTAFF = 626;
  public final static int FEAT_EPIC_WEAPON_FOCUS_RAPIER = 634;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SCIMITAR = 635;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SCYTHE = 650;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SHORTBOW = 632;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SHORTSPEAR = 627;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SHORTSWORD = 633;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SHURIKEN = 649;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SICKLE = 628;
  public final static int FEAT_EPIC_WEAPON_FOCUS_SLING = 629;
  public final static int FEAT_EPIC_WEAPON_FOCUS_THROWINGAXE = 639;
  public final static int FEAT_EPIC_WEAPON_FOCUS_TRIDENT = 1076;
  public final static int FEAT_EPIC_WEAPON_FOCUS_TWOBLADEDSWORD = 655;
  public final static int FEAT_EPIC_WEAPON_FOCUS_UNARMED = 630;
  public final static int FEAT_EPIC_WEAPON_FOCUS_WARHAMMER = 645;
  public final static int FEAT_EPIC_WEAPON_FOCUS_WHIP = 997;
  public final static int FEAT_EPIC_WEAPON_MASTER = 983;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_BASTARDSWORD = 690;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_BATTLEAXE = 678;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_CLUB = 657;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_CREATURE = 694;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_DAGGER = 658;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_DART = 659;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_DIREMACE = 691;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_DOUBLEAXE = 692;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_DWAXE = 957;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_GREATAXE = 679;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_GREATSWORD = 675;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_HALBERD = 680;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_HANDAXE = 676;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_HEAVYCROSSBOW = 660;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_HEAVYFLAIL = 684;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_KAMA = 685;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_KATANA = 689;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_KUKRI = 686;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTCROSSBOW = 661;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTFLAIL = 682;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTHAMMER = 681;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTMACE = 662;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_LONGBOW = 669;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_LONGSWORD = 674;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_MORNINGSTAR = 663;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_QUARTERSTAFF = 664;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_RAPIER = 672;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SCIMITAR = 673;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SCYTHE = 688;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SHORTBOW = 670;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SHORTSPEAR = 665;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SHORTSWORD = 671;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SHURIKEN = 687;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SICKLE = 666;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_SLING = 667;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_THROWINGAXE = 677;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_TRIDENT = 1077;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_TWOBLADEDSWORD = 693;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_UNARMED = 668;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_WARHAMMER = 683;
  public final static int FEAT_EPIC_WEAPON_SPECIALIZATION_WHIP = 998;
  public final static int FEAT_EPIC_WILD_SHAPE_DRAGON = 873;
  public final static int FEAT_EPIC_WILD_SHAPE_UNDEAD = 872;
  public final static int FEAT_EPIC_WILL = 695;
  public final static int FEAT_EPIC_WIZARD = 976;
  public final static int FEAT_EVASION = 206;
  public final static int FEAT_EVIL_DOMAIN_POWER = 315;
  public final static int FEAT_EXPERTISE = 389;
  public final static int FEAT_EXTEND_SPELL = 12;
  public final static int FEAT_EXTRA_MUSIC = 423;
  public final static int FEAT_EXTRA_SMITING = 910;
  public final static int FEAT_EXTRA_STUNNING_ATTACK = 410;
  public final static int FEAT_EXTRA_TURNING = 13;
  public final static int FEAT_EYE_OF_GRUUMSH_BLINDING_SPITTLE = 480;
  public final static int FEAT_EYE_OF_GRUUMSH_BLINDING_SPITTLE_2 = 481;
  public final static int FEAT_EYE_OF_GRUUMSH_COMMAND_THE_HORDE = 482;
  public final static int FEAT_EYE_OF_GRUUMSH_RITUAL_SCARRING = 484;
  public final static int FEAT_EYE_OF_GRUUMSH_SIGHT_OF_GRUUMSH = 487;
  public final static int FEAT_EYE_OF_GRUUMSH_SWING_BLINDLY = 483;
  public final static int FEAT_FAVORED_ENEMY_ABERRATION = 268;
  public final static int FEAT_FAVORED_ENEMY_ANIMAL = 269;
  public final static int FEAT_FAVORED_ENEMY_BEAST = 270;
  public final static int FEAT_FAVORED_ENEMY_CONSTRUCT = 271;
  public final static int FEAT_FAVORED_ENEMY_DRAGON = 272;
  public final static int FEAT_FAVORED_ENEMY_DWARF = 261;
  public final static int FEAT_FAVORED_ENEMY_ELEMENTAL = 277;
  public final static int FEAT_FAVORED_ENEMY_ELF = 262;
  public final static int FEAT_FAVORED_ENEMY_FEY = 278;
  public final static int FEAT_FAVORED_ENEMY_GIANT = 279;
  public final static int FEAT_FAVORED_ENEMY_GNOME = 263;
  public final static int FEAT_FAVORED_ENEMY_GOBLINOID = 273;
  public final static int FEAT_FAVORED_ENEMY_HALFELF = 265;
  public final static int FEAT_FAVORED_ENEMY_HALFLING = 264;
  public final static int FEAT_FAVORED_ENEMY_HALFORC = 266;
  public final static int FEAT_FAVORED_ENEMY_HUMAN = 267;
  public final static int FEAT_FAVORED_ENEMY_MAGICAL_BEAST = 280;
  public final static int FEAT_FAVORED_ENEMY_MONSTROUS = 274;
  public final static int FEAT_FAVORED_ENEMY_ORC = 275;
  public final static int FEAT_FAVORED_ENEMY_OUTSIDER = 281;
  public final static int FEAT_FAVORED_ENEMY_REPTILIAN = 276;
  public final static int FEAT_FAVORED_ENEMY_SHAPECHANGER = 284;
  public final static int FEAT_FAVORED_ENEMY_UNDEAD = 285;
  public final static int FEAT_FAVORED_ENEMY_VERMIN = 286;
  public final static int FEAT_FEARLESS = 249;
  public final static int FEAT_FIRE_DOMAIN_POWER = 316;
  public final static int FEAT_FLURRY_OF_BLOWS = 204;
  public final static int FEAT_GOOD_AIM = 250;
  public final static int FEAT_GOOD_DOMAIN_POWER = 317;
  public final static int FEAT_GREATER_SPELL_FOCUS_ABJURATION = 393;
  public final static int FEAT_GREATER_SPELL_FOCUS_CONJURATION = 394;
  public final static int FEAT_GREATER_SPELL_FOCUS_DIVINATION = 395;
  public final static int FEAT_GREATER_SPELL_FOCUS_DIVINIATION = 395;
  public final static int FEAT_GREATER_SPELL_FOCUS_ENCHANTMENT = 396;
  public final static int FEAT_GREATER_SPELL_FOCUS_EVOCATION = 397;
  public final static int FEAT_GREATER_SPELL_FOCUS_ILLUSION = 398;
  public final static int FEAT_GREATER_SPELL_FOCUS_NECROMANCY = 399;
  public final static int FEAT_GREATER_SPELL_FOCUS_TRANSMUTATION = 400;
  public final static int FEAT_GREATER_SPELL_PENETRATION = 401;
  public final static int FEAT_GREATER_WILDSHAPE_1 = 898;
  public final static int FEAT_GREATER_WILDSHAPE_2 = 900;
  public final static int FEAT_GREATER_WILDSHAPE_3 = 901;
  public final static int FEAT_GREATER_WILDSHAPE_4 = 903;
  public final static int FEAT_GREAT_CLEAVE = 391;
  public final static int FEAT_GREAT_FORTITUDE = 14;
  public final static int FEAT_HARDINESS_VERSUS_ENCHANTMENTS = 236;
  public final static int FEAT_HARDINESS_VERSUS_ILLUSIONS = 241;
  public final static int FEAT_HARDINESS_VERSUS_POISONS = 229;
  public final static int FEAT_HARDINESS_VERSUS_SPELLS = 230;
  public final static int FEAT_HARPER_CATS_GRACE = 442;
  public final static int FEAT_HARPER_EAGLES_SPLENDOR = 443;
  public final static int FEAT_HARPER_INVISIBILITY = 444;
  public final static int FEAT_HARPER_SLEEP = 441;
  public final static int FEAT_HEALING_DOMAIN_POWER = 318;
  public final static int FEAT_HIDE_IN_PLAIN_SIGHT = 433;
  public final static int FEAT_HORSE_ASSIGN_MOUNT = 1094;
  public final static int FEAT_HORSE_DISMOUNT = 1091;
  public final static int FEAT_HORSE_MENU = 1089;
  public final static int FEAT_HORSE_MOUNT = 1090;
  public final static int FEAT_HORSE_PARTY_DISMOUNT = 1093;
  public final static int FEAT_HORSE_PARTY_MOUNT = 1092;
  public final static int FEAT_HUMANOID_SHAPE = 902;
  public final static int FEAT_IMMUNITY_TO_SLEEP = 235;
  public final static int FEAT_IMPROVED_CRITICAL_BASTARD_SWORD = 85;
  public final static int FEAT_IMPROVED_CRITICAL_BATTLE_AXE = 72;
  public final static int FEAT_IMPROVED_CRITICAL_CLUB = 15;
  public final static int FEAT_IMPROVED_CRITICAL_CREATURE = 292;
  public final static int FEAT_IMPROVED_CRITICAL_DAGGER = 52;
  public final static int FEAT_IMPROVED_CRITICAL_DART = 53;
  public final static int FEAT_IMPROVED_CRITICAL_DIRE_MACE = 87;
  public final static int FEAT_IMPROVED_CRITICAL_DOUBLE_AXE = 88;
  public final static int FEAT_IMPROVED_CRITICAL_DWAXE = 954;
  public final static int FEAT_IMPROVED_CRITICAL_GREAT_AXE = 73;
  public final static int FEAT_IMPROVED_CRITICAL_GREAT_SWORD = 69;
  public final static int FEAT_IMPROVED_CRITICAL_HALBERD = 74;
  public final static int FEAT_IMPROVED_CRITICAL_HAND_AXE = 70;
  public final static int FEAT_IMPROVED_CRITICAL_HEAVY_CROSSBOW = 54;
  public final static int FEAT_IMPROVED_CRITICAL_HEAVY_FLAIL = 78;
  public final static int FEAT_IMPROVED_CRITICAL_KAMA = 79;
  public final static int FEAT_IMPROVED_CRITICAL_KATANA = 84;
  public final static int FEAT_IMPROVED_CRITICAL_KUKRI = 80;
  public final static int FEAT_IMPROVED_CRITICAL_LIGHT_CROSSBOW = 55;
  public final static int FEAT_IMPROVED_CRITICAL_LIGHT_FLAIL = 76;
  public final static int FEAT_IMPROVED_CRITICAL_LIGHT_HAMMER = 75;
  public final static int FEAT_IMPROVED_CRITICAL_LIGHT_MACE = 56;
  public final static int FEAT_IMPROVED_CRITICAL_LONGBOW = 63;
  public final static int FEAT_IMPROVED_CRITICAL_LONG_SWORD = 68;
  public final static int FEAT_IMPROVED_CRITICAL_MORNING_STAR = 57;
  public final static int FEAT_IMPROVED_CRITICAL_RAPIER = 66;
  public final static int FEAT_IMPROVED_CRITICAL_SCIMITAR = 67;
  public final static int FEAT_IMPROVED_CRITICAL_SCYTHE = 83;
  public final static int FEAT_IMPROVED_CRITICAL_SHORTBOW = 64;
  public final static int FEAT_IMPROVED_CRITICAL_SHORT_SWORD = 65;
  public final static int FEAT_IMPROVED_CRITICAL_SHURIKEN = 82;
  public final static int FEAT_IMPROVED_CRITICAL_SICKLE = 60;
  public final static int FEAT_IMPROVED_CRITICAL_SLING = 61;
  public final static int FEAT_IMPROVED_CRITICAL_SPEAR = 59;
  public final static int FEAT_IMPROVED_CRITICAL_STAFF = 58;
  public final static int FEAT_IMPROVED_CRITICAL_THROWING_AXE = 71;
  public final static int FEAT_IMPROVED_CRITICAL_TRIDENT = 1074;
  public final static int FEAT_IMPROVED_CRITICAL_TWO_BLADED_SWORD = 89;
  public final static int FEAT_IMPROVED_CRITICAL_UNARMED_STRIKE = 62;
  public final static int FEAT_IMPROVED_CRITICAL_WAR_HAMMER = 77;
  public final static int FEAT_IMPROVED_CRITICAL_WHIP = 995;
  public final static int FEAT_IMPROVED_DISARM = 16;
  public final static int FEAT_IMPROVED_EVASION = 212;
  public final static int FEAT_IMPROVED_EXPERTISE = 390;
  public final static int FEAT_IMPROVED_INITIATIVE = 377;
  public final static int FEAT_IMPROVED_KNOCKDOWN = 17;
  public final static int FEAT_IMPROVED_PARRY = 18;
  public final static int FEAT_IMPROVED_POWER_ATTACK = 19;
  public final static int FEAT_IMPROVED_TWO_WEAPON_FIGHTING = 20;
  public final static int FEAT_IMPROVED_UNARMED_STRIKE = 21;
  public final static int FEAT_IMPROVED_WHIRLWIND = 868;
  public final static int FEAT_INCREASE_MULTIPLIER = 883;
  public final static int FEAT_INFLICT_CRITICAL_WOUNDS = 477;
  public final static int FEAT_INFLICT_LIGHT_WOUNDS = 474;
  public final static int FEAT_INFLICT_MODERATE_WOUNDS = 475;
  public final static int FEAT_INFLICT_SERIOUS_WOUNDS = 476;
  public final static int FEAT_IRON_WILL = 22;
  public final static int FEAT_KEEN_SENSE = 240;
  public final static int FEAT_KI_CRITICAL = 885;
  public final static int FEAT_KI_DAMAGE = 882;
  public final static int FEAT_KI_STRIKE = 213;
  public final static int FEAT_KNOCKDOWN = 23;
  public final static int FEAT_KNOWLEDGE_DOMAIN_POWER = 319;
  public final static int FEAT_LAY_ON_HANDS = 299;
  public final static int FEAT_LIGHTNING_REFLEXES = 24;
  public final static int FEAT_LINGERING_SONG = 424;
  public final static int FEAT_LLIIRAS_HEART = 439;
  public final static int FEAT_LOWLIGHTVISION = 354;
  public final static int FEAT_LUCKY = 248;
  public final static int FEAT_LUCK_DOMAIN_POWER = 309;
  public final static int FEAT_LUCK_OF_HEROES = 382;
  public final static int FEAT_MAGIC_DOMAIN_POWER = 320;
  public final static int FEAT_MAXIMIZE_SPELL = 25;
  public final static int FEAT_MIGHTY_RAGE = 869;
  public final static int FEAT_MOBILITY = 26;
  public final static int FEAT_MONK_AC_BONUS = 260;
  public final static int FEAT_MONK_ENDURANCE = 207;
  public final static int FEAT_MOUNTED_ARCHERY = 1088;
  public final static int FEAT_MOUNTED_COMBAT = 1087;
  public final static int FEAT_NATURE_SENSE = 198;
  public final static int FEAT_OPPORTUNIST = 224;
  public final static int FEAT_PALADIN_SUMMON_MOUNT = 1095;
  public final static int FEAT_PARTIAL_SKILL_AFFINITY_LISTEN = 244;
  public final static int FEAT_PARTIAL_SKILL_AFFINITY_SEARCH = 245;
  public final static int FEAT_PARTIAL_SKILL_AFFINITY_SPOT = 246;
  public final static int FEAT_PDK_FEAR = 1082;
  public final static int FEAT_PDK_INSPIRE_1 = 1085;
  public final static int FEAT_PDK_INSPIRE_2 = 1086;
  public final static int FEAT_PDK_RALLY = 1080;
  public final static int FEAT_PDK_SHIELD = 1081;
  public final static int FEAT_PDK_STAND = 1084;
  public final static int FEAT_PDK_WRATH = 1083;
  public final static int FEAT_PERFECT_SELF = 216;
  public final static int FEAT_PLANT_DOMAIN_POWER = 321;
  public final static int FEAT_PLAYER_TOOL_01 = 1106;
  public final static int FEAT_PLAYER_TOOL_02 = 1107;
  public final static int FEAT_PLAYER_TOOL_03 = 1108;
  public final static int FEAT_PLAYER_TOOL_04 = 1109;
  public final static int FEAT_PLAYER_TOOL_05 = 1110;
  public final static int FEAT_PLAYER_TOOL_06 = 1111;
  public final static int FEAT_PLAYER_TOOL_07 = 1112;
  public final static int FEAT_PLAYER_TOOL_08 = 1113;
  public final static int FEAT_PLAYER_TOOL_09 = 1114;
  public final static int FEAT_PLAYER_TOOL_10 = 1115;
  public final static int FEAT_POINT_BLANK_SHOT = 27;
  public final static int FEAT_POWER_ATTACK = 28;
  public final static int FEAT_PRESTIGE_ARROW_OF_DEATH = 454;
  public final static int FEAT_PRESTIGE_DARKNESS = 469;
  public final static int FEAT_PRESTIGE_DARK_BLESSING = 473;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_1 = 455;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_10 = 1020;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_11 = 1021;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_12 = 1022;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_13 = 1023;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_14 = 1024;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_15 = 1025;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_16 = 1026;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_17 = 1027;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_18 = 1028;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_19 = 1029;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_2 = 456;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_20 = 1030;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_3 = 457;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_4 = 458;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_5 = 459;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_6 = 1004;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_7 = 1005;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_8 = 1006;
  public final static int FEAT_PRESTIGE_DEATH_ATTACK_9 = 1019;
  public final static int FEAT_PRESTIGE_DEFENSIVE_AWARENESS_1 = 949;
  public final static int FEAT_PRESTIGE_DEFENSIVE_AWARENESS_2 = 950;
  public final static int FEAT_PRESTIGE_DEFENSIVE_AWARENESS_3 = 951;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_1 = 445;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_10 = 1049;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_11 = 1050;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_12 = 1051;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_13 = 1052;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_14 = 1053;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_15 = 1054;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_16 = 1055;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_17 = 1056;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_18 = 1057;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_19 = 1058;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_2 = 446;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_20 = 1059;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_3 = 447;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_4 = 448;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_5 = 449;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_6 = 1045;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_7 = 1046;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_8 = 1047;
  public final static int FEAT_PRESTIGE_ENCHANT_ARROW_9 = 1048;
  public final static int FEAT_PRESTIGE_HAIL_OF_ARROWS = 453;
  public final static int FEAT_PRESTIGE_IMBUE_ARROW = 450;
  public final static int FEAT_PRESTIGE_INVISIBILITY_1 = 470;
  public final static int FEAT_PRESTIGE_INVISIBILITY_2 = 471;
  public final static int FEAT_PRESTIGE_POISON_SAVE_1 = 463;
  public final static int FEAT_PRESTIGE_POISON_SAVE_2 = 464;
  public final static int FEAT_PRESTIGE_POISON_SAVE_3 = 465;
  public final static int FEAT_PRESTIGE_POISON_SAVE_4 = 466;
  public final static int FEAT_PRESTIGE_POISON_SAVE_5 = 467;
  public final static int FEAT_PRESTIGE_POISON_SAVE_EPIC = 1070;
  public final static int FEAT_PRESTIGE_SEEKER_ARROW_1 = 451;
  public final static int FEAT_PRESTIGE_SEEKER_ARROW_2 = 452;
  public final static int FEAT_PRESTIGE_SPELL_GHOSTLY_VISAGE = 468;
  public final static int FEAT_PROTECTION_DOMAIN_POWER = 308;
  public final static int FEAT_PURITY_OF_BODY = 209;
  public final static int FEAT_QUICKEN_SPELL = 29;
  public final static int FEAT_QUICK_TO_MASTER = 258;
  public final static int FEAT_QUIVERING_PALM = 296;
  public final static int FEAT_RAPID_RELOAD = 411;
  public final static int FEAT_RAPID_SHOT = 30;
  public final static int FEAT_REMOVE_DISEASE = 302;
  public final static int FEAT_RESIST_DISEASE = 426;
  public final static int FEAT_RESIST_ENERGY_ACID = 428;
  public final static int FEAT_RESIST_ENERGY_COLD = 427;
  public final static int FEAT_RESIST_ENERGY_ELECTRICAL = 430;
  public final static int FEAT_RESIST_ENERGY_FIRE = 429;
  public final static int FEAT_RESIST_ENERGY_SONIC = 431;
  public final static int FEAT_RESIST_NATURES_LURE = 202;
  public final static int FEAT_RESIST_POISON = 383;
  public final static int FEAT_SACRED_DEFENSE_1 = 904;
  public final static int FEAT_SACRED_DEFENSE_2 = 905;
  public final static int FEAT_SACRED_DEFENSE_3 = 906;
  public final static int FEAT_SACRED_DEFENSE_4 = 907;
  public final static int FEAT_SACRED_DEFENSE_5 = 908;
  public final static int FEAT_SAP = 31;
  public final static int FEAT_SCRIBE_SCROLL = 945;
  public final static int FEAT_SHADOW_DAZE = 434;
  public final static int FEAT_SHADOW_EVADE = 436;
  public final static int FEAT_SHIELD_PROFICIENCY = 32;
  public final static int FEAT_SHOU_DISCIPLE_DODGE_2 = 489;
  public final static int FEAT_SHOU_DISCIPLE_DODGE_3 = 1031;
  public final static int FEAT_SHOU_DISCIPLE_MARTIAL_FLURRY_ANY = 899;
  public final static int FEAT_SHOU_DISCIPLE_MARTIAL_FLURRY_LIGHT = 866;
  public final static int FEAT_SILENCE_SPELL = 33;
  public final static int FEAT_SILVER_PALM = 384;
  public final static int FEAT_SKILLFOCUS_APPRAISE = 404;
  public final static int FEAT_SKILL_AFFINITY_CONCENTRATION = 243;
  public final static int FEAT_SKILL_AFFINITY_LISTEN = 237;
  public final static int FEAT_SKILL_AFFINITY_LORE = 234;
  public final static int FEAT_SKILL_AFFINITY_MOVE_SILENTLY = 247;
  public final static int FEAT_SKILL_AFFINITY_SEARCH = 238;
  public final static int FEAT_SKILL_AFFINITY_SPOT = 239;
  public final static int FEAT_SKILL_FOCUS_ANIMAL_EMPATHY = 34;
  public final static int FEAT_SKILL_FOCUS_BLUFF = 915;
  public final static int FEAT_SKILL_FOCUS_CONCENTRATION = 173;
  public final static int FEAT_SKILL_FOCUS_CRAFT_ARMOR = 911;
  public final static int FEAT_SKILL_FOCUS_CRAFT_TRAP = 407;
  public final static int FEAT_SKILL_FOCUS_CRAFT_WEAPON = 912;
  public final static int FEAT_SKILL_FOCUS_DISABLE_TRAP = 174;
  public final static int FEAT_SKILL_FOCUS_DISCIPLINE = 175;
  public final static int FEAT_SKILL_FOCUS_HEAL = 177;
  public final static int FEAT_SKILL_FOCUS_HIDE = 178;
  public final static int FEAT_SKILL_FOCUS_INTIMIDATE = 916;
  public final static int FEAT_SKILL_FOCUS_LISTEN = 179;
  public final static int FEAT_SKILL_FOCUS_LORE = 180;
  public final static int FEAT_SKILL_FOCUS_MOVE_SILENTLY = 181;
  public final static int FEAT_SKILL_FOCUS_OPEN_LOCK = 182;
  public final static int FEAT_SKILL_FOCUS_PARRY = 183;
  public final static int FEAT_SKILL_FOCUS_PERFORM = 184;
  public final static int FEAT_SKILL_FOCUS_PERSUADE = 185;
  public final static int FEAT_SKILL_FOCUS_PICK_POCKET = 186;
  public final static int FEAT_SKILL_FOCUS_SEARCH = 187;
  public final static int FEAT_SKILL_FOCUS_SET_TRAP = 188;
  public final static int FEAT_SKILL_FOCUS_SPELLCRAFT = 189;
  public final static int FEAT_SKILL_FOCUS_SPOT = 190;
  public final static int FEAT_SKILL_FOCUS_TAUNT = 192;
  public final static int FEAT_SKILL_FOCUS_TUMBLE = 406;
  public final static int FEAT_SKILL_FOCUS_USE_MAGIC_DEVICE = 193;
  public final static int FEAT_SKILL_MASTERY = 225;
  public final static int FEAT_SLIPPERY_MIND = 259;
  public final static int FEAT_SMITE_EVIL = 301;
  public final static int FEAT_SMITE_GOOD = 472;
  public final static int FEAT_SNAKEBLOOD = 386;
  public final static int FEAT_SNEAK_ATTACK = 221;
  public final static int FEAT_SPELL_FOCUS_ABJURATION = 35;
  public final static int FEAT_SPELL_FOCUS_CONJURATION = 166;
  public final static int FEAT_SPELL_FOCUS_DIVINATION = 167;
  public final static int FEAT_SPELL_FOCUS_ENCHANTMENT = 168;
  public final static int FEAT_SPELL_FOCUS_EVOCATION = 169;
  public final static int FEAT_SPELL_FOCUS_ILLUSION = 170;
  public final static int FEAT_SPELL_FOCUS_NECROMANCY = 171;
  public final static int FEAT_SPELL_FOCUS_TRANSMUTATION = 172;
  public final static int FEAT_SPELL_PENETRATION = 36;
  public final static int FEAT_SPRING_ATTACK = 392;
  public final static int FEAT_STEALTHY = 387;
  public final static int FEAT_STILL_MIND = 208;
  public final static int FEAT_STILL_SPELL = 37;
  public final static int FEAT_STONECUNNING = 227;
  public final static int FEAT_STRENGTH_DOMAIN_POWER = 307;
  public final static int FEAT_STRONGSOUL = 388;
  public final static int FEAT_STUNNING_FIST = 39;
  public final static int FEAT_SUMMON_FAMILIAR = 303;
  public final static int FEAT_SUMMON_GREATER_UNDEAD = 895;
  public final static int FEAT_SUMMON_SHADOW = 435;
  public final static int FEAT_SUMMON_UNDEAD = 890;
  public final static int FEAT_SUN_DOMAIN_POWER = 322;
  public final static int FEAT_SUPERIOR_WEAPON_FOCUS = 884;
  public final static int FEAT_THUG = 402;
  public final static int FEAT_TOUGHNESS = 40;
  public final static int FEAT_TOUGH_AS_BONE = 894;
  public final static int FEAT_TRACKLESS_STEP = 201;
  public final static int FEAT_TRAVEL_DOMAIN_POWER = 323;
  public final static int FEAT_TRICKERY_DOMAIN_POWER = 324;
  public final static int FEAT_TURN_UNDEAD = 294;
  public final static int FEAT_TWO_WEAPON_FIGHTING = 41;
  public final static int FEAT_TYMORAS_SMILE = 438;
  public final static int FEAT_UNCANNY_DODGE_1 = 195;
  public final static int FEAT_UNCANNY_DODGE_2 = 251;
  public final static int FEAT_UNCANNY_DODGE_3 = 252;
  public final static int FEAT_UNCANNY_DODGE_4 = 253;
  public final static int FEAT_UNCANNY_DODGE_5 = 254;
  public final static int FEAT_UNCANNY_DODGE_6 = 255;
  public final static int FEAT_UNCANNY_REFLEX = 226;
  public final static int FEAT_UNDEAD_GRAFT_1 = 892;
  public final static int FEAT_UNDEAD_GRAFT_2 = 893;
  public final static int FEAT_USE_POISON = 960;
  public final static int FEAT_VENOM_IMMUNITY = 203;
  public final static int FEAT_WAR_DOMAIN_POWER = 306;
  public final static int FEAT_WATER_DOMAIN_POWER = 325;
  public final static int FEAT_WEAPON_FINESSE = 42;
  public final static int FEAT_WEAPON_FOCUS_BASTARD_SWORD = 123;
  public final static int FEAT_WEAPON_FOCUS_BATTLE_AXE = 110;
  public final static int FEAT_WEAPON_FOCUS_CLUB = 43;
  public final static int FEAT_WEAPON_FOCUS_CREATURE = 291;
  public final static int FEAT_WEAPON_FOCUS_DAGGER = 90;
  public final static int FEAT_WEAPON_FOCUS_DART = 91;
  public final static int FEAT_WEAPON_FOCUS_DIRE_MACE = 125;
  public final static int FEAT_WEAPON_FOCUS_DOUBLE_AXE = 126;
  public final static int FEAT_WEAPON_FOCUS_DWAXE = 952;
  public final static int FEAT_WEAPON_FOCUS_GREAT_AXE = 111;
  public final static int FEAT_WEAPON_FOCUS_GREAT_SWORD = 107;
  public final static int FEAT_WEAPON_FOCUS_HALBERD = 112;
  public final static int FEAT_WEAPON_FOCUS_HAND_AXE = 108;
  public final static int FEAT_WEAPON_FOCUS_HEAVY_CROSSBOW = 92;
  public final static int FEAT_WEAPON_FOCUS_HEAVY_FLAIL = 116;
  public final static int FEAT_WEAPON_FOCUS_KAMA = 117;
  public final static int FEAT_WEAPON_FOCUS_KATANA = 122;
  public final static int FEAT_WEAPON_FOCUS_KUKRI = 118;
  public final static int FEAT_WEAPON_FOCUS_LIGHT_CROSSBOW = 93;
  public final static int FEAT_WEAPON_FOCUS_LIGHT_FLAIL = 114;
  public final static int FEAT_WEAPON_FOCUS_LIGHT_HAMMER = 113;
  public final static int FEAT_WEAPON_FOCUS_LIGHT_MACE = 94;
  public final static int FEAT_WEAPON_FOCUS_LONGBOW = 101;
  public final static int FEAT_WEAPON_FOCUS_LONG_SWORD = 106;
  public final static int FEAT_WEAPON_FOCUS_MORNING_STAR = 95;
  public final static int FEAT_WEAPON_FOCUS_RAPIER = 104;
  public final static int FEAT_WEAPON_FOCUS_SCIMITAR = 105;
  public final static int FEAT_WEAPON_FOCUS_SCYTHE = 121;
  public final static int FEAT_WEAPON_FOCUS_SHORTBOW = 102;
  public final static int FEAT_WEAPON_FOCUS_SHORT_SWORD = 103;
  public final static int FEAT_WEAPON_FOCUS_SHURIKEN = 120;
  public final static int FEAT_WEAPON_FOCUS_SICKLE = 98;
  public final static int FEAT_WEAPON_FOCUS_SLING = 99;
  public final static int FEAT_WEAPON_FOCUS_SPEAR = 97;
  public final static int FEAT_WEAPON_FOCUS_STAFF = 96;
  public final static int FEAT_WEAPON_FOCUS_THROWING_AXE = 109;
  public final static int FEAT_WEAPON_FOCUS_TRIDENT = 1072;
  public final static int FEAT_WEAPON_FOCUS_TWO_BLADED_SWORD = 127;
  public final static int FEAT_WEAPON_FOCUS_UNARMED_STRIKE = 100;
  public final static int FEAT_WEAPON_FOCUS_WAR_HAMMER = 115;
  public final static int FEAT_WEAPON_FOCUS_WHIP = 993;
  public final static int FEAT_WEAPON_OF_CHOICE_BASTARDSWORD = 940;
  public final static int FEAT_WEAPON_OF_CHOICE_BATTLEAXE = 931;
  public final static int FEAT_WEAPON_OF_CHOICE_CLUB = 919;
  public final static int FEAT_WEAPON_OF_CHOICE_DAGGER = 920;
  public final static int FEAT_WEAPON_OF_CHOICE_DIREMACE = 941;
  public final static int FEAT_WEAPON_OF_CHOICE_DOUBLEAXE = 942;
  public final static int FEAT_WEAPON_OF_CHOICE_DWAXE = 959;
  public final static int FEAT_WEAPON_OF_CHOICE_GREATAXE = 932;
  public final static int FEAT_WEAPON_OF_CHOICE_GREATSWORD = 929;
  public final static int FEAT_WEAPON_OF_CHOICE_HALBERD = 933;
  public final static int FEAT_WEAPON_OF_CHOICE_HANDAXE = 930;
  public final static int FEAT_WEAPON_OF_CHOICE_HEAVYFLAIL = 937;
  public final static int FEAT_WEAPON_OF_CHOICE_KAMA = 880;
  public final static int FEAT_WEAPON_OF_CHOICE_KATANA = 939;
  public final static int FEAT_WEAPON_OF_CHOICE_KUKRI = 881;
  public final static int FEAT_WEAPON_OF_CHOICE_LIGHTFLAIL = 935;
  public final static int FEAT_WEAPON_OF_CHOICE_LIGHTHAMMER = 934;
  public final static int FEAT_WEAPON_OF_CHOICE_LIGHTMACE = 921;
  public final static int FEAT_WEAPON_OF_CHOICE_LONGSWORD = 928;
  public final static int FEAT_WEAPON_OF_CHOICE_MORNINGSTAR = 922;
  public final static int FEAT_WEAPON_OF_CHOICE_QUARTERSTAFF = 923;
  public final static int FEAT_WEAPON_OF_CHOICE_RAPIER = 926;
  public final static int FEAT_WEAPON_OF_CHOICE_SCIMITAR = 927;
  public final static int FEAT_WEAPON_OF_CHOICE_SCYTHE = 938;
  public final static int FEAT_WEAPON_OF_CHOICE_SHORTSPEAR = 924;
  public final static int FEAT_WEAPON_OF_CHOICE_SHORTSWORD = 925;
  public final static int FEAT_WEAPON_OF_CHOICE_SICKLE = 879;
  public final static int FEAT_WEAPON_OF_CHOICE_TRIDENT = 1079;
  public final static int FEAT_WEAPON_OF_CHOICE_TWOBLADEDSWORD = 943;
  public final static int FEAT_WEAPON_OF_CHOICE_WARHAMMER = 936;
  public final static int FEAT_WEAPON_OF_CHOICE_WHIP = 1000;
  public final static int FEAT_WEAPON_PROFICIENCY_CREATURE = 289;
  public final static int FEAT_WEAPON_PROFICIENCY_DRUID = 48;
  public final static int FEAT_WEAPON_PROFICIENCY_ELF = 256;
  public final static int FEAT_WEAPON_PROFICIENCY_EXOTIC = 44;
  public final static int FEAT_WEAPON_PROFICIENCY_MARTIAL = 45;
  public final static int FEAT_WEAPON_PROFICIENCY_MONK = 49;
  public final static int FEAT_WEAPON_PROFICIENCY_ROGUE = 50;
  public final static int FEAT_WEAPON_PROFICIENCY_SIMPLE = 46;
  public final static int FEAT_WEAPON_PROFICIENCY_WIZARD = 51;
  public final static int FEAT_WEAPON_SPECIALIZATION_BASTARD_SWORD = 161;
  public final static int FEAT_WEAPON_SPECIALIZATION_BATTLE_AXE = 148;
  public final static int FEAT_WEAPON_SPECIALIZATION_CLUB = 47;
  public final static int FEAT_WEAPON_SPECIALIZATION_CREATURE = 290;
  public final static int FEAT_WEAPON_SPECIALIZATION_DAGGER = 128;
  public final static int FEAT_WEAPON_SPECIALIZATION_DART = 129;
  public final static int FEAT_WEAPON_SPECIALIZATION_DIRE_MACE = 163;
  public final static int FEAT_WEAPON_SPECIALIZATION_DOUBLE_AXE = 164;
  public final static int FEAT_WEAPON_SPECIALIZATION_DWAXE = 953;
  public final static int FEAT_WEAPON_SPECIALIZATION_GREAT_AXE = 149;
  public final static int FEAT_WEAPON_SPECIALIZATION_GREAT_SWORD = 145;
  public final static int FEAT_WEAPON_SPECIALIZATION_HALBERD = 150;
  public final static int FEAT_WEAPON_SPECIALIZATION_HAND_AXE = 146;
  public final static int FEAT_WEAPON_SPECIALIZATION_HEAVY_CROSSBOW = 130;
  public final static int FEAT_WEAPON_SPECIALIZATION_HEAVY_FLAIL = 154;
  public final static int FEAT_WEAPON_SPECIALIZATION_KAMA = 155;
  public final static int FEAT_WEAPON_SPECIALIZATION_KATANA = 160;
  public final static int FEAT_WEAPON_SPECIALIZATION_KUKRI = 156;
  public final static int FEAT_WEAPON_SPECIALIZATION_LIGHT_CROSSBOW = 131;
  public final static int FEAT_WEAPON_SPECIALIZATION_LIGHT_FLAIL = 152;
  public final static int FEAT_WEAPON_SPECIALIZATION_LIGHT_HAMMER = 151;
  public final static int FEAT_WEAPON_SPECIALIZATION_LIGHT_MACE = 132;
  public final static int FEAT_WEAPON_SPECIALIZATION_LONGBOW = 139;
  public final static int FEAT_WEAPON_SPECIALIZATION_LONG_SWORD = 144;
  public final static int FEAT_WEAPON_SPECIALIZATION_MORNING_STAR = 133;
  public final static int FEAT_WEAPON_SPECIALIZATION_RAPIER = 142;
  public final static int FEAT_WEAPON_SPECIALIZATION_SCIMITAR = 143;
  public final static int FEAT_WEAPON_SPECIALIZATION_SCYTHE = 159;
  public final static int FEAT_WEAPON_SPECIALIZATION_SHORTBOW = 140;
  public final static int FEAT_WEAPON_SPECIALIZATION_SHORT_SWORD = 141;
  public final static int FEAT_WEAPON_SPECIALIZATION_SHURIKEN = 158;
  public final static int FEAT_WEAPON_SPECIALIZATION_SICKLE = 136;
  public final static int FEAT_WEAPON_SPECIALIZATION_SLING = 137;
  public final static int FEAT_WEAPON_SPECIALIZATION_SPEAR = 135;
  public final static int FEAT_WEAPON_SPECIALIZATION_STAFF = 134;
  public final static int FEAT_WEAPON_SPECIALIZATION_THROWING_AXE = 147;
  public final static int FEAT_WEAPON_SPECIALIZATION_TRIDENT = 1073;
  public final static int FEAT_WEAPON_SPECIALIZATION_TWO_BLADED_SWORD = 165;
  public final static int FEAT_WEAPON_SPECIALIZATION_UNARMED_STRIKE = 138;
  public final static int FEAT_WEAPON_SPECIALIZATION_WAR_HAMMER = 153;
  public final static int FEAT_WEAPON_SPECIALIZATION_WHIP = 994;
  public final static int FEAT_WHIRLWIND_ATTACK = 867;
  public final static int FEAT_WHOLENESS_OF_BODY = 211;
  public final static int FEAT_WILD_SHAPE = 305;
  public final static int FEAT_WOODLAND_STRIDE = 200;
  public final static int FEAT_ZEN_ARCHERY = 412;
  public final static int FOG_COLOR_BLACK = 0;
  public final static int FOG_COLOR_BLUE = 255;
  public final static int FOG_COLOR_BLUE_DARK = 102;
  public final static int FOG_COLOR_BROWN = 10053120;
  public final static int FOG_COLOR_BROWN_DARK = 6697728;
  public final static int FOG_COLOR_CYAN = 65535;
  public final static int FOG_COLOR_GREEN = 65280;
  public final static int FOG_COLOR_GREEN_DARK = 23112;
  public final static int FOG_COLOR_GREY = 10066329;
  public final static int FOG_COLOR_MAGENTA = 16711935;
  public final static int FOG_COLOR_ORANGE = 16750848;
  public final static int FOG_COLOR_ORANGE_DARK = 13395456;
  public final static int FOG_COLOR_RED = 16711680;
  public final static int FOG_COLOR_RED_DARK = 6684672;
  public final static int FOG_COLOR_WHITE = 16777215;
  public final static int FOG_COLOR_YELLOW = 16776960;
  public final static int FOG_COLOR_YELLOW_DARK = 11184640;
  public final static int FOG_TYPE_ALL = 0;
  public final static int FOG_TYPE_MOON = 2;
  public final static int FOG_TYPE_SUN = 1;
  public final static int FOOTSTEP_TYPE_BEETLE = 6;
  public final static int FOOTSTEP_TYPE_DEFAULT = 65535;
  public final static int FOOTSTEP_TYPE_DRAGON = 2;
  public final static int FOOTSTEP_TYPE_FEATHER_WING = 10;
  public final static int FOOTSTEP_TYPE_HOOF = 4;
  public final static int FOOTSTEP_TYPE_HOOF_LARGE = 5;
  public final static int FOOTSTEP_TYPE_HORSE = 17;
  public final static int FOOTSTEP_TYPE_INVALID = -1;
  public final static int FOOTSTEP_TYPE_LARGE = 1;
  public final static int FOOTSTEP_TYPE_LEATHER_WING = 9;
  public final static int FOOTSTEP_TYPE_NONE = 12;
  public final static int FOOTSTEP_TYPE_NORMAL = 0;
  public final static int FOOTSTEP_TYPE_SEAGULL = 13;
  public final static int FOOTSTEP_TYPE_SHARK = 14;
  public final static int FOOTSTEP_TYPE_SKELETON = 8;
  public final static int FOOTSTEP_TYPE_SOFT = 3;
  public final static int FOOTSTEP_TYPE_SPIDER = 7;
  public final static int FOOTSTEP_TYPE_WATER_LARGE = 16;
  public final static int FOOTSTEP_TYPE_WATER_NORMAL = 15;
  public final static int GAME_DIFFICULTY_CORE_RULES = 3;
  public final static int GAME_DIFFICULTY_DIFFICULT = 4;
  public final static int GAME_DIFFICULTY_EASY = 1;
  public final static int GAME_DIFFICULTY_NORMAL = 2;
  public final static int GAME_DIFFICULTY_VERY_EASY = 0;
  public final static int GENDER_BOTH = 2;
  public final static int GENDER_FEMALE = 1;
  public final static int GENDER_MALE = 0;
  public final static int GENDER_NONE = 4;
  public final static int GENDER_OTHER = 3;
  public final static int GUI_PANEL_PLAYER_DEATH = 0;
  public final static int IMMUNITY_TYPE_ABILITY_DECREASE = 19;
  public final static int IMMUNITY_TYPE_AC_DECREASE = 23;
  public final static int IMMUNITY_TYPE_ATTACK_DECREASE = 20;
  public final static int IMMUNITY_TYPE_BLINDNESS = 7;
  public final static int IMMUNITY_TYPE_CHARM = 14;
  public final static int IMMUNITY_TYPE_CONFUSED = 16;
  public final static int IMMUNITY_TYPE_CRITICAL_HIT = 31;
  public final static int IMMUNITY_TYPE_CURSED = 17;
  public final static int IMMUNITY_TYPE_DAMAGE_DECREASE = 21;
  public final static int IMMUNITY_TYPE_DAMAGE_IMMUNITY_DECREASE = 22;
  public final static int IMMUNITY_TYPE_DAZED = 18;
  public final static int IMMUNITY_TYPE_DEAFNESS = 8;
  public final static int IMMUNITY_TYPE_DEATH = 32;
  public final static int IMMUNITY_TYPE_DISEASE = 3;
  public final static int IMMUNITY_TYPE_DOMINATE = 15;
  public final static int IMMUNITY_TYPE_ENTANGLE = 10;
  public final static int IMMUNITY_TYPE_FEAR = 4;
  public final static int IMMUNITY_TYPE_KNOCKDOWN = 28;
  public final static int IMMUNITY_TYPE_MIND_SPELLS = 1;
  public final static int IMMUNITY_TYPE_MOVEMENT_SPEED_DECREASE = 24;
  public final static int IMMUNITY_TYPE_NEGATIVE_LEVEL = 29;
  public final static int IMMUNITY_TYPE_NONE = 0;
  public final static int IMMUNITY_TYPE_PARALYSIS = 6;
  public final static int IMMUNITY_TYPE_POISON = 2;
  public final static int IMMUNITY_TYPE_SAVING_THROW_DECREASE = 25;
  public final static int IMMUNITY_TYPE_SILENCE = 11;
  public final static int IMMUNITY_TYPE_SKILL_DECREASE = 27;
  public final static int IMMUNITY_TYPE_SLEEP = 13;
  public final static int IMMUNITY_TYPE_SLOW = 9;
  public final static int IMMUNITY_TYPE_SNEAK_ATTACK = 30;
  public final static int IMMUNITY_TYPE_SPELL_RESISTANCE_DECREASE = 26;
  public final static int IMMUNITY_TYPE_STUN = 12;
  public final static int IMMUNITY_TYPE_TRAP = 5;
  public final static int INVENTORY_DISTURB_TYPE_ADDED = 0;
  public final static int INVENTORY_DISTURB_TYPE_REMOVED = 1;
  public final static int INVENTORY_DISTURB_TYPE_STOLEN = 2;
  public final static int INVENTORY_SLOT_ARMS = 3;
  public final static int INVENTORY_SLOT_ARROWS = 11;
  public final static int INVENTORY_SLOT_BELT = 10;
  public final static int INVENTORY_SLOT_BOLTS = 13;
  public final static int INVENTORY_SLOT_BOOTS = 2;
  public final static int INVENTORY_SLOT_BULLETS = 12;
  public final static int INVENTORY_SLOT_CARMOUR = 17;
  public final static int INVENTORY_SLOT_CHEST = 1;
  public final static int INVENTORY_SLOT_CLOAK = 6;
  public final static int INVENTORY_SLOT_CWEAPON_B = 16;
  public final static int INVENTORY_SLOT_CWEAPON_L = 14;
  public final static int INVENTORY_SLOT_CWEAPON_R = 15;
  public final static int INVENTORY_SLOT_HEAD = 0;
  public final static int INVENTORY_SLOT_LEFTHAND = 5;
  public final static int INVENTORY_SLOT_LEFTRING = 7;
  public final static int INVENTORY_SLOT_NECK = 9;
  public final static int INVENTORY_SLOT_RIGHTHAND = 4;
  public final static int INVENTORY_SLOT_RIGHTRING = 8;
  public final static int INVISIBILITY_TYPE_DARKNESS = 2;
  public final static int INVISIBILITY_TYPE_IMPROVED = 4;
  public final static int INVISIBILITY_TYPE_NORMAL = 1;
  public final static int IP_CONST_ABILITY_CHA = 5;
  public final static int IP_CONST_ABILITY_CON = 2;
  public final static int IP_CONST_ABILITY_DEX = 1;
  public final static int IP_CONST_ABILITY_INT = 3;
  public final static int IP_CONST_ABILITY_STR = 0;
  public final static int IP_CONST_ABILITY_WIS = 4;
  public final static int IP_CONST_ACMODIFIERTYPE_ARMOR = 2;
  public final static int IP_CONST_ACMODIFIERTYPE_DEFLECTION = 4;
  public final static int IP_CONST_ACMODIFIERTYPE_DODGE = 0;
  public final static int IP_CONST_ACMODIFIERTYPE_NATURAL = 1;
  public final static int IP_CONST_ACMODIFIERTYPE_SHIELD = 3;
  public final static int IP_CONST_ADDITIONAL_CURSED = 1;
  public final static int IP_CONST_ADDITIONAL_UNKNOWN = 0;
  public final static int IP_CONST_ALIGNMENTGROUP_ALL = 0;
  public final static int IP_CONST_ALIGNMENTGROUP_CHAOTIC = 3;
  public final static int IP_CONST_ALIGNMENTGROUP_EVIL = 5;
  public final static int IP_CONST_ALIGNMENTGROUP_GOOD = 4;
  public final static int IP_CONST_ALIGNMENTGROUP_LAWFUL = 2;
  public final static int IP_CONST_ALIGNMENTGROUP_NEUTRAL = 1;
  public final static int IP_CONST_ALIGNMENT_CE = 8;
  public final static int IP_CONST_ALIGNMENT_CG = 6;
  public final static int IP_CONST_ALIGNMENT_CN = 7;
  public final static int IP_CONST_ALIGNMENT_LE = 2;
  public final static int IP_CONST_ALIGNMENT_LG = 0;
  public final static int IP_CONST_ALIGNMENT_LN = 1;
  public final static int IP_CONST_ALIGNMENT_NE = 5;
  public final static int IP_CONST_ALIGNMENT_NG = 3;
  public final static int IP_CONST_ALIGNMENT_TN = 4;
  public final static int IP_CONST_AMMOTYPE_ARROW = 0;
  public final static int IP_CONST_AMMOTYPE_BOLT = 1;
  public final static int IP_CONST_AMMOTYPE_BULLET = 2;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_10_PERCENT = 8;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_15_PERCENT = 7;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_20_PERCENT = 6;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_25_PERCENT = 5;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_30_PERCENT = 4;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_35_PERCENT = 3;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_40_PERCENT = 2;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_45_PERCENT = 1;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_50_PERCENT = 0;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_MINUS_5_PERCENT = 9;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_10_PERCENT = 11;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_15_PERCENT = 12;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_20_PERCENT = 13;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_25_PERCENT = 14;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_30_PERCENT = 15;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_35_PERCENT = 16;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_40_PERCENT = 17;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_45_PERCENT = 18;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_50_PERCENT = 19;
  public final static int IP_CONST_ARCANE_SPELL_FAILURE_PLUS_5_PERCENT = 10;
  public final static int IP_CONST_CASTSPELL_ACID_FOG_11 = 0;
  public final static int IP_CONST_CASTSPELL_ACID_SPLASH_1 = 355;
  public final static int IP_CONST_CASTSPELL_ACTIVATE_ITEM = 359;
  public final static int IP_CONST_CASTSPELL_AID_3 = 1;
  public final static int IP_CONST_CASTSPELL_AMPLIFY_5 = 373;
  public final static int IP_CONST_CASTSPELL_ANIMATE_DEAD_10 = 3;
  public final static int IP_CONST_CASTSPELL_ANIMATE_DEAD_15 = 4;
  public final static int IP_CONST_CASTSPELL_ANIMATE_DEAD_5 = 2;
  public final static int IP_CONST_CASTSPELL_AURAOFGLORY_7 = 360;
  public final static int IP_CONST_CASTSPELL_AURA_OF_VITALITY_13 = 321;
  public final static int IP_CONST_CASTSPELL_AURA_VERSUS_ALIGNMENT_15 = 287;
  public final static int IP_CONST_CASTSPELL_AWAKEN_9 = 303;
  public final static int IP_CONST_CASTSPELL_BALAGARNSIRONHORN_7 = 367;
  public final static int IP_CONST_CASTSPELL_BANE_5 = 380;
  public final static int IP_CONST_CASTSPELL_BANISHMENT_15 = 361;
  public final static int IP_CONST_CASTSPELL_BARKSKIN_12 = 7;
  public final static int IP_CONST_CASTSPELL_BARKSKIN_3 = 5;
  public final static int IP_CONST_CASTSPELL_BARKSKIN_6 = 6;
  public final static int IP_CONST_CASTSPELL_BESTOW_CURSE_5 = 8;
  public final static int IP_CONST_CASTSPELL_BIGBYS_CLENCHED_FIST_20 = 393;
  public final static int IP_CONST_CASTSPELL_BIGBYS_CRUSHING_HAND_20 = 394;
  public final static int IP_CONST_CASTSPELL_BIGBYS_FORCEFUL_HAND_15 = 391;
  public final static int IP_CONST_CASTSPELL_BIGBYS_GRASPING_HAND_17 = 392;
  public final static int IP_CONST_CASTSPELL_BIGBYS_INTERPOSING_HAND_15 = 390;
  public final static int IP_CONST_CASTSPELL_BLADE_BARRIER_11 = 9;
  public final static int IP_CONST_CASTSPELL_BLADE_BARRIER_15 = 10;
  public final static int IP_CONST_CASTSPELL_BLESS_2 = 11;
  public final static int IP_CONST_CASTSPELL_BLINDNESS_DEAFNESS_3 = 14;
  public final static int IP_CONST_CASTSPELL_BLOOD_FRENZY_7 = 353;
  public final static int IP_CONST_CASTSPELL_BOMBARDMENT_20 = 354;
  public final static int IP_CONST_CASTSPELL_BULLS_STRENGTH_10 = 16;
  public final static int IP_CONST_CASTSPELL_BULLS_STRENGTH_15 = 17;
  public final static int IP_CONST_CASTSPELL_BULLS_STRENGTH_3 = 15;
  public final static int IP_CONST_CASTSPELL_BURNING_HANDS_2 = 18;
  public final static int IP_CONST_CASTSPELL_BURNING_HANDS_5 = 19;
  public final static int IP_CONST_CASTSPELL_CALL_LIGHTNING_10 = 21;
  public final static int IP_CONST_CASTSPELL_CALL_LIGHTNING_5 = 20;
  public final static int IP_CONST_CASTSPELL_CAMOFLAGE_5 = 352;
  public final static int IP_CONST_CASTSPELL_CATS_GRACE_10 = 26;
  public final static int IP_CONST_CASTSPELL_CATS_GRACE_15 = 27;
  public final static int IP_CONST_CASTSPELL_CATS_GRACE_3 = 25;
  public final static int IP_CONST_CASTSPELL_CHAIN_LIGHTNING_11 = 28;
  public final static int IP_CONST_CASTSPELL_CHAIN_LIGHTNING_15 = 29;
  public final static int IP_CONST_CASTSPELL_CHAIN_LIGHTNING_20 = 30;
  public final static int IP_CONST_CASTSPELL_CHARM_MONSTER_10 = 32;
  public final static int IP_CONST_CASTSPELL_CHARM_MONSTER_5 = 31;
  public final static int IP_CONST_CASTSPELL_CHARM_PERSON_10 = 34;
  public final static int IP_CONST_CASTSPELL_CHARM_PERSON_2 = 33;
  public final static int IP_CONST_CASTSPELL_CHARM_PERSON_OR_ANIMAL_10 = 36;
  public final static int IP_CONST_CASTSPELL_CHARM_PERSON_OR_ANIMAL_3 = 35;
  public final static int IP_CONST_CASTSPELL_CIRCLE_OF_DEATH_11 = 37;
  public final static int IP_CONST_CASTSPELL_CIRCLE_OF_DEATH_15 = 38;
  public final static int IP_CONST_CASTSPELL_CIRCLE_OF_DEATH_20 = 39;
  public final static int IP_CONST_CASTSPELL_CIRCLE_OF_DOOM_15 = 41;
  public final static int IP_CONST_CASTSPELL_CIRCLE_OF_DOOM_20 = 42;
  public final static int IP_CONST_CASTSPELL_CIRCLE_OF_DOOM_9 = 40;
  public final static int IP_CONST_CASTSPELL_CLAIRAUDIENCE_CLAIRVOYANCE_10 = 44;
  public final static int IP_CONST_CASTSPELL_CLAIRAUDIENCE_CLAIRVOYANCE_15 = 45;
  public final static int IP_CONST_CASTSPELL_CLAIRAUDIENCE_CLAIRVOYANCE_5 = 43;
  public final static int IP_CONST_CASTSPELL_CLARITY_3 = 46;
  public final static int IP_CONST_CASTSPELL_CLOUDKILL_9 = 48;
  public final static int IP_CONST_CASTSPELL_COLOR_SPRAY_2 = 49;
  public final static int IP_CONST_CASTSPELL_CONE_OF_COLD_15 = 51;
  public final static int IP_CONST_CASTSPELL_CONE_OF_COLD_9 = 50;
  public final static int IP_CONST_CASTSPELL_CONFUSION_10 = 53;
  public final static int IP_CONST_CASTSPELL_CONFUSION_5 = 52;
  public final static int IP_CONST_CASTSPELL_CONTAGION_5 = 54;
  public final static int IP_CONST_CASTSPELL_CONTINUAL_FLAME_7 = 350;
  public final static int IP_CONST_CASTSPELL_CONTROL_UNDEAD_13 = 55;
  public final static int IP_CONST_CASTSPELL_CONTROL_UNDEAD_20 = 56;
  public final static int IP_CONST_CASTSPELL_CREATE_GREATER_UNDEAD_15 = 57;
  public final static int IP_CONST_CASTSPELL_CREATE_GREATER_UNDEAD_16 = 58;
  public final static int IP_CONST_CASTSPELL_CREATE_GREATER_UNDEAD_18 = 59;
  public final static int IP_CONST_CASTSPELL_CREATE_UNDEAD_11 = 60;
  public final static int IP_CONST_CASTSPELL_CREATE_UNDEAD_14 = 61;
  public final static int IP_CONST_CASTSPELL_CREATE_UNDEAD_16 = 62;
  public final static int IP_CONST_CASTSPELL_CREEPING_DOOM_13 = 304;
  public final static int IP_CONST_CASTSPELL_CURE_CRITICAL_WOUNDS_12 = 64;
  public final static int IP_CONST_CASTSPELL_CURE_CRITICAL_WOUNDS_15 = 65;
  public final static int IP_CONST_CASTSPELL_CURE_CRITICAL_WOUNDS_7 = 63;
  public final static int IP_CONST_CASTSPELL_CURE_LIGHT_WOUNDS_2 = 66;
  public final static int IP_CONST_CASTSPELL_CURE_LIGHT_WOUNDS_5 = 67;
  public final static int IP_CONST_CASTSPELL_CURE_MINOR_WOUNDS_1 = 68;
  public final static int IP_CONST_CASTSPELL_CURE_MODERATE_WOUNDS_10 = 71;
  public final static int IP_CONST_CASTSPELL_CURE_MODERATE_WOUNDS_3 = 69;
  public final static int IP_CONST_CASTSPELL_CURE_MODERATE_WOUNDS_6 = 70;
  public final static int IP_CONST_CASTSPELL_CURE_SERIOUS_WOUNDS_10 = 73;
  public final static int IP_CONST_CASTSPELL_CURE_SERIOUS_WOUNDS_5 = 72;
  public final static int IP_CONST_CASTSPELL_DARKNESS_3 = 75;
  public final static int IP_CONST_CASTSPELL_DARKVISION_3 = 305;
  public final static int IP_CONST_CASTSPELL_DARKVISION_6 = 306;
  public final static int IP_CONST_CASTSPELL_DAZE_1 = 76;
  public final static int IP_CONST_CASTSPELL_DEATH_WARD_7 = 77;
  public final static int IP_CONST_CASTSPELL_DELAYED_BLAST_FIREBALL_13 = 78;
  public final static int IP_CONST_CASTSPELL_DELAYED_BLAST_FIREBALL_15 = 79;
  public final static int IP_CONST_CASTSPELL_DELAYED_BLAST_FIREBALL_20 = 80;
  public final static int IP_CONST_CASTSPELL_DESTRUCTION_13 = 307;
  public final static int IP_CONST_CASTSPELL_DIRGE_15 = 376;
  public final static int IP_CONST_CASTSPELL_DISMISSAL_12 = 82;
  public final static int IP_CONST_CASTSPELL_DISMISSAL_18 = 83;
  public final static int IP_CONST_CASTSPELL_DISMISSAL_7 = 81;
  public final static int IP_CONST_CASTSPELL_DISPEL_MAGIC_10 = 85;
  public final static int IP_CONST_CASTSPELL_DISPEL_MAGIC_5 = 84;
  public final static int IP_CONST_CASTSPELL_DISPLACEMENT_9 = 389;
  public final static int IP_CONST_CASTSPELL_DIVINE_FAVOR_5 = 345;
  public final static int IP_CONST_CASTSPELL_DIVINE_MIGHT_5 = 395;
  public final static int IP_CONST_CASTSPELL_DIVINE_POWER_7 = 86;
  public final static int IP_CONST_CASTSPELL_DIVINE_SHIELD_5 = 396;
  public final static int IP_CONST_CASTSPELL_DOMINATE_ANIMAL_5 = 87;
  public final static int IP_CONST_CASTSPELL_DOMINATE_MONSTER_17 = 88;
  public final static int IP_CONST_CASTSPELL_DOMINATE_PERSON_7 = 89;
  public final static int IP_CONST_CASTSPELL_DOOM_2 = 90;
  public final static int IP_CONST_CASTSPELL_DOOM_5 = 91;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_ACID_10 = 400;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_COLD_10 = 401;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_FEAR_10 = 402;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_FIRE_10 = 403;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_GAS_10 = 404;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_LIGHTNING_10 = 405;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_PARALYZE_10 = 406;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_SLEEP_10 = 407;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_SLOW_10 = 408;
  public final static int IP_CONST_CASTSPELL_DRAGON_BREATH_WEAKEN_10 = 409;
  public final static int IP_CONST_CASTSPELL_DROWN_15 = 368;
  public final static int IP_CONST_CASTSPELL_EAGLE_SPLEDOR_10 = 289;
  public final static int IP_CONST_CASTSPELL_EAGLE_SPLEDOR_15 = 290;
  public final static int IP_CONST_CASTSPELL_EAGLE_SPLEDOR_3 = 288;
  public final static int IP_CONST_CASTSPELL_EARTHQUAKE_20 = 357;
  public final static int IP_CONST_CASTSPELL_ELECTRIC_JOLT_1 = 370;
  public final static int IP_CONST_CASTSPELL_ELEMENTAL_SHIELD_12 = 93;
  public final static int IP_CONST_CASTSPELL_ELEMENTAL_SHIELD_7 = 92;
  public final static int IP_CONST_CASTSPELL_ELEMENTAL_SWARM_17 = 94;
  public final static int IP_CONST_CASTSPELL_ENDURANCE_10 = 96;
  public final static int IP_CONST_CASTSPELL_ENDURANCE_15 = 97;
  public final static int IP_CONST_CASTSPELL_ENDURANCE_3 = 95;
  public final static int IP_CONST_CASTSPELL_ENDURE_ELEMENTS_2 = 98;
  public final static int IP_CONST_CASTSPELL_ENERGY_BUFFER_11 = 311;
  public final static int IP_CONST_CASTSPELL_ENERGY_BUFFER_15 = 312;
  public final static int IP_CONST_CASTSPELL_ENERGY_BUFFER_20 = 313;
  public final static int IP_CONST_CASTSPELL_ENERGY_DRAIN_17 = 99;
  public final static int IP_CONST_CASTSPELL_ENERVATION_7 = 100;
  public final static int IP_CONST_CASTSPELL_ENTANGLE_2 = 101;
  public final static int IP_CONST_CASTSPELL_ENTANGLE_5 = 102;
  public final static int IP_CONST_CASTSPELL_ENTROPIC_SHIELD_5 = 349;
  public final static int IP_CONST_CASTSPELL_ETHEREALNESS_18 = 374;
  public final static int IP_CONST_CASTSPELL_ETHEREAL_VISAGE_15 = 196;
  public final static int IP_CONST_CASTSPELL_ETHEREAL_VISAGE_9 = 195;
  public final static int IP_CONST_CASTSPELL_EVARDS_BLACK_TENTACLES_15 = 325;
  public final static int IP_CONST_CASTSPELL_EVARDS_BLACK_TENTACLES_7 = 324;
  public final static int IP_CONST_CASTSPELL_EXPEDITIOUS_RETREAT_5 = 387;
  public final static int IP_CONST_CASTSPELL_FEAR_5 = 103;
  public final static int IP_CONST_CASTSPELL_FEEBLEMIND_9 = 104;
  public final static int IP_CONST_CASTSPELL_FIND_TRAPS_3 = 327;
  public final static int IP_CONST_CASTSPELL_FINGER_OF_DEATH_13 = 105;
  public final static int IP_CONST_CASTSPELL_FIREBALL_10 = 109;
  public final static int IP_CONST_CASTSPELL_FIREBALL_5 = 108;
  public final static int IP_CONST_CASTSPELL_FIREBRAND_15 = 371;
  public final static int IP_CONST_CASTSPELL_FIRE_STORM_13 = 106;
  public final static int IP_CONST_CASTSPELL_FIRE_STORM_18 = 107;
  public final static int IP_CONST_CASTSPELL_FLAME_ARROW_12 = 111;
  public final static int IP_CONST_CASTSPELL_FLAME_ARROW_18 = 112;
  public final static int IP_CONST_CASTSPELL_FLAME_ARROW_5 = 110;
  public final static int IP_CONST_CASTSPELL_FLAME_LASH_10 = 114;
  public final static int IP_CONST_CASTSPELL_FLAME_LASH_3 = 113;
  public final static int IP_CONST_CASTSPELL_FLAME_STRIKE_12 = 116;
  public final static int IP_CONST_CASTSPELL_FLAME_STRIKE_18 = 117;
  public final static int IP_CONST_CASTSPELL_FLAME_STRIKE_7 = 115;
  public final static int IP_CONST_CASTSPELL_FLARE_1 = 347;
  public final static int IP_CONST_CASTSPELL_FLESH_TO_STONE_5 = 398;
  public final static int IP_CONST_CASTSPELL_FOXS_CUNNING_10 = 295;
  public final static int IP_CONST_CASTSPELL_FOXS_CUNNING_15 = 296;
  public final static int IP_CONST_CASTSPELL_FOXS_CUNNING_3 = 294;
  public final static int IP_CONST_CASTSPELL_FREEDOM_OF_MOVEMENT_7 = 118;
  public final static int IP_CONST_CASTSPELL_GATE_17 = 119;
  public final static int IP_CONST_CASTSPELL_GHOSTLY_VISAGE_15 = 194;
  public final static int IP_CONST_CASTSPELL_GHOSTLY_VISAGE_3 = 192;
  public final static int IP_CONST_CASTSPELL_GHOSTLY_VISAGE_9 = 193;
  public final static int IP_CONST_CASTSPELL_GHOUL_TOUCH_3 = 120;
  public final static int IP_CONST_CASTSPELL_GLOBE_OF_INVULNERABILITY_11 = 121;
  public final static int IP_CONST_CASTSPELL_GREASE_2 = 122;
  public final static int IP_CONST_CASTSPELL_GREATER_BULLS_STRENGTH_11 = 300;
  public final static int IP_CONST_CASTSPELL_GREATER_CATS_GRACE_11 = 301;
  public final static int IP_CONST_CASTSPELL_GREATER_DISPELLING_15 = 124;
  public final static int IP_CONST_CASTSPELL_GREATER_DISPELLING_7 = 123;
  public final static int IP_CONST_CASTSPELL_GREATER_EAGLES_SPLENDOR_11 = 297;
  public final static int IP_CONST_CASTSPELL_GREATER_ENDURANCE_11 = 302;
  public final static int IP_CONST_CASTSPELL_GREATER_FOXS_CUNNING_11 = 299;
  public final static int IP_CONST_CASTSPELL_GREATER_MAGIC_FANG_9 = 384;
  public final static int IP_CONST_CASTSPELL_GREATER_OWLS_WISDOM_11 = 298;
  public final static int IP_CONST_CASTSPELL_GREATER_PLANAR_BINDING_15 = 126;
  public final static int IP_CONST_CASTSPELL_GREATER_RESTORATION_13 = 127;
  public final static int IP_CONST_CASTSPELL_GREATER_SHADOW_CONJURATION_9 = 128;
  public final static int IP_CONST_CASTSPELL_GREATER_SPELL_BREACH_11 = 129;
  public final static int IP_CONST_CASTSPELL_GREATER_SPELL_MANTLE_17 = 130;
  public final static int IP_CONST_CASTSPELL_GREATER_STONESKIN_11 = 131;
  public final static int IP_CONST_CASTSPELL_GRENADE_ACID_1 = 341;
  public final static int IP_CONST_CASTSPELL_GRENADE_CALTROPS_1 = 343;
  public final static int IP_CONST_CASTSPELL_GRENADE_CHICKEN_1 = 342;
  public final static int IP_CONST_CASTSPELL_GRENADE_CHOKING_1 = 339;
  public final static int IP_CONST_CASTSPELL_GRENADE_FIRE_1 = 336;
  public final static int IP_CONST_CASTSPELL_GRENADE_HOLY_1 = 338;
  public final static int IP_CONST_CASTSPELL_GRENADE_TANGLE_1 = 337;
  public final static int IP_CONST_CASTSPELL_GRENADE_THUNDERSTONE_1 = 340;
  public final static int IP_CONST_CASTSPELL_GUST_OF_WIND_10 = 410;
  public final static int IP_CONST_CASTSPELL_HAMMER_OF_THE_GODS_12 = 134;
  public final static int IP_CONST_CASTSPELL_HAMMER_OF_THE_GODS_7 = 133;
  public final static int IP_CONST_CASTSPELL_HARM_11 = 136;
  public final static int IP_CONST_CASTSPELL_HASTE_10 = 138;
  public final static int IP_CONST_CASTSPELL_HASTE_5 = 137;
  public final static int IP_CONST_CASTSPELL_HEALING_CIRCLE_16 = 141;
  public final static int IP_CONST_CASTSPELL_HEALING_CIRCLE_9 = 140;
  public final static int IP_CONST_CASTSPELL_HEAL_11 = 139;
  public final static int IP_CONST_CASTSPELL_HOLD_ANIMAL_3 = 142;
  public final static int IP_CONST_CASTSPELL_HOLD_MONSTER_7 = 143;
  public final static int IP_CONST_CASTSPELL_HOLD_PERSON_3 = 144;
  public final static int IP_CONST_CASTSPELL_HORRID_WILTING_15 = 308;
  public final static int IP_CONST_CASTSPELL_HORRID_WILTING_20 = 309;
  public final static int IP_CONST_CASTSPELL_ICE_STORM_9 = 310;
  public final static int IP_CONST_CASTSPELL_IDENTIFY_3 = 147;
  public final static int IP_CONST_CASTSPELL_IMPLOSION_17 = 148;
  public final static int IP_CONST_CASTSPELL_IMPROVED_INVISIBILITY_7 = 149;
  public final static int IP_CONST_CASTSPELL_INCENDIARY_CLOUD_15 = 150;
  public final static int IP_CONST_CASTSPELL_INFERNO_15 = 377;
  public final static int IP_CONST_CASTSPELL_INFLICT_CRITICAL_WOUNDS_12 = 366;
  public final static int IP_CONST_CASTSPELL_INFLICT_LIGHT_WOUNDS_5 = 363;
  public final static int IP_CONST_CASTSPELL_INFLICT_MINOR_WOUNDS_1 = 362;
  public final static int IP_CONST_CASTSPELL_INFLICT_MODERATE_WOUNDS_7 = 364;
  public final static int IP_CONST_CASTSPELL_INFLICT_SERIOUS_WOUNDS_9 = 365;
  public final static int IP_CONST_CASTSPELL_INVISIBILITY_3 = 151;
  public final static int IP_CONST_CASTSPELL_INVISIBILITY_PURGE_5 = 152;
  public final static int IP_CONST_CASTSPELL_INVISIBILITY_SPHERE_5 = 153;
  public final static int IP_CONST_CASTSPELL_ISAACS_GREATER_MISSILE_STORM_15 = 379;
  public final static int IP_CONST_CASTSPELL_ISAACS_LESSER_MISSILE_STORM_13 = 378;
  public final static int IP_CONST_CASTSPELL_KNOCK_3 = 154;
  public final static int IP_CONST_CASTSPELL_LEGEND_LORE_5 = 326;
  public final static int IP_CONST_CASTSPELL_LESSER_DISPEL_3 = 155;
  public final static int IP_CONST_CASTSPELL_LESSER_DISPEL_5 = 156;
  public final static int IP_CONST_CASTSPELL_LESSER_MIND_BLANK_9 = 157;
  public final static int IP_CONST_CASTSPELL_LESSER_PLANAR_BINDING_9 = 158;
  public final static int IP_CONST_CASTSPELL_LESSER_RESTORATION_3 = 159;
  public final static int IP_CONST_CASTSPELL_LESSER_SPELL_BREACH_7 = 160;
  public final static int IP_CONST_CASTSPELL_LESSER_SPELL_MANTLE_9 = 161;
  public final static int IP_CONST_CASTSPELL_LIGHTNING_BOLT_10 = 165;
  public final static int IP_CONST_CASTSPELL_LIGHTNING_BOLT_5 = 164;
  public final static int IP_CONST_CASTSPELL_LIGHT_1 = 162;
  public final static int IP_CONST_CASTSPELL_LIGHT_5 = 163;
  public final static int IP_CONST_CASTSPELL_MAGE_ARMOR_2 = 167;
  public final static int IP_CONST_CASTSPELL_MAGIC_CIRCLE_AGAINST_ALIGNMENT_5 = 286;
  public final static int IP_CONST_CASTSPELL_MAGIC_FANG_5 = 383;
  public final static int IP_CONST_CASTSPELL_MAGIC_MISSILE_3 = 172;
  public final static int IP_CONST_CASTSPELL_MAGIC_MISSILE_5 = 173;
  public final static int IP_CONST_CASTSPELL_MAGIC_MISSILE_9 = 174;
  public final static int IP_CONST_CASTSPELL_MANIPULATE_PORTAL_STONE = 344;
  public final static int IP_CONST_CASTSPELL_MASS_BLINDNESS_DEAFNESS_15 = 179;
  public final static int IP_CONST_CASTSPELL_MASS_CAMOFLAGE_13 = 386;
  public final static int IP_CONST_CASTSPELL_MASS_CHARM_15 = 180;
  public final static int IP_CONST_CASTSPELL_MASS_HASTE_11 = 182;
  public final static int IP_CONST_CASTSPELL_MASS_HEAL_15 = 183;
  public final static int IP_CONST_CASTSPELL_MELFS_ACID_ARROW_3 = 184;
  public final static int IP_CONST_CASTSPELL_MELFS_ACID_ARROW_6 = 185;
  public final static int IP_CONST_CASTSPELL_MELFS_ACID_ARROW_9 = 186;
  public final static int IP_CONST_CASTSPELL_METEOR_SWARM_17 = 187;
  public final static int IP_CONST_CASTSPELL_MIND_BLANK_15 = 188;
  public final static int IP_CONST_CASTSPELL_MIND_FOG_9 = 189;
  public final static int IP_CONST_CASTSPELL_MINOR_GLOBE_OF_INVULNERABILITY_15 = 191;
  public final static int IP_CONST_CASTSPELL_MINOR_GLOBE_OF_INVULNERABILITY_7 = 190;
  public final static int IP_CONST_CASTSPELL_MORDENKAINENS_DISJUNCTION_17 = 197;
  public final static int IP_CONST_CASTSPELL_MORDENKAINENS_SWORD_13 = 198;
  public final static int IP_CONST_CASTSPELL_MORDENKAINENS_SWORD_18 = 199;
  public final static int IP_CONST_CASTSPELL_NATURES_BALANCE_15 = 200;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_BURST_10 = 315;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_BURST_5 = 314;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_PROTECTION_10 = 202;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_PROTECTION_15 = 203;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_PROTECTION_5 = 201;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_1 = 316;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_3 = 317;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_5 = 318;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_7 = 319;
  public final static int IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_9 = 320;
  public final static int IP_CONST_CASTSPELL_NEUTRALIZE_POISON_5 = 204;
  public final static int IP_CONST_CASTSPELL_NUMUSES_0_CHARGES_PER_USE = 7;
  public final static int IP_CONST_CASTSPELL_NUMUSES_1_CHARGE_PER_USE = 6;
  public final static int IP_CONST_CASTSPELL_NUMUSES_1_USE_PER_DAY = 8;
  public final static int IP_CONST_CASTSPELL_NUMUSES_2_CHARGES_PER_USE = 5;
  public final static int IP_CONST_CASTSPELL_NUMUSES_2_USES_PER_DAY = 9;
  public final static int IP_CONST_CASTSPELL_NUMUSES_3_CHARGES_PER_USE = 4;
  public final static int IP_CONST_CASTSPELL_NUMUSES_3_USES_PER_DAY = 10;
  public final static int IP_CONST_CASTSPELL_NUMUSES_4_CHARGES_PER_USE = 3;
  public final static int IP_CONST_CASTSPELL_NUMUSES_4_USES_PER_DAY = 11;
  public final static int IP_CONST_CASTSPELL_NUMUSES_5_CHARGES_PER_USE = 2;
  public final static int IP_CONST_CASTSPELL_NUMUSES_5_USES_PER_DAY = 12;
  public final static int IP_CONST_CASTSPELL_NUMUSES_SINGLE_USE = 1;
  public final static int IP_CONST_CASTSPELL_NUMUSES_UNLIMITED_USE = 13;
  public final static int IP_CONST_CASTSPELL_ONE_WITH_THE_LAND_7 = 351;
  public final static int IP_CONST_CASTSPELL_OWLS_INSIGHT_15 = 369;
  public final static int IP_CONST_CASTSPELL_OWLS_WISDOM_10 = 292;
  public final static int IP_CONST_CASTSPELL_OWLS_WISDOM_15 = 293;
  public final static int IP_CONST_CASTSPELL_OWLS_WISDOM_3 = 291;
  public final static int IP_CONST_CASTSPELL_PHANTASMAL_KILLER_7 = 205;
  public final static int IP_CONST_CASTSPELL_PLANAR_ALLY_15 = 382;
  public final static int IP_CONST_CASTSPELL_PLANAR_BINDING_11 = 206;
  public final static int IP_CONST_CASTSPELL_POISON_5 = 207;
  public final static int IP_CONST_CASTSPELL_POLYMORPH_SELF_7 = 208;
  public final static int IP_CONST_CASTSPELL_POWER_WORD_KILL_17 = 209;
  public final static int IP_CONST_CASTSPELL_POWER_WORD_STUN_13 = 210;
  public final static int IP_CONST_CASTSPELL_PRAYER_5 = 211;
  public final static int IP_CONST_CASTSPELL_PREMONITION_15 = 212;
  public final static int IP_CONST_CASTSPELL_PRISMATIC_SPRAY_13 = 213;
  public final static int IP_CONST_CASTSPELL_PROTECTION_FROM_ALIGNMENT_2 = 284;
  public final static int IP_CONST_CASTSPELL_PROTECTION_FROM_ALIGNMENT_5 = 285;
  public final static int IP_CONST_CASTSPELL_PROTECTION_FROM_ELEMENTS_10 = 217;
  public final static int IP_CONST_CASTSPELL_PROTECTION_FROM_ELEMENTS_3 = 216;
  public final static int IP_CONST_CASTSPELL_PROTECTION_FROM_SPELLS_13 = 224;
  public final static int IP_CONST_CASTSPELL_PROTECTION_FROM_SPELLS_20 = 225;
  public final static int IP_CONST_CASTSPELL_QUILLFIRE_8 = 356;
  public final static int IP_CONST_CASTSPELL_RAISE_DEAD_9 = 226;
  public final static int IP_CONST_CASTSPELL_RAY_OF_ENFEEBLEMENT_2 = 227;
  public final static int IP_CONST_CASTSPELL_RAY_OF_FROST_1 = 228;
  public final static int IP_CONST_CASTSPELL_REGENERATE_13 = 323;
  public final static int IP_CONST_CASTSPELL_REMOVE_BLINDNESS_DEAFNESS_5 = 229;
  public final static int IP_CONST_CASTSPELL_REMOVE_CURSE_5 = 230;
  public final static int IP_CONST_CASTSPELL_REMOVE_DISEASE_5 = 231;
  public final static int IP_CONST_CASTSPELL_REMOVE_FEAR_2 = 232;
  public final static int IP_CONST_CASTSPELL_REMOVE_PARALYSIS_3 = 233;
  public final static int IP_CONST_CASTSPELL_RESISTANCE_2 = 236;
  public final static int IP_CONST_CASTSPELL_RESISTANCE_5 = 237;
  public final static int IP_CONST_CASTSPELL_RESIST_ELEMENTS_10 = 235;
  public final static int IP_CONST_CASTSPELL_RESIST_ELEMENTS_3 = 234;
  public final static int IP_CONST_CASTSPELL_RESTORATION_7 = 238;
  public final static int IP_CONST_CASTSPELL_RESURRECTION_13 = 239;
  public final static int IP_CONST_CASTSPELL_ROGUES_CUNNING_3 = 328;
  public final static int IP_CONST_CASTSPELL_SANCTUARY_2 = 240;
  public final static int IP_CONST_CASTSPELL_SCARE_2 = 241;
  public final static int IP_CONST_CASTSPELL_SEARING_LIGHT_5 = 242;
  public final static int IP_CONST_CASTSPELL_SEE_INVISIBILITY_3 = 243;
  public final static int IP_CONST_CASTSPELL_SHADES_11 = 244;
  public final static int IP_CONST_CASTSPELL_SHADOW_CONJURATION_7 = 245;
  public final static int IP_CONST_CASTSPELL_SHADOW_SHIELD_13 = 246;
  public final static int IP_CONST_CASTSPELL_SHAPECHANGE_17 = 247;
  public final static int IP_CONST_CASTSPELL_SHIELD_5 = 348;
  public final static int IP_CONST_CASTSPELL_SHIELD_OF_FAITH_5 = 381;
  public final static int IP_CONST_CASTSPELL_SILENCE_3 = 249;
  public final static int IP_CONST_CASTSPELL_SLAY_LIVING_9 = 250;
  public final static int IP_CONST_CASTSPELL_SLEEP_2 = 251;
  public final static int IP_CONST_CASTSPELL_SLEEP_5 = 252;
  public final static int IP_CONST_CASTSPELL_SLOW_5 = 253;
  public final static int IP_CONST_CASTSPELL_SOUND_BURST_3 = 254;
  public final static int IP_CONST_CASTSPELL_SPECIAL_ALCOHOL_BEER = 330;
  public final static int IP_CONST_CASTSPELL_SPECIAL_ALCOHOL_SPIRITS = 332;
  public final static int IP_CONST_CASTSPELL_SPECIAL_ALCOHOL_WINE = 331;
  public final static int IP_CONST_CASTSPELL_SPECIAL_HERB_BELLADONNA = 333;
  public final static int IP_CONST_CASTSPELL_SPECIAL_HERB_GARLIC = 334;
  public final static int IP_CONST_CASTSPELL_SPELL_MANTLE_13 = 257;
  public final static int IP_CONST_CASTSPELL_SPELL_RESISTANCE_15 = 256;
  public final static int IP_CONST_CASTSPELL_SPELL_RESISTANCE_9 = 255;
  public final static int IP_CONST_CASTSPELL_SPIKE_GROWTH_9 = 385;
  public final static int IP_CONST_CASTSPELL_STINKING_CLOUD_5 = 259;
  public final static int IP_CONST_CASTSPELL_STONESKIN_7 = 260;
  public final static int IP_CONST_CASTSPELL_STONE_TO_FLESH_5 = 399;
  public final static int IP_CONST_CASTSPELL_STORM_OF_VENGEANCE_17 = 261;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_III_5 = 265;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_II_3 = 264;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_IV_7 = 266;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_IX_17 = 267;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_I_2 = 262;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_I_5 = 263;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_VIII_15 = 271;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_VII_13 = 270;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_VI_11 = 269;
  public final static int IP_CONST_CASTSPELL_SUMMON_CREATURE_V_9 = 268;
  public final static int IP_CONST_CASTSPELL_SUNBEAM_13 = 272;
  public final static int IP_CONST_CASTSPELL_SUNBURST_20 = 358;
  public final static int IP_CONST_CASTSPELL_TASHAS_HIDEOUS_LAUGHTER_7 = 388;
  public final static int IP_CONST_CASTSPELL_TENSERS_TRANSFORMATION_11 = 273;
  public final static int IP_CONST_CASTSPELL_TIME_STOP_17 = 274;
  public final static int IP_CONST_CASTSPELL_TRUE_SEEING_9 = 275;
  public final static int IP_CONST_CASTSPELL_TRUE_STRIKE_5 = 346;
  public final static int IP_CONST_CASTSPELL_UNDEATHS_ETERNAL_FOE_20 = 375;
  public final static int IP_CONST_CASTSPELL_UNIQUE_POWER = 329;
  public final static int IP_CONST_CASTSPELL_UNIQUE_POWER_SELF_ONLY = 335;
  public final static int IP_CONST_CASTSPELL_VAMPIRIC_TOUCH_5 = 277;
  public final static int IP_CONST_CASTSPELL_VIRTUE_1 = 278;
  public final static int IP_CONST_CASTSPELL_WAIL_OF_THE_BANSHEE_17 = 279;
  public final static int IP_CONST_CASTSPELL_WALL_OF_FIRE_9 = 280;
  public final static int IP_CONST_CASTSPELL_WAR_CRY_7 = 322;
  public final static int IP_CONST_CASTSPELL_WEB_3 = 281;
  public final static int IP_CONST_CASTSPELL_WEIRD_17 = 282;
  public final static int IP_CONST_CASTSPELL_WORD_OF_FAITH_13 = 283;
  public final static int IP_CONST_CASTSPELL_WOUNDING_WHISPERS_9 = 372;
  public final static int IP_CONST_CLASS_BARBARIAN = 0;
  public final static int IP_CONST_CLASS_BARD = 1;
  public final static int IP_CONST_CLASS_CLERIC = 2;
  public final static int IP_CONST_CLASS_DRUID = 3;
  public final static int IP_CONST_CLASS_FIGHTER = 4;
  public final static int IP_CONST_CLASS_MONK = 5;
  public final static int IP_CONST_CLASS_PALADIN = 6;
  public final static int IP_CONST_CLASS_RANGER = 7;
  public final static int IP_CONST_CLASS_ROGUE = 8;
  public final static int IP_CONST_CLASS_SORCERER = 9;
  public final static int IP_CONST_CLASS_WIZARD = 10;
  public final static int IP_CONST_CONTAINERWEIGHTRED_100_PERCENT = 5;
  public final static int IP_CONST_CONTAINERWEIGHTRED_20_PERCENT = 1;
  public final static int IP_CONST_CONTAINERWEIGHTRED_40_PERCENT = 2;
  public final static int IP_CONST_CONTAINERWEIGHTRED_60_PERCENT = 3;
  public final static int IP_CONST_CONTAINERWEIGHTRED_80_PERCENT = 4;
  public final static int IP_CONST_DAMAGEBONUS_1 = 1;
  public final static int IP_CONST_DAMAGEBONUS_10 = 20;
  public final static int IP_CONST_DAMAGEBONUS_2 = 2;
  public final static int IP_CONST_DAMAGEBONUS_3 = 3;
  public final static int IP_CONST_DAMAGEBONUS_4 = 4;
  public final static int IP_CONST_DAMAGEBONUS_5 = 5;
  public final static int IP_CONST_DAMAGEBONUS_6 = 16;
  public final static int IP_CONST_DAMAGEBONUS_7 = 17;
  public final static int IP_CONST_DAMAGEBONUS_8 = 18;
  public final static int IP_CONST_DAMAGEBONUS_9 = 19;
  public final static int IP_CONST_DAMAGEIMMUNITY_100_PERCENT = 7;
  public final static int IP_CONST_DAMAGEIMMUNITY_10_PERCENT = 2;
  public final static int IP_CONST_DAMAGEIMMUNITY_25_PERCENT = 3;
  public final static int IP_CONST_DAMAGEIMMUNITY_50_PERCENT = 4;
  public final static int IP_CONST_DAMAGEIMMUNITY_5_PERCENT = 1;
  public final static int IP_CONST_DAMAGEIMMUNITY_75_PERCENT = 5;
  public final static int IP_CONST_DAMAGEIMMUNITY_90_PERCENT = 6;
  public final static int IP_CONST_DAMAGEREDUCTION_1 = 0;
  public final static int IP_CONST_DAMAGEREDUCTION_10 = 9;
  public final static int IP_CONST_DAMAGEREDUCTION_11 = 10;
  public final static int IP_CONST_DAMAGEREDUCTION_12 = 11;
  public final static int IP_CONST_DAMAGEREDUCTION_13 = 12;
  public final static int IP_CONST_DAMAGEREDUCTION_14 = 13;
  public final static int IP_CONST_DAMAGEREDUCTION_15 = 14;
  public final static int IP_CONST_DAMAGEREDUCTION_16 = 15;
  public final static int IP_CONST_DAMAGEREDUCTION_17 = 16;
  public final static int IP_CONST_DAMAGEREDUCTION_18 = 17;
  public final static int IP_CONST_DAMAGEREDUCTION_19 = 18;
  public final static int IP_CONST_DAMAGEREDUCTION_2 = 1;
  public final static int IP_CONST_DAMAGEREDUCTION_20 = 19;
  public final static int IP_CONST_DAMAGEREDUCTION_3 = 2;
  public final static int IP_CONST_DAMAGEREDUCTION_4 = 3;
  public final static int IP_CONST_DAMAGEREDUCTION_5 = 4;
  public final static int IP_CONST_DAMAGEREDUCTION_6 = 5;
  public final static int IP_CONST_DAMAGEREDUCTION_7 = 6;
  public final static int IP_CONST_DAMAGEREDUCTION_8 = 7;
  public final static int IP_CONST_DAMAGEREDUCTION_9 = 8;
  public final static int IP_CONST_DAMAGERESIST_10 = 2;
  public final static int IP_CONST_DAMAGERESIST_15 = 3;
  public final static int IP_CONST_DAMAGERESIST_20 = 4;
  public final static int IP_CONST_DAMAGERESIST_25 = 5;
  public final static int IP_CONST_DAMAGERESIST_30 = 6;
  public final static int IP_CONST_DAMAGERESIST_35 = 7;
  public final static int IP_CONST_DAMAGERESIST_40 = 8;
  public final static int IP_CONST_DAMAGERESIST_45 = 9;
  public final static int IP_CONST_DAMAGERESIST_5 = 1;
  public final static int IP_CONST_DAMAGERESIST_50 = 10;
  public final static int IP_CONST_DAMAGESOAK_10_HP = 2;
  public final static int IP_CONST_DAMAGESOAK_15_HP = 3;
  public final static int IP_CONST_DAMAGESOAK_20_HP = 4;
  public final static int IP_CONST_DAMAGESOAK_25_HP = 5;
  public final static int IP_CONST_DAMAGESOAK_30_HP = 6;
  public final static int IP_CONST_DAMAGESOAK_35_HP = 7;
  public final static int IP_CONST_DAMAGESOAK_40_HP = 8;
  public final static int IP_CONST_DAMAGESOAK_45_HP = 9;
  public final static int IP_CONST_DAMAGESOAK_50_HP = 10;
  public final static int IP_CONST_DAMAGESOAK_5_HP = 1;
  public final static int IP_CONST_DAMAGETYPE_ACID = 6;
  public final static int IP_CONST_DAMAGETYPE_BLUDGEONING = 0;
  public final static int IP_CONST_DAMAGETYPE_COLD = 7;
  public final static int IP_CONST_DAMAGETYPE_DIVINE = 8;
  public final static int IP_CONST_DAMAGETYPE_ELECTRICAL = 9;
  public final static int IP_CONST_DAMAGETYPE_FIRE = 10;
  public final static int IP_CONST_DAMAGETYPE_MAGICAL = 5;
  public final static int IP_CONST_DAMAGETYPE_NEGATIVE = 11;
  public final static int IP_CONST_DAMAGETYPE_PHYSICAL = 4;
  public final static int IP_CONST_DAMAGETYPE_PIERCING = 1;
  public final static int IP_CONST_DAMAGETYPE_POSITIVE = 12;
  public final static int IP_CONST_DAMAGETYPE_SLASHING = 2;
  public final static int IP_CONST_DAMAGETYPE_SONIC = 13;
  public final static int IP_CONST_DAMAGETYPE_SUBDUAL = 3;
  public final static int IP_CONST_DAMAGEVULNERABILITY_100_PERCENT = 7;
  public final static int IP_CONST_DAMAGEVULNERABILITY_10_PERCENT = 2;
  public final static int IP_CONST_DAMAGEVULNERABILITY_25_PERCENT = 3;
  public final static int IP_CONST_DAMAGEVULNERABILITY_50_PERCENT = 4;
  public final static int IP_CONST_DAMAGEVULNERABILITY_5_PERCENT = 1;
  public final static int IP_CONST_DAMAGEVULNERABILITY_75_PERCENT = 5;
  public final static int IP_CONST_DAMAGEVULNERABILITY_90_PERCENT = 6;
  public final static int IP_CONST_FEAT_ALERTNESS = 0;
  public final static int IP_CONST_FEAT_AMBIDEXTROUS = 1;
  public final static int IP_CONST_FEAT_ARMOR_PROF_HEAVY = 24;
  public final static int IP_CONST_FEAT_ARMOR_PROF_LIGHT = 25;
  public final static int IP_CONST_FEAT_ARMOR_PROF_MEDIUM = 26;
  public final static int IP_CONST_FEAT_CLEAVE = 2;
  public final static int IP_CONST_FEAT_COMBAT_CASTING = 3;
  public final static int IP_CONST_FEAT_DISARM = 28;
  public final static int IP_CONST_FEAT_DISARM_WHIP = 37;
  public final static int IP_CONST_FEAT_DODGE = 4;
  public final static int IP_CONST_FEAT_EXTRA_TURNING = 5;
  public final static int IP_CONST_FEAT_HIDE_IN_PLAIN_SIGHT = 31;
  public final static int IP_CONST_FEAT_IMPCRITUNARM = 20;
  public final static int IP_CONST_FEAT_KNOCKDOWN = 6;
  public final static int IP_CONST_FEAT_MOBILITY = 27;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_01 = 53;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_02 = 54;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_03 = 55;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_04 = 56;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_05 = 57;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_06 = 58;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_07 = 59;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_08 = 60;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_09 = 61;
  public final static int IP_CONST_FEAT_PLAYER_TOOL_10 = 62;
  public final static int IP_CONST_FEAT_POINTBLANK = 7;
  public final static int IP_CONST_FEAT_POWERATTACK = 16;
  public final static int IP_CONST_FEAT_RAPID_SHOT = 30;
  public final static int IP_CONST_FEAT_SHIELD_PROFICIENCY = 35;
  public final static int IP_CONST_FEAT_SNEAK_ATTACK_1D6 = 32;
  public final static int IP_CONST_FEAT_SNEAK_ATTACK_2D6 = 33;
  public final static int IP_CONST_FEAT_SNEAK_ATTACK_3D6 = 34;
  public final static int IP_CONST_FEAT_SNEAK_ATTACK_5D6 = 39;
  public final static int IP_CONST_FEAT_SPELLFOCUSABJ = 8;
  public final static int IP_CONST_FEAT_SPELLFOCUSCON = 9;
  public final static int IP_CONST_FEAT_SPELLFOCUSDIV = 10;
  public final static int IP_CONST_FEAT_SPELLFOCUSENC = 11;
  public final static int IP_CONST_FEAT_SPELLFOCUSEVO = 12;
  public final static int IP_CONST_FEAT_SPELLFOCUSILL = 13;
  public final static int IP_CONST_FEAT_SPELLFOCUSNEC = 14;
  public final static int IP_CONST_FEAT_SPELLPENETRATION = 15;
  public final static int IP_CONST_FEAT_TWO_WEAPON_FIGHTING = 17;
  public final static int IP_CONST_FEAT_USE_POISON = 36;
  public final static int IP_CONST_FEAT_WEAPFINESSE = 19;
  public final static int IP_CONST_FEAT_WEAPON_PROF_CREATURE = 38;
  public final static int IP_CONST_FEAT_WEAPON_PROF_EXOTIC = 21;
  public final static int IP_CONST_FEAT_WEAPON_PROF_MARTIAL = 22;
  public final static int IP_CONST_FEAT_WEAPON_PROF_SIMPLE = 23;
  public final static int IP_CONST_FEAT_WEAPSPEUNARM = 18;
  public final static int IP_CONST_FEAT_WHIRLWIND = 29;
  public final static int IP_CONST_IMMUNITYMISC_BACKSTAB = 0;
  public final static int IP_CONST_IMMUNITYMISC_CRITICAL_HITS = 8;
  public final static int IP_CONST_IMMUNITYMISC_DEATH_MAGIC = 9;
  public final static int IP_CONST_IMMUNITYMISC_DISEASE = 4;
  public final static int IP_CONST_IMMUNITYMISC_FEAR = 5;
  public final static int IP_CONST_IMMUNITYMISC_KNOCKDOWN = 6;
  public final static int IP_CONST_IMMUNITYMISC_LEVEL_ABIL_DRAIN = 1;
  public final static int IP_CONST_IMMUNITYMISC_MINDSPELLS = 2;
  public final static int IP_CONST_IMMUNITYMISC_PARALYSIS = 7;
  public final static int IP_CONST_IMMUNITYMISC_POISON = 3;
  public final static int IP_CONST_IMMUNITYSPELL_ACID_FOG = 0;
  public final static int IP_CONST_IMMUNITYSPELL_AID = 1;
  public final static int IP_CONST_IMMUNITYSPELL_AURA_OF_VITALITY = 182;
  public final static int IP_CONST_IMMUNITYSPELL_BARKSKIN = 2;
  public final static int IP_CONST_IMMUNITYSPELL_BESTOW_CURSE = 3;
  public final static int IP_CONST_IMMUNITYSPELL_BLINDNESS_AND_DEAFNESS = 6;
  public final static int IP_CONST_IMMUNITYSPELL_BURNING_HANDS = 8;
  public final static int IP_CONST_IMMUNITYSPELL_CALL_LIGHTNING = 9;
  public final static int IP_CONST_IMMUNITYSPELL_CHAIN_LIGHTNING = 12;
  public final static int IP_CONST_IMMUNITYSPELL_CHARM_MONSTER = 13;
  public final static int IP_CONST_IMMUNITYSPELL_CHARM_PERSON = 14;
  public final static int IP_CONST_IMMUNITYSPELL_CHARM_PERSON_OR_ANIMAL = 15;
  public final static int IP_CONST_IMMUNITYSPELL_CIRCLE_OF_DEATH = 16;
  public final static int IP_CONST_IMMUNITYSPELL_CIRCLE_OF_DOOM = 17;
  public final static int IP_CONST_IMMUNITYSPELL_CLOUDKILL = 21;
  public final static int IP_CONST_IMMUNITYSPELL_COLOR_SPRAY = 22;
  public final static int IP_CONST_IMMUNITYSPELL_CONE_OF_COLD = 23;
  public final static int IP_CONST_IMMUNITYSPELL_CONFUSION = 24;
  public final static int IP_CONST_IMMUNITYSPELL_CONTAGION = 25;
  public final static int IP_CONST_IMMUNITYSPELL_CONTROL_UNDEAD = 26;
  public final static int IP_CONST_IMMUNITYSPELL_CURE_CRITICAL_WOUNDS = 27;
  public final static int IP_CONST_IMMUNITYSPELL_CURE_LIGHT_WOUNDS = 28;
  public final static int IP_CONST_IMMUNITYSPELL_CURE_MINOR_WOUNDS = 29;
  public final static int IP_CONST_IMMUNITYSPELL_CURE_MODERATE_WOUNDS = 30;
  public final static int IP_CONST_IMMUNITYSPELL_CURE_SERIOUS_WOUNDS = 31;
  public final static int IP_CONST_IMMUNITYSPELL_DARKNESS = 32;
  public final static int IP_CONST_IMMUNITYSPELL_DAZE = 33;
  public final static int IP_CONST_IMMUNITYSPELL_DEATH_WARD = 34;
  public final static int IP_CONST_IMMUNITYSPELL_DELAYED_BLAST_FIREBALL = 35;
  public final static int IP_CONST_IMMUNITYSPELL_DISMISSAL = 36;
  public final static int IP_CONST_IMMUNITYSPELL_DISPEL_MAGIC = 37;
  public final static int IP_CONST_IMMUNITYSPELL_DOMINATE_ANIMAL = 39;
  public final static int IP_CONST_IMMUNITYSPELL_DOMINATE_MONSTER = 40;
  public final static int IP_CONST_IMMUNITYSPELL_DOMINATE_PERSON = 41;
  public final static int IP_CONST_IMMUNITYSPELL_DOOM = 42;
  public final static int IP_CONST_IMMUNITYSPELL_EAGLE_SPLEDOR = 173;
  public final static int IP_CONST_IMMUNITYSPELL_ENERGY_DRAIN = 46;
  public final static int IP_CONST_IMMUNITYSPELL_ENERVATION = 47;
  public final static int IP_CONST_IMMUNITYSPELL_ENTANGLE = 48;
  public final static int IP_CONST_IMMUNITYSPELL_EVARDS_BLACK_TENTACLES = 185;
  public final static int IP_CONST_IMMUNITYSPELL_FEAR = 49;
  public final static int IP_CONST_IMMUNITYSPELL_FEEBLEMIND = 50;
  public final static int IP_CONST_IMMUNITYSPELL_FIND_TRAPS = 187;
  public final static int IP_CONST_IMMUNITYSPELL_FINGER_OF_DEATH = 51;
  public final static int IP_CONST_IMMUNITYSPELL_FIREBALL = 53;
  public final static int IP_CONST_IMMUNITYSPELL_FIRE_STORM = 52;
  public final static int IP_CONST_IMMUNITYSPELL_FLAME_ARROW = 54;
  public final static int IP_CONST_IMMUNITYSPELL_FLAME_LASH = 55;
  public final static int IP_CONST_IMMUNITYSPELL_FLAME_STRIKE = 56;
  public final static int IP_CONST_IMMUNITYSPELL_FOXS_CUNNING = 175;
  public final static int IP_CONST_IMMUNITYSPELL_FREEDOM_OF_MOVEMENT = 57;
  public final static int IP_CONST_IMMUNITYSPELL_GREASE = 59;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_BULLS_STRENGTH = 179;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_CATS_GRACE = 180;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_DISPELLING = 60;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_EAGLES_SPLENDOR = 176;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_ENDURANCE = 181;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_FOXS_CUNNING = 178;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_OWLS_WISDOM = 177;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_PLANAR_BINDING = 62;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_SHADOW_CONJURATION = 64;
  public final static int IP_CONST_IMMUNITYSPELL_GREATER_SPELL_BREACH = 65;
  public final static int IP_CONST_IMMUNITYSPELL_HAMMER_OF_THE_GODS = 68;
  public final static int IP_CONST_IMMUNITYSPELL_HARM = 69;
  public final static int IP_CONST_IMMUNITYSPELL_HEAL = 71;
  public final static int IP_CONST_IMMUNITYSPELL_HEALING_CIRCLE = 72;
  public final static int IP_CONST_IMMUNITYSPELL_HOLD_ANIMAL = 73;
  public final static int IP_CONST_IMMUNITYSPELL_HOLD_MONSTER = 74;
  public final static int IP_CONST_IMMUNITYSPELL_HOLD_PERSON = 75;
  public final static int IP_CONST_IMMUNITYSPELL_IMPLOSION = 78;
  public final static int IP_CONST_IMMUNITYSPELL_IMPROVED_INVISIBILITY = 79;
  public final static int IP_CONST_IMMUNITYSPELL_INCENDIARY_CLOUD = 80;
  public final static int IP_CONST_IMMUNITYSPELL_INVISIBILITY_PURGE = 82;
  public final static int IP_CONST_IMMUNITYSPELL_LEGEND_LORE = 186;
  public final static int IP_CONST_IMMUNITYSPELL_LESSER_DISPEL = 84;
  public final static int IP_CONST_IMMUNITYSPELL_LESSER_PLANAR_BINDING = 86;
  public final static int IP_CONST_IMMUNITYSPELL_LESSER_SPELL_BREACH = 88;
  public final static int IP_CONST_IMMUNITYSPELL_LIGHTNING_BOLT = 91;
  public final static int IP_CONST_IMMUNITYSPELL_MAGIC_CIRCLE_AGAINST_ALIGNMENT = 171;
  public final static int IP_CONST_IMMUNITYSPELL_MAGIC_MISSILE = 97;
  public final static int IP_CONST_IMMUNITYSPELL_MASS_BLINDNESS_AND_DEAFNESS = 100;
  public final static int IP_CONST_IMMUNITYSPELL_MASS_CHARM = 101;
  public final static int IP_CONST_IMMUNITYSPELL_MASS_HEAL = 104;
  public final static int IP_CONST_IMMUNITYSPELL_MELFS_ACID_ARROW = 105;
  public final static int IP_CONST_IMMUNITYSPELL_METEOR_SWARM = 106;
  public final static int IP_CONST_IMMUNITYSPELL_MIND_FOG = 108;
  public final static int IP_CONST_IMMUNITYSPELL_MORDENKAINENS_DISJUNCTION = 112;
  public final static int IP_CONST_IMMUNITYSPELL_OWLS_WISDOM = 174;
  public final static int IP_CONST_IMMUNITYSPELL_PHANTASMAL_KILLER = 116;
  public final static int IP_CONST_IMMUNITYSPELL_PLANAR_BINDING = 117;
  public final static int IP_CONST_IMMUNITYSPELL_POISON = 118;
  public final static int IP_CONST_IMMUNITYSPELL_POWER_WORD_KILL = 120;
  public final static int IP_CONST_IMMUNITYSPELL_POWER_WORD_STUN = 121;
  public final static int IP_CONST_IMMUNITYSPELL_PRISMATIC_SPRAY = 124;
  public final static int IP_CONST_IMMUNITYSPELL_RAY_OF_ENFEEBLEMENT = 131;
  public final static int IP_CONST_IMMUNITYSPELL_RAY_OF_FROST = 132;
  public final static int IP_CONST_IMMUNITYSPELL_REGENERATE = 184;
  public final static int IP_CONST_IMMUNITYSPELL_SCARE = 142;
  public final static int IP_CONST_IMMUNITYSPELL_SEARING_LIGHT = 143;
  public final static int IP_CONST_IMMUNITYSPELL_SHADES = 145;
  public final static int IP_CONST_IMMUNITYSPELL_SHADOW_CONJURATION = 146;
  public final static int IP_CONST_IMMUNITYSPELL_SILENCE = 150;
  public final static int IP_CONST_IMMUNITYSPELL_SLAY_LIVING = 151;
  public final static int IP_CONST_IMMUNITYSPELL_SLEEP = 152;
  public final static int IP_CONST_IMMUNITYSPELL_SLOW = 153;
  public final static int IP_CONST_IMMUNITYSPELL_SOUND_BURST = 154;
  public final static int IP_CONST_IMMUNITYSPELL_STINKING_CLOUD = 158;
  public final static int IP_CONST_IMMUNITYSPELL_STONESKIN = 159;
  public final static int IP_CONST_IMMUNITYSPELL_STORM_OF_VENGEANCE = 160;
  public final static int IP_CONST_IMMUNITYSPELL_SUNBEAM = 161;
  public final static int IP_CONST_IMMUNITYSPELL_VIRTUE = 165;
  public final static int IP_CONST_IMMUNITYSPELL_WAIL_OF_THE_BANSHEE = 166;
  public final static int IP_CONST_IMMUNITYSPELL_WAR_CRY = 183;
  public final static int IP_CONST_IMMUNITYSPELL_WEB = 167;
  public final static int IP_CONST_IMMUNITYSPELL_WEIRD = 168;
  public final static int IP_CONST_IMMUNITYSPELL_WORD_OF_FAITH = 169;
  public final static int IP_CONST_LIGHTBRIGHTNESS_BRIGHT = 4;
  public final static int IP_CONST_LIGHTBRIGHTNESS_DIM = 1;
  public final static int IP_CONST_LIGHTBRIGHTNESS_LOW = 2;
  public final static int IP_CONST_LIGHTBRIGHTNESS_NORMAL = 3;
  public final static int IP_CONST_LIGHTCOLOR_BLUE = 0;
  public final static int IP_CONST_LIGHTCOLOR_GREEN = 4;
  public final static int IP_CONST_LIGHTCOLOR_ORANGE = 5;
  public final static int IP_CONST_LIGHTCOLOR_PURPLE = 2;
  public final static int IP_CONST_LIGHTCOLOR_RED = 3;
  public final static int IP_CONST_LIGHTCOLOR_WHITE = 6;
  public final static int IP_CONST_LIGHTCOLOR_YELLOW = 1;
  public final static int IP_CONST_ONHIT_ABILITYDRAIN = 18;
  public final static int IP_CONST_ONHIT_BLINDNESS = 16;
  public final static int IP_CONST_ONHIT_CASTSPELL_ACID_FOG = 0;
  public final static int IP_CONST_ONHIT_CASTSPELL_ACID_SPLASH = 81;
  public final static int IP_CONST_ONHIT_CASTSPELL_ACTIVATE_ITEM = 78;
  public final static int IP_CONST_ONHIT_CASTSPELL_BALAGARNSIRONHORN = 91;
  public final static int IP_CONST_ONHIT_CASTSPELL_BALL_LIGHTNING = 113;
  public final static int IP_CONST_ONHIT_CASTSPELL_BANE = 100;
  public final static int IP_CONST_ONHIT_CASTSPELL_BANISHMENT = 85;
  public final static int IP_CONST_ONHIT_CASTSPELL_BESTOW_CURSE = 1;
  public final static int IP_CONST_ONHIT_CASTSPELL_BIGBYS_CLENCHED_FIST = 106;
  public final static int IP_CONST_ONHIT_CASTSPELL_BIGBYS_CRUSHING_HAND = 107;
  public final static int IP_CONST_ONHIT_CASTSPELL_BIGBYS_FORCEFUL_HAND = 104;
  public final static int IP_CONST_ONHIT_CASTSPELL_BIGBYS_GRASPING_HAND = 105;
  public final static int IP_CONST_ONHIT_CASTSPELL_BIGBYS_INTERPOSING_HAND = 103;
  public final static int IP_CONST_ONHIT_CASTSPELL_BLADE_BARRIER = 2;
  public final static int IP_CONST_ONHIT_CASTSPELL_BLINDNESS_AND_DEAFNESS = 3;
  public final static int IP_CONST_ONHIT_CASTSPELL_BOMBARDMENT = 80;
  public final static int IP_CONST_ONHIT_CASTSPELL_CALL_LIGHTNING = 4;
  public final static int IP_CONST_ONHIT_CASTSPELL_CHAIN_LIGHTNING = 5;
  public final static int IP_CONST_ONHIT_CASTSPELL_CLOUDKILL = 6;
  public final static int IP_CONST_ONHIT_CASTSPELL_COMBUST = 140;
  public final static int IP_CONST_ONHIT_CASTSPELL_CONFUSION = 7;
  public final static int IP_CONST_ONHIT_CASTSPELL_CONTAGION = 8;
  public final static int IP_CONST_ONHIT_CASTSPELL_CREEPING_DOOM = 72;
  public final static int IP_CONST_ONHIT_CASTSPELL_CRUMBLE = 110;
  public final static int IP_CONST_ONHIT_CASTSPELL_DARKNESS = 9;
  public final static int IP_CONST_ONHIT_CASTSPELL_DAZE = 10;
  public final static int IP_CONST_ONHIT_CASTSPELL_DEAFENING_CLNG = 137;
  public final static int IP_CONST_ONHIT_CASTSPELL_DELAYED_BLAST_FIREBALL = 11;
  public final static int IP_CONST_ONHIT_CASTSPELL_DESTRUCTION = 73;
  public final static int IP_CONST_ONHIT_CASTSPELL_DISMISSAL = 12;
  public final static int IP_CONST_ONHIT_CASTSPELL_DISPEL_MAGIC = 13;
  public final static int IP_CONST_ONHIT_CASTSPELL_DOOM = 14;
  public final static int IP_CONST_ONHIT_CASTSPELL_DROWN = 92;
  public final static int IP_CONST_ONHIT_CASTSPELL_EARTHQUAKE = 83;
  public final static int IP_CONST_ONHIT_CASTSPELL_ELECTRIC_JOLT = 93;
  public final static int IP_CONST_ONHIT_CASTSPELL_ENERGY_DRAIN = 15;
  public final static int IP_CONST_ONHIT_CASTSPELL_ENERVATION = 16;
  public final static int IP_CONST_ONHIT_CASTSPELL_ENTANGLE = 17;
  public final static int IP_CONST_ONHIT_CASTSPELL_EVARDS_BLACK_TENTACLES = 77;
  public final static int IP_CONST_ONHIT_CASTSPELL_EVIL_BLIGHT = 121;
  public final static int IP_CONST_ONHIT_CASTSPELL_FEAR = 18;
  public final static int IP_CONST_ONHIT_CASTSPELL_FEEBLEMIND = 19;
  public final static int IP_CONST_ONHIT_CASTSPELL_FIREBALL = 21;
  public final static int IP_CONST_ONHIT_CASTSPELL_FIREBRAND = 94;
  public final static int IP_CONST_ONHIT_CASTSPELL_FIRE_STORM = 20;
  public final static int IP_CONST_ONHIT_CASTSPELL_FLAME_LASH = 22;
  public final static int IP_CONST_ONHIT_CASTSPELL_FLAME_STRIKE = 23;
  public final static int IP_CONST_ONHIT_CASTSPELL_FLARE = 79;
  public final static int IP_CONST_ONHIT_CASTSPELL_FLESH_TO_STONE = 108;
  public final static int IP_CONST_ONHIT_CASTSPELL_FREEZE = 139;
  public final static int IP_CONST_ONHIT_CASTSPELL_GEDLEES_ELECTRIC_LOOP = 114;
  public final static int IP_CONST_ONHIT_CASTSPELL_GHOUL_TOUCH = 24;
  public final static int IP_CONST_ONHIT_CASTSPELL_GREASE = 25;
  public final static int IP_CONST_ONHIT_CASTSPELL_GREATER_DISPELLING = 26;
  public final static int IP_CONST_ONHIT_CASTSPELL_GREATER_SPELL_BREACH = 27;
  public final static int IP_CONST_ONHIT_CASTSPELL_GREAT_THUNDERCLAP = 112;
  public final static int IP_CONST_ONHIT_CASTSPELL_GUST_OF_WIND = 28;
  public final static int IP_CONST_ONHIT_CASTSPELL_HAMMER_OF_THE_GODS = 29;
  public final static int IP_CONST_ONHIT_CASTSPELL_HARM = 30;
  public final static int IP_CONST_ONHIT_CASTSPELL_HOLD_ANIMAL = 31;
  public final static int IP_CONST_ONHIT_CASTSPELL_HOLD_MONSTER = 32;
  public final static int IP_CONST_ONHIT_CASTSPELL_HOLD_PERSON = 33;
  public final static int IP_CONST_ONHIT_CASTSPELL_HORIZIKAULS_BOOM = 115;
  public final static int IP_CONST_ONHIT_CASTSPELL_HORRID_WILTING = 74;
  public final static int IP_CONST_ONHIT_CASTSPELL_ICE_STORM = 75;
  public final static int IP_CONST_ONHIT_CASTSPELL_IMPLOSION = 34;
  public final static int IP_CONST_ONHIT_CASTSPELL_INCENDIARY_CLOUD = 35;
  public final static int IP_CONST_ONHIT_CASTSPELL_INFERNO = 97;
  public final static int IP_CONST_ONHIT_CASTSPELL_INFESTATION_OF_MAGGOTS = 111;
  public final static int IP_CONST_ONHIT_CASTSPELL_INFLICT_CRITICAL_WOUNDS = 90;
  public final static int IP_CONST_ONHIT_CASTSPELL_INFLICT_LIGHT_WOUNDS = 87;
  public final static int IP_CONST_ONHIT_CASTSPELL_INFLICT_MINOR_WOUNDS = 86;
  public final static int IP_CONST_ONHIT_CASTSPELL_INFLICT_MODERATE_WOUNDS = 88;
  public final static int IP_CONST_ONHIT_CASTSPELL_INFLICT_SERIOUS_WOUNDS = 89;
  public final static int IP_CONST_ONHIT_CASTSPELL_INTELLIGENT_WEAPON_ONHIT = 135;
  public final static int IP_CONST_ONHIT_CASTSPELL_ISAACS_GREATER_MISSILE_STORM = 99;
  public final static int IP_CONST_ONHIT_CASTSPELL_ISAACS_LESSER_MISSILE_STORM = 98;
  public final static int IP_CONST_ONHIT_CASTSPELL_KNOCKDOWN = 138;
  public final static int IP_CONST_ONHIT_CASTSPELL_LESSER_DISPEL = 36;
  public final static int IP_CONST_ONHIT_CASTSPELL_LESSER_SPELL_BREACH = 38;
  public final static int IP_CONST_ONHIT_CASTSPELL_LIGHT = 40;
  public final static int IP_CONST_ONHIT_CASTSPELL_LIGHTNING_BOLT = 41;
  public final static int IP_CONST_ONHIT_CASTSPELL_MAGIC_MISSILE = 42;
  public final static int IP_CONST_ONHIT_CASTSPELL_MASS_BLINDNESS_AND_DEAFNESS = 43;
  public final static int IP_CONST_ONHIT_CASTSPELL_MASS_CHARM = 44;
  public final static int IP_CONST_ONHIT_CASTSPELL_MELFS_ACID_ARROW = 45;
  public final static int IP_CONST_ONHIT_CASTSPELL_MESTILS_ACID_BREATH = 116;
  public final static int IP_CONST_ONHIT_CASTSPELL_METEOR_SWARM = 46;
  public final static int IP_CONST_ONHIT_CASTSPELL_MIND_FOG = 47;
  public final static int IP_CONST_ONHIT_CASTSPELL_NEGATIVE_ENERGY_BURST = 76;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHITDEMILICHTOUCH = 133;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHITDRACOLICHTOUCH = 134;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHITFLAMINGSKIN = 129;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHITRUINARMORBEBILITH = 132;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_CHAOSSHIELD = 130;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_CONSTRICTWEAPON = 131;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_DARKFIRE = 127;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_EXTRACTBRAIN = 128;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_FIREDAMAGE = 124;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_PLANARRIFT = 126;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_SLAYRAKSHASA = 123;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_TELEPORT = 122;
  public final static int IP_CONST_ONHIT_CASTSPELL_ONHIT_UNIQUEPOWER = 125;
  public final static int IP_CONST_ONHIT_CASTSPELL_PARALYZE_2 = 136;
  public final static int IP_CONST_ONHIT_CASTSPELL_PHANTASMAL_KILLER = 49;
  public final static int IP_CONST_ONHIT_CASTSPELL_POISON = 50;
  public final static int IP_CONST_ONHIT_CASTSPELL_POWER_WORD_KILL = 51;
  public final static int IP_CONST_ONHIT_CASTSPELL_POWER_WORD_STUN = 52;
  public final static int IP_CONST_ONHIT_CASTSPELL_QUILLFIRE = 82;
  public final static int IP_CONST_ONHIT_CASTSPELL_SCARE = 54;
  public final static int IP_CONST_ONHIT_CASTSPELL_SCINTILLATING_SPHERE = 117;
  public final static int IP_CONST_ONHIT_CASTSPELL_SEARING_LIGHT = 55;
  public final static int IP_CONST_ONHIT_CASTSPELL_SILENCE = 56;
  public final static int IP_CONST_ONHIT_CASTSPELL_SLAY_LIVING = 57;
  public final static int IP_CONST_ONHIT_CASTSPELL_SLEEP = 58;
  public final static int IP_CONST_ONHIT_CASTSPELL_SLOW = 59;
  public final static int IP_CONST_ONHIT_CASTSPELL_SOUND_BURST = 60;
  public final static int IP_CONST_ONHIT_CASTSPELL_SPIKE_GROWTH = 101;
  public final static int IP_CONST_ONHIT_CASTSPELL_STINKING_CLOUD = 61;
  public final static int IP_CONST_ONHIT_CASTSPELL_STONEHOLD = 119;
  public final static int IP_CONST_ONHIT_CASTSPELL_STONE_TO_FLESH = 109;
  public final static int IP_CONST_ONHIT_CASTSPELL_STORM_OF_VENGEANCE = 63;
  public final static int IP_CONST_ONHIT_CASTSPELL_SUNBEAM = 64;
  public final static int IP_CONST_ONHIT_CASTSPELL_SUNBURST = 84;
  public final static int IP_CONST_ONHIT_CASTSPELL_TASHAS_HIDEOUS_LAUGHTER = 102;
  public final static int IP_CONST_ONHIT_CASTSPELL_UNDEATHS_ETERNAL_FOE = 96;
  public final static int IP_CONST_ONHIT_CASTSPELL_UNDEATH_TO_DEATH = 118;
  public final static int IP_CONST_ONHIT_CASTSPELL_VAMPIRIC_TOUCH = 65;
  public final static int IP_CONST_ONHIT_CASTSPELL_WAIL_OF_THE_BANSHEE = 66;
  public final static int IP_CONST_ONHIT_CASTSPELL_WALL_OF_FIRE = 67;
  public final static int IP_CONST_ONHIT_CASTSPELL_WEB = 68;
  public final static int IP_CONST_ONHIT_CASTSPELL_WEIRD = 69;
  public final static int IP_CONST_ONHIT_CASTSPELL_WORD_OF_FAITH = 70;
  public final static int IP_CONST_ONHIT_CASTSPELL_WOUNDING_WHISPERS = 95;
  public final static int IP_CONST_ONHIT_CONFUSION = 3;
  public final static int IP_CONST_ONHIT_DAZE = 5;
  public final static int IP_CONST_ONHIT_DEAFNESS = 15;
  public final static int IP_CONST_ONHIT_DISEASE = 20;
  public final static int IP_CONST_ONHIT_DISPELMAGIC = 11;
  public final static int IP_CONST_ONHIT_DOOM = 6;
  public final static int IP_CONST_ONHIT_DURATION_10_PERCENT_4_ROUNDS = 1;
  public final static int IP_CONST_ONHIT_DURATION_25_PERCENT_3_ROUNDS = 2;
  public final static int IP_CONST_ONHIT_DURATION_50_PERCENT_2_ROUNDS = 3;
  public final static int IP_CONST_ONHIT_DURATION_5_PERCENT_5_ROUNDS = 0;
  public final static int IP_CONST_ONHIT_DURATION_75_PERCENT_1_ROUND = 4;
  public final static int IP_CONST_ONHIT_FEAR = 7;
  public final static int IP_CONST_ONHIT_GREATERDISPEL = 12;
  public final static int IP_CONST_ONHIT_HOLD = 2;
  public final static int IP_CONST_ONHIT_ITEMPOISON = 19;
  public final static int IP_CONST_ONHIT_KNOCK = 8;
  public final static int IP_CONST_ONHIT_LESSERDISPEL = 10;
  public final static int IP_CONST_ONHIT_LEVELDRAIN = 17;
  public final static int IP_CONST_ONHIT_MORDSDISJUNCTION = 13;
  public final static int IP_CONST_ONHIT_SAVEDC_14 = 0;
  public final static int IP_CONST_ONHIT_SAVEDC_16 = 1;
  public final static int IP_CONST_ONHIT_SAVEDC_18 = 2;
  public final static int IP_CONST_ONHIT_SAVEDC_20 = 3;
  public final static int IP_CONST_ONHIT_SAVEDC_22 = 4;
  public final static int IP_CONST_ONHIT_SAVEDC_24 = 5;
  public final static int IP_CONST_ONHIT_SAVEDC_26 = 6;
  public final static int IP_CONST_ONHIT_SILENCE = 14;
  public final static int IP_CONST_ONHIT_SLAYALIGNMENT = 23;
  public final static int IP_CONST_ONHIT_SLAYALIGNMENTGROUP = 22;
  public final static int IP_CONST_ONHIT_SLAYRACE = 21;
  public final static int IP_CONST_ONHIT_SLEEP = 0;
  public final static int IP_CONST_ONHIT_SLOW = 9;
  public final static int IP_CONST_ONHIT_STUN = 1;
  public final static int IP_CONST_ONHIT_VORPAL = 24;
  public final static int IP_CONST_ONHIT_WOUNDING = 25;
  public final static int IP_CONST_ONMONSTERHIT_ABILITYDRAIN = 0;
  public final static int IP_CONST_ONMONSTERHIT_CONFUSION = 1;
  public final static int IP_CONST_ONMONSTERHIT_DISEASE = 2;
  public final static int IP_CONST_ONMONSTERHIT_DOOM = 3;
  public final static int IP_CONST_ONMONSTERHIT_FEAR = 4;
  public final static int IP_CONST_ONMONSTERHIT_LEVELDRAIN = 5;
  public final static int IP_CONST_ONMONSTERHIT_POISON = 6;
  public final static int IP_CONST_ONMONSTERHIT_SLOW = 7;
  public final static int IP_CONST_ONMONSTERHIT_STUN = 8;
  public final static int IP_CONST_ONMONSTERHIT_WOUNDING = 9;
  public final static int IP_CONST_POISON_1D2_CHADAMAGE = 5;
  public final static int IP_CONST_POISON_1D2_CONDAMAGE = 2;
  public final static int IP_CONST_POISON_1D2_DEXDAMAGE = 1;
  public final static int IP_CONST_POISON_1D2_INTDAMAGE = 3;
  public final static int IP_CONST_POISON_1D2_STRDAMAGE = 0;
  public final static int IP_CONST_POISON_1D2_WISDAMAGE = 4;
  public final static int IP_CONST_QUALITY_ABOVE_AVERAGE = 7;
  public final static int IP_CONST_QUALITY_AVERAGE = 6;
  public final static int IP_CONST_QUALITY_BELOW_AVERAGE = 5;
  public final static int IP_CONST_QUALITY_CUT = 14;
  public final static int IP_CONST_QUALITY_DESTROYED = 1;
  public final static int IP_CONST_QUALITY_EXCELLENT = 10;
  public final static int IP_CONST_QUALITY_GOD_LIKE = 12;
  public final static int IP_CONST_QUALITY_GOOD = 8;
  public final static int IP_CONST_QUALITY_MASTERWORK = 11;
  public final static int IP_CONST_QUALITY_POLISHED = 15;
  public final static int IP_CONST_QUALITY_POOR = 4;
  public final static int IP_CONST_QUALITY_RAW = 13;
  public final static int IP_CONST_QUALITY_RUINED = 2;
  public final static int IP_CONST_QUALITY_UNKOWN = 0;
  public final static int IP_CONST_QUALITY_VERY_GOOD = 9;
  public final static int IP_CONST_QUALITY_VERY_POOR = 3;
  public final static int IP_CONST_RACIALTYPE_ABERRATION = 7;
  public final static int IP_CONST_RACIALTYPE_ANIMAL = 8;
  public final static int IP_CONST_RACIALTYPE_BEAST = 9;
  public final static int IP_CONST_RACIALTYPE_CONSTRUCT = 10;
  public final static int IP_CONST_RACIALTYPE_DRAGON = 11;
  public final static int IP_CONST_RACIALTYPE_DWARF = 0;
  public final static int IP_CONST_RACIALTYPE_ELEMENTAL = 16;
  public final static int IP_CONST_RACIALTYPE_ELF = 1;
  public final static int IP_CONST_RACIALTYPE_FEY = 17;
  public final static int IP_CONST_RACIALTYPE_GIANT = 18;
  public final static int IP_CONST_RACIALTYPE_GNOME = 2;
  public final static int IP_CONST_RACIALTYPE_HALFELF = 4;
  public final static int IP_CONST_RACIALTYPE_HALFLING = 3;
  public final static int IP_CONST_RACIALTYPE_HALFORC = 5;
  public final static int IP_CONST_RACIALTYPE_HUMAN = 6;
  public final static int IP_CONST_RACIALTYPE_HUMANOID_GOBLINOID = 12;
  public final static int IP_CONST_RACIALTYPE_HUMANOID_MONSTROUS = 13;
  public final static int IP_CONST_RACIALTYPE_HUMANOID_ORC = 14;
  public final static int IP_CONST_RACIALTYPE_HUMANOID_REPTILIAN = 15;
  public final static int IP_CONST_RACIALTYPE_MAGICAL_BEAST = 19;
  public final static int IP_CONST_RACIALTYPE_OUTSIDER = 20;
  public final static int IP_CONST_RACIALTYPE_SHAPECHANGER = 23;
  public final static int IP_CONST_RACIALTYPE_UNDEAD = 24;
  public final static int IP_CONST_RACIALTYPE_VERMIN = 25;
  public final static int IP_CONST_REDUCEDWEIGHT_10_PERCENT = 5;
  public final static int IP_CONST_REDUCEDWEIGHT_20_PERCENT = 4;
  public final static int IP_CONST_REDUCEDWEIGHT_40_PERCENT = 3;
  public final static int IP_CONST_REDUCEDWEIGHT_60_PERCENT = 2;
  public final static int IP_CONST_REDUCEDWEIGHT_80_PERCENT = 1;
  public final static int IP_CONST_SAVEBASETYPE_FORTITUDE = 1;
  public final static int IP_CONST_SAVEBASETYPE_REFLEX = 3;
  public final static int IP_CONST_SAVEBASETYPE_WILL = 2;
  public final static int IP_CONST_SAVEVS_ACID = 1;
  public final static int IP_CONST_SAVEVS_COLD = 3;
  public final static int IP_CONST_SAVEVS_DEATH = 4;
  public final static int IP_CONST_SAVEVS_DISEASE = 5;
  public final static int IP_CONST_SAVEVS_DIVINE = 6;
  public final static int IP_CONST_SAVEVS_ELECTRICAL = 7;
  public final static int IP_CONST_SAVEVS_FEAR = 8;
  public final static int IP_CONST_SAVEVS_FIRE = 9;
  public final static int IP_CONST_SAVEVS_MINDAFFECTING = 11;
  public final static int IP_CONST_SAVEVS_NEGATIVE = 12;
  public final static int IP_CONST_SAVEVS_POISON = 13;
  public final static int IP_CONST_SAVEVS_POSITIVE = 14;
  public final static int IP_CONST_SAVEVS_SONIC = 15;
  public final static int IP_CONST_SAVEVS_UNIVERSAL = 0;
  public final static int IP_CONST_SPELLLEVEL_0 = 0;
  public final static int IP_CONST_SPELLLEVEL_1 = 1;
  public final static int IP_CONST_SPELLLEVEL_2 = 2;
  public final static int IP_CONST_SPELLLEVEL_3 = 3;
  public final static int IP_CONST_SPELLLEVEL_4 = 4;
  public final static int IP_CONST_SPELLLEVEL_5 = 5;
  public final static int IP_CONST_SPELLLEVEL_6 = 6;
  public final static int IP_CONST_SPELLLEVEL_7 = 7;
  public final static int IP_CONST_SPELLLEVEL_8 = 8;
  public final static int IP_CONST_SPELLLEVEL_9 = 9;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_10 = 0;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_12 = 1;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_14 = 2;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_16 = 3;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_18 = 4;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_20 = 5;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_22 = 6;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_24 = 7;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_26 = 8;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_28 = 9;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_30 = 10;
  public final static int IP_CONST_SPELLRESISTANCEBONUS_32 = 11;
  public final static int IP_CONST_SPELLSCHOOL_ABJURATION = 0;
  public final static int IP_CONST_SPELLSCHOOL_CONJURATION = 1;
  public final static int IP_CONST_SPELLSCHOOL_DIVINATION = 2;
  public final static int IP_CONST_SPELLSCHOOL_ENCHANTMENT = 3;
  public final static int IP_CONST_SPELLSCHOOL_EVOCATION = 4;
  public final static int IP_CONST_SPELLSCHOOL_ILLUSION = 5;
  public final static int IP_CONST_SPELLSCHOOL_NECROMANCY = 6;
  public final static int IP_CONST_SPELLSCHOOL_TRANSMUTATION = 7;
  public final static int IP_CONST_TRAPSTRENGTH_AVERAGE = 1;
  public final static int IP_CONST_TRAPSTRENGTH_DEADLY = 3;
  public final static int IP_CONST_TRAPSTRENGTH_MINOR = 0;
  public final static int IP_CONST_TRAPSTRENGTH_STRONG = 2;
  public final static int IP_CONST_TRAPTYPE_ACID_SPLASH = 9;
  public final static int IP_CONST_TRAPTYPE_BLOBOFACID = 4;
  public final static int IP_CONST_TRAPTYPE_ELECTRICAL = 6;
  public final static int IP_CONST_TRAPTYPE_FIRE = 5;
  public final static int IP_CONST_TRAPTYPE_FROST = 8;
  public final static int IP_CONST_TRAPTYPE_GAS = 7;
  public final static int IP_CONST_TRAPTYPE_HOLY = 2;
  public final static int IP_CONST_TRAPTYPE_NEGATIVE = 11;
  public final static int IP_CONST_TRAPTYPE_SONIC = 10;
  public final static int IP_CONST_TRAPTYPE_SPIKE = 1;
  public final static int IP_CONST_TRAPTYPE_TANGLE = 3;
  public final static int IP_CONST_UNLIMITEDAMMO_1D6COLD = 3;
  public final static int IP_CONST_UNLIMITEDAMMO_1D6FIRE = 2;
  public final static int IP_CONST_UNLIMITEDAMMO_1D6LIGHT = 4;
  public final static int IP_CONST_UNLIMITEDAMMO_BASIC = 1;
  public final static int IP_CONST_UNLIMITEDAMMO_PLUS1 = 11;
  public final static int IP_CONST_UNLIMITEDAMMO_PLUS2 = 12;
  public final static int IP_CONST_UNLIMITEDAMMO_PLUS3 = 13;
  public final static int IP_CONST_UNLIMITEDAMMO_PLUS4 = 14;
  public final static int IP_CONST_UNLIMITEDAMMO_PLUS5 = 15;
  public final static int IP_CONST_WEIGHTINCREASE_100_LBS = 5;
  public final static int IP_CONST_WEIGHTINCREASE_10_LBS = 1;
  public final static int IP_CONST_WEIGHTINCREASE_15_LBS = 2;
  public final static int IP_CONST_WEIGHTINCREASE_30_LBS = 3;
  public final static int IP_CONST_WEIGHTINCREASE_50_LBS = 4;
  public final static int IP_CONST_WEIGHTINCREASE_5_LBS = 0;
  public final static int ITEM_APPR_ARMOR_COLOR_CLOTH1 = 2;
  public final static int ITEM_APPR_ARMOR_COLOR_CLOTH2 = 3;
  public final static int ITEM_APPR_ARMOR_COLOR_LEATHER1 = 0;
  public final static int ITEM_APPR_ARMOR_COLOR_LEATHER2 = 1;
  public final static int ITEM_APPR_ARMOR_COLOR_METAL1 = 4;
  public final static int ITEM_APPR_ARMOR_COLOR_METAL2 = 5;
  public final static int ITEM_APPR_ARMOR_MODEL_BELT = 8;
  public final static int ITEM_APPR_ARMOR_MODEL_LBICEP = 13;
  public final static int ITEM_APPR_ARMOR_MODEL_LFOOT = 1;
  public final static int ITEM_APPR_ARMOR_MODEL_LFOREARM = 11;
  public final static int ITEM_APPR_ARMOR_MODEL_LHAND = 17;
  public final static int ITEM_APPR_ARMOR_MODEL_LSHIN = 3;
  public final static int ITEM_APPR_ARMOR_MODEL_LSHOULDER = 15;
  public final static int ITEM_APPR_ARMOR_MODEL_LTHIGH = 4;
  public final static int ITEM_APPR_ARMOR_MODEL_NECK = 9;
  public final static int ITEM_APPR_ARMOR_MODEL_PELVIS = 6;
  public final static int ITEM_APPR_ARMOR_MODEL_RBICEP = 12;
  public final static int ITEM_APPR_ARMOR_MODEL_RFOOT = 0;
  public final static int ITEM_APPR_ARMOR_MODEL_RFOREARM = 10;
  public final static int ITEM_APPR_ARMOR_MODEL_RHAND = 16;
  public final static int ITEM_APPR_ARMOR_MODEL_ROBE = 18;
  public final static int ITEM_APPR_ARMOR_MODEL_RSHIN = 2;
  public final static int ITEM_APPR_ARMOR_MODEL_RSHOULDER = 14;
  public final static int ITEM_APPR_ARMOR_MODEL_RTHIGH = 5;
  public final static int ITEM_APPR_ARMOR_MODEL_TORSO = 7;
  public final static int ITEM_APPR_ARMOR_NUM_COLORS = 6;
  public final static int ITEM_APPR_ARMOR_NUM_MODELS = 19;
  public final static int ITEM_APPR_NUM_TYPES = 5;
  public final static int ITEM_APPR_TYPE_ARMOR_COLOR = 4;
  public final static int ITEM_APPR_TYPE_ARMOR_MODEL = 3;
  public final static int ITEM_APPR_TYPE_SIMPLE_MODEL = 0;
  public final static int ITEM_APPR_TYPE_WEAPON_COLOR = 1;
  public final static int ITEM_APPR_TYPE_WEAPON_MODEL = 2;
  public final static int ITEM_APPR_WEAPON_COLOR_BOTTOM = 0;
  public final static int ITEM_APPR_WEAPON_COLOR_MIDDLE = 1;
  public final static int ITEM_APPR_WEAPON_COLOR_TOP = 2;
  public final static int ITEM_APPR_WEAPON_MODEL_BOTTOM = 0;
  public final static int ITEM_APPR_WEAPON_MODEL_MIDDLE = 1;
  public final static int ITEM_APPR_WEAPON_MODEL_TOP = 2;
  public final static int ITEM_PROPERTY_ABILITY_BONUS = 0 ;
  public final static int ITEM_PROPERTY_AC_BONUS = 1 ;
  public final static int ITEM_PROPERTY_AC_BONUS_VS_ALIGNMENT_GROUP = 2 ;
  public final static int ITEM_PROPERTY_AC_BONUS_VS_DAMAGE_TYPE = 3 ;
  public final static int ITEM_PROPERTY_AC_BONUS_VS_RACIAL_GROUP = 4 ;
  public final static int ITEM_PROPERTY_AC_BONUS_VS_SPECIFIC_ALIGNMENT = 5 ;
  public final static int ITEM_PROPERTY_ADDITIONAL = 87;
  public final static int ITEM_PROPERTY_ARCANE_SPELL_FAILURE = 84;
  public final static int ITEM_PROPERTY_ATTACK_BONUS = 56 ;
  public final static int ITEM_PROPERTY_ATTACK_BONUS_VS_ALIGNMENT_GROUP = 57 ;
  public final static int ITEM_PROPERTY_ATTACK_BONUS_VS_RACIAL_GROUP = 58 ;
  public final static int ITEM_PROPERTY_ATTACK_BONUS_VS_SPECIFIC_ALIGNMENT = 59 ;
  public final static int ITEM_PROPERTY_BASE_ITEM_WEIGHT_REDUCTION = 11 ;
  public final static int ITEM_PROPERTY_BONUS_FEAT = 12 ;
  public final static int ITEM_PROPERTY_BONUS_SPELL_SLOT_OF_LEVEL_N = 13 ;
  public final static int ITEM_PROPERTY_CAST_SPELL = 15 ;
  public final static int ITEM_PROPERTY_DAMAGE_BONUS = 16 ;
  public final static int ITEM_PROPERTY_DAMAGE_BONUS_VS_ALIGNMENT_GROUP = 17 ;
  public final static int ITEM_PROPERTY_DAMAGE_BONUS_VS_RACIAL_GROUP = 18 ;
  public final static int ITEM_PROPERTY_DAMAGE_BONUS_VS_SPECIFIC_ALIGNMENT = 19 ;
  public final static int ITEM_PROPERTY_DAMAGE_REDUCTION = 22 ;
  public final static int ITEM_PROPERTY_DAMAGE_RESISTANCE = 23 ;
  public final static int ITEM_PROPERTY_DAMAGE_VULNERABILITY = 24 ;
  public final static int ITEM_PROPERTY_DARKVISION = 26 ;
  public final static int ITEM_PROPERTY_DECREASED_ABILITY_SCORE = 27 ;
  public final static int ITEM_PROPERTY_DECREASED_AC = 28 ;
  public final static int ITEM_PROPERTY_DECREASED_ATTACK_MODIFIER = 60 ;
  public final static int ITEM_PROPERTY_DECREASED_DAMAGE = 21 ;
  public final static int ITEM_PROPERTY_DECREASED_ENHANCEMENT_MODIFIER = 10 ;
  public final static int ITEM_PROPERTY_DECREASED_SAVING_THROWS = 49 ;
  public final static int ITEM_PROPERTY_DECREASED_SAVING_THROWS_SPECIFIC = 50 ;
  public final static int ITEM_PROPERTY_DECREASED_SKILL_MODIFIER = 29 ;
  public final static int ITEM_PROPERTY_ENHANCED_CONTAINER_REDUCED_WEIGHT = 32 ;
  public final static int ITEM_PROPERTY_ENHANCEMENT_BONUS = 6 ;
  public final static int ITEM_PROPERTY_ENHANCEMENT_BONUS_VS_ALIGNMENT_GROUP = 7 ;
  public final static int ITEM_PROPERTY_ENHANCEMENT_BONUS_VS_RACIAL_GROUP = 8 ;
  public final static int ITEM_PROPERTY_ENHANCEMENT_BONUS_VS_SPECIFIC_ALIGNEMENT = 9 ;
  public final static int ITEM_PROPERTY_EXTRA_MELEE_DAMAGE_TYPE = 33 ;
  public final static int ITEM_PROPERTY_EXTRA_RANGED_DAMAGE_TYPE = 34 ;
  public final static int ITEM_PROPERTY_FREEDOM_OF_MOVEMENT = 75 ;
  public final static int ITEM_PROPERTY_HASTE = 35 ;
  public final static int ITEM_PROPERTY_HEALERS_KIT = 80;
  public final static int ITEM_PROPERTY_HOLY_AVENGER = 36 ;
  public final static int ITEM_PROPERTY_IMMUNITY_DAMAGE_TYPE = 20 ;
  public final static int ITEM_PROPERTY_IMMUNITY_MISCELLANEOUS = 37 ;
  public final static int ITEM_PROPERTY_IMMUNITY_SPECIFIC_SPELL = 53 ;
  public final static int ITEM_PROPERTY_IMMUNITY_SPELLS_BY_LEVEL = 78 ;
  public final static int ITEM_PROPERTY_IMMUNITY_SPELL_SCHOOL = 54 ;
  public final static int ITEM_PROPERTY_IMPROVED_EVASION = 38 ;
  public final static int ITEM_PROPERTY_KEEN = 43 ;
  public final static int ITEM_PROPERTY_LIGHT = 44 ;
  public final static int ITEM_PROPERTY_MASSIVE_CRITICALS = 74 ;
  public final static int ITEM_PROPERTY_MATERIAL = 85;
  public final static int ITEM_PROPERTY_MIGHTY = 45 ;
  public final static int ITEM_PROPERTY_MIND_BLANK = 46 ;
  public final static int ITEM_PROPERTY_MONSTER_DAMAGE = 77 ;
  public final static int ITEM_PROPERTY_NO_DAMAGE = 47 ;
  public final static int ITEM_PROPERTY_ONHITCASTSPELL = 82;
  public final static int ITEM_PROPERTY_ON_HIT_PROPERTIES = 48 ;
  public final static int ITEM_PROPERTY_ON_MONSTER_HIT = 72 ;
  public final static int ITEM_PROPERTY_POISON = 76 ;
  public final static int ITEM_PROPERTY_QUALITY = 86;
  public final static int ITEM_PROPERTY_REGENERATION = 51 ;
  public final static int ITEM_PROPERTY_REGENERATION_VAMPIRIC = 67 ;
  public final static int ITEM_PROPERTY_SAVING_THROW_BONUS = 40 ;
  public final static int ITEM_PROPERTY_SAVING_THROW_BONUS_SPECIFIC = 41 ;
  public final static int ITEM_PROPERTY_SKILL_BONUS = 52 ;
  public final static int ITEM_PROPERTY_SPECIAL_WALK = 79;
  public final static int ITEM_PROPERTY_SPELL_RESISTANCE = 39 ;
  public final static int ITEM_PROPERTY_THIEVES_TOOLS = 55 ;
  public final static int ITEM_PROPERTY_TRAP = 70 ;
  public final static int ITEM_PROPERTY_TRUE_SEEING = 71 ;
  public final static int ITEM_PROPERTY_TURN_RESISTANCE = 73 ;
  public final static int ITEM_PROPERTY_UNLIMITED_AMMUNITION = 61 ;
  public final static int ITEM_PROPERTY_USE_LIMITATION_ALIGNMENT_GROUP = 62 ;
  public final static int ITEM_PROPERTY_USE_LIMITATION_CLASS = 63 ;
  public final static int ITEM_PROPERTY_USE_LIMITATION_RACIAL_TYPE = 64 ;
  public final static int ITEM_PROPERTY_USE_LIMITATION_SPECIFIC_ALIGNMENT = 65 ;
  public final static int ITEM_PROPERTY_USE_LIMITATION_TILESET = 66 ;
  public final static int ITEM_PROPERTY_VISUALEFFECT = 83;
  public final static int ITEM_PROPERTY_WEIGHT_INCREASE = 81;
  public final static int ITEM_VISUAL_ACID = 0;
  public final static int ITEM_VISUAL_COLD = 1;
  public final static int ITEM_VISUAL_ELECTRICAL = 2;
  public final static int ITEM_VISUAL_EVIL = 6;
  public final static int ITEM_VISUAL_FIRE = 3;
  public final static int ITEM_VISUAL_HOLY = 5;
  public final static int ITEM_VISUAL_SONIC = 4;
  public final static int METAMAGIC_ANY = 255;
  public final static int METAMAGIC_EMPOWER = 1;
  public final static int METAMAGIC_EXTEND = 2;
  public final static int METAMAGIC_MAXIMIZE = 4;
  public final static int METAMAGIC_NONE = 0;
  public final static int METAMAGIC_QUICKEN = 8;
  public final static int METAMAGIC_SILENT = 16;
  public final static int METAMAGIC_STILL = 32;
  public final static int MISS_CHANCE_TYPE_NORMAL = 0;
  public final static int MISS_CHANCE_TYPE_VS_MELEE = 2;
  public final static int MISS_CHANCE_TYPE_VS_RANGED = 1;
  public final static int NAME_ANIMAL = 0;
  public final static int NAME_FAMILIAR = 1;
  public final static int NAME_FIRST_DWARF_FEMALE = 3;
  public final static int NAME_FIRST_DWARF_MALE = 2;
  public final static int NAME_FIRST_ELF_FEMALE = 6;
  public final static int NAME_FIRST_ELF_MALE = 5;
  public final static int NAME_FIRST_GENERIC_MALE = -1;
  public final static int NAME_FIRST_GNOME_FEMALE = 9;
  public final static int NAME_FIRST_GNOME_MALE = 8;
  public final static int NAME_FIRST_HALFELF_FEMALE = 12;
  public final static int NAME_FIRST_HALFELF_MALE = 11;
  public final static int NAME_FIRST_HALFLING_FEMALE = 15;
  public final static int NAME_FIRST_HALFLING_MALE = 14;
  public final static int NAME_FIRST_HALFORC_FEMALE = 18;
  public final static int NAME_FIRST_HALFORC_MALE = 17;
  public final static int NAME_FIRST_HUMAN_FEMALE = 21;
  public final static int NAME_FIRST_HUMAN_MALE = 20;
  public final static int NAME_LAST_DWARF = 4;
  public final static int NAME_LAST_ELF = 7;
  public final static int NAME_LAST_GNOME = 10;
  public final static int NAME_LAST_HALFELF = 13;
  public final static int NAME_LAST_HALFLING = 16;
  public final static int NAME_LAST_HALFORC = 19;
  public final static int NAME_LAST_HUMAN = 22;
  public final static int NUM_INVENTORY_SLOTS = 18;
  public final static int OBJECT_TYPE_ALL = 32767;
  public final static int OBJECT_TYPE_AREA_OF_EFFECT = 16;
  public final static int OBJECT_TYPE_CREATURE = 1;
  public final static int OBJECT_TYPE_DOOR = 8;
  public final static int OBJECT_TYPE_ENCOUNTER = 256;
  public final static int OBJECT_TYPE_INVALID = 32767;
  public final static int OBJECT_TYPE_ITEM = 2;
  public final static int OBJECT_TYPE_PLACEABLE = 64;
  public final static int OBJECT_TYPE_STORE = 128;
  public final static int OBJECT_TYPE_TRIGGER = 4;
  public final static int OBJECT_TYPE_WAYPOINT = 32;
  public final static int PACKAGE_ABERRATION = 73;
  public final static int PACKAGE_ANIMAL = 74;
  public final static int PACKAGE_ARCANE_ARCHER = 65;
  public final static int PACKAGE_ASSASSIN = 66;
  public final static int PACKAGE_BARBARIAN = 0;
  public final static int PACKAGE_BARBARIAN_BLACKGUARD = 90;
  public final static int PACKAGE_BARBARIAN_BLACKGUARD_2NDCLASS = 118;
  public final static int PACKAGE_BARBARIAN_BRUTE = 15;
  public final static int PACKAGE_BARBARIAN_ORCBLOOD = 18;
  public final static int PACKAGE_BARBARIAN_SAVAGE = 17;
  public final static int PACKAGE_BARBARIAN_SLAYER = 16;
  public final static int PACKAGE_BARD = 1;
  public final static int PACKAGE_BARD_BLADE = 43;
  public final static int PACKAGE_BARD_GALLANT = 44;
  public final static int PACKAGE_BARD_HARPER = 91;
  public final static int PACKAGE_BARD_HARPER_2NDCLASS = 119;
  public final static int PACKAGE_BARD_JESTER = 45;
  public final static int PACKAGE_BARD_LOREMASTER = 46;
  public final static int PACKAGE_BEAST = 83;
  public final static int PACKAGE_BLACKGUARD = 67;
  public final static int PACKAGE_CLERIC = 2;
  public final static int PACKAGE_CLERIC_BATTLE_PRIEST = 22;
  public final static int PACKAGE_CLERIC_DEADWALKER = 20;
  public final static int PACKAGE_CLERIC_DIVINE = 92;
  public final static int PACKAGE_CLERIC_DIVINE_2NDCLASS = 120;
  public final static int PACKAGE_CLERIC_ELEMENTALIST = 21;
  public final static int PACKAGE_CLERIC_SHAMAN = 19;
  public final static int PACKAGE_COMMONER = 82;
  public final static int PACKAGE_CONSTRUCT = 75;
  public final static int PACKAGE_DIVINE_CHAMPION = 109;
  public final static int PACKAGE_DRAGON = 80;
  public final static int PACKAGE_DRAGON_DISCIPLE = 111;
  public final static int PACKAGE_DRUID = 3;
  public final static int PACKAGE_DRUID_DEATH = 13;
  public final static int PACKAGE_DRUID_GRAY = 12;
  public final static int PACKAGE_DRUID_HAWKMASTER = 14;
  public final static int PACKAGE_DRUID_INTERLOPER = 11;
  public final static int PACKAGE_DRUID_SHIFTER = 93;
  public final static int PACKAGE_DRUID_SHIFTER_2NDCLASS = 121;
  public final static int PACKAGE_DWARVEN_DEFENDER = 89;
  public final static int PACKAGE_ELEMENTAL = 78;
  public final static int PACKAGE_FEY = 79;
  public final static int PACKAGE_FIGHTER = 4;
  public final static int PACKAGE_FIGHTER_COMMANDER = 26;
  public final static int PACKAGE_FIGHTER_FINESSE = 23;
  public final static int PACKAGE_FIGHTER_GLADIATOR = 25;
  public final static int PACKAGE_FIGHTER_PIRATE = 24;
  public final static int PACKAGE_FIGHTER_WEAPONMASTER = 94;
  public final static int PACKAGE_FIGHTER_WEAPONMASTER_2NDCLASS = 122;
  public final static int PACKAGE_GIANT = 84;
  public final static int PACKAGE_HARPER = 64;
  public final static int PACKAGE_HUMANOID = 76;
  public final static int PACKAGE_INVALID = 255;
  public final static int PACKAGE_MAGICBEAST = 85;
  public final static int PACKAGE_MONK = 5;
  public final static int PACKAGE_MONK_ASSASSIN = 95;
  public final static int PACKAGE_MONK_ASSASSIN_2NDCLASS = 123;
  public final static int PACKAGE_MONK_DEVOUT = 49;
  public final static int PACKAGE_MONK_GIFTED = 48;
  public final static int PACKAGE_MONK_PEASANT = 50;
  public final static int PACKAGE_MONK_SPIRIT = 47;
  public final static int PACKAGE_MONSTROUS = 77;
  public final static int PACKAGE_NPC_ARIBETH_BLACKGUARD = 130;
  public final static int PACKAGE_NPC_ARIBETH_PALADIN = 129;
  public final static int PACKAGE_NPC_BARBARIAN_DAELAN = 105;
  public final static int PACKAGE_NPC_BARD = 72;
  public final static int PACKAGE_NPC_BARD_DEEKIN_2 = 117;
  public final static int PACKAGE_NPC_BARD_FIGHTER = 106;
  public final static int PACKAGE_NPC_BARD_FIGHTER_SHARWYN2 = 114;
  public final static int PACKAGE_NPC_CLERIC_LINU = 104;
  public final static int PACKAGE_NPC_FT_WEAPONMASTER = 102;
  public final static int PACKAGE_NPC_FT_WEAPONMASTER_VALEN_2 = 113;
  public final static int PACKAGE_NPC_PALADIN_FALLING = 107;
  public final static int PACKAGE_NPC_RG_SHADOWDANCER = 103;
  public final static int PACKAGE_NPC_RG_TOMI_2 = 116;
  public final static int PACKAGE_NPC_ROGUE = 71;
  public final static int PACKAGE_NPC_SORCERER = 70;
  public final static int PACKAGE_NPC_WIZASSASSIN = 101;
  public final static int PACKAGE_NPC_WIZASSASSIN_NATHYRRA = 115;
  public final static int PACKAGE_OUTSIDER = 86;
  public final static int PACKAGE_PALADIN = 6;
  public final static int PACKAGE_PALADIN_CHAMPION = 54;
  public final static int PACKAGE_PALADIN_DIVINE = 96;
  public final static int PACKAGE_PALADIN_DIVINE_2NDCLASS = 124;
  public final static int PACKAGE_PALADIN_ERRANT = 51;
  public final static int PACKAGE_PALADIN_INQUISITOR = 53;
  public final static int PACKAGE_PALADIN_UNDEAD = 52;
  public final static int PACKAGE_PALE_MASTER = 110;
  public final static int PACKAGE_RANGER = 7;
  public final static int PACKAGE_RANGER_ARCANEARCHER = 97;
  public final static int PACKAGE_RANGER_ARCANEARCHER_2NDCLASS = 125;
  public final static int PACKAGE_RANGER_GIANTKILLER = 58;
  public final static int PACKAGE_RANGER_MARKSMAN = 55;
  public final static int PACKAGE_RANGER_STALKER = 57;
  public final static int PACKAGE_RANGER_WARDEN = 56;
  public final static int PACKAGE_ROGUE = 8;
  public final static int PACKAGE_ROGUE_BANDIT = 60;
  public final static int PACKAGE_ROGUE_GYPSY = 59;
  public final static int PACKAGE_ROGUE_SCOUT = 61;
  public final static int PACKAGE_ROGUE_SHADOWDANCER = 98;
  public final static int PACKAGE_ROGUE_SHADOWDANCER_2NDCLASS = 126;
  public final static int PACKAGE_ROGUE_SWASHBUCKLER = 62;
  public final static int PACKAGE_SHADOWDANCER = 63;
  public final static int PACKAGE_SHAPECHANGER = 87;
  public final static int PACKAGE_SHIFTER = 108;
  public final static int PACKAGE_SORCERER = 9;
  public final static int PACKAGE_SORCERER_ABJURATION = 35;
  public final static int PACKAGE_SORCERER_CONJURATION = 36;
  public final static int PACKAGE_SORCERER_DIVINATION = 37;
  public final static int PACKAGE_SORCERER_DRAGONDISCIPLE = 99;
  public final static int PACKAGE_SORCERER_DRAGONDISCIPLE_2NDCLASS = 127;
  public final static int PACKAGE_SORCERER_ENCHANTMENT = 38;
  public final static int PACKAGE_SORCERER_EVOCATION = 39;
  public final static int PACKAGE_SORCERER_ILLUSION = 40;
  public final static int PACKAGE_SORCERER_NECROMANCY = 41;
  public final static int PACKAGE_SORCERER_TRANSMUTATION = 42;
  public final static int PACKAGE_UNDEAD = 81;
  public final static int PACKAGE_VERMIN = 88;
  public final static int PACKAGE_WEAPONMASTER = 112;
  public final static int PACKAGE_WIZARDGENERALIST = 10;
  public final static int PACKAGE_WIZARD_ABJURATION = 27;
  public final static int PACKAGE_WIZARD_CONJURATION = 28;
  public final static int PACKAGE_WIZARD_DIVINATION = 29;
  public final static int PACKAGE_WIZARD_ENCHANTMENT = 30;
  public final static int PACKAGE_WIZARD_EVOCATION = 31;
  public final static int PACKAGE_WIZARD_ILLUSION = 32;
  public final static int PACKAGE_WIZARD_NECROMANCY = 33;
  public final static int PACKAGE_WIZARD_PALEMASTER = 100;
  public final static int PACKAGE_WIZARD_PALEMASTER_2NDCLASS = 128;
  public final static int PACKAGE_WIZARD_TRANSMUTATION = 34;
  public final static int PANEL_BUTTON_CHARACTER = 3;
  public final static int PANEL_BUTTON_INVENTORY = 1;
  public final static int PANEL_BUTTON_JOURNAL = 2;
  public final static int PANEL_BUTTON_MAP = 0;
  public final static int PANEL_BUTTON_OPTIONS = 4;
  public final static int PANEL_BUTTON_PLAYER_VERSUS_PLAYER = 7;
  public final static int PANEL_BUTTON_REST = 6;
  public final static int PANEL_BUTTON_SPELLS = 5;
  public final static int PERCEPTION_HEARD = 5;
  public final static int PERCEPTION_HEARD_AND_NOT_SEEN = 2;
  public final static int PERCEPTION_NOT_HEARD = 4;
  public final static int PERCEPTION_NOT_SEEN = 6;
  public final static int PERCEPTION_NOT_SEEN_AND_NOT_HEARD = 1;
  public final static int PERCEPTION_SEEN = 7;
  public final static int PERCEPTION_SEEN_AND_HEARD = 0;
  public final static int PERCEPTION_SEEN_AND_NOT_HEARD = 3;
  public final static int PERSISTENT_ZONE_ACTIVE = 0;
  public final static int PERSISTENT_ZONE_FOLLOW = 1;
  public final static int PHENOTYPE_BIG = 2;
  public final static int PHENOTYPE_CUSTOM1 = 3;
  public final static int PHENOTYPE_CUSTOM10 = 12;
  public final static int PHENOTYPE_CUSTOM11 = 13;
  public final static int PHENOTYPE_CUSTOM12 = 14;
  public final static int PHENOTYPE_CUSTOM13 = 15;
  public final static int PHENOTYPE_CUSTOM14 = 16;
  public final static int PHENOTYPE_CUSTOM15 = 17;
  public final static int PHENOTYPE_CUSTOM16 = 18;
  public final static int PHENOTYPE_CUSTOM17 = 19;
  public final static int PHENOTYPE_CUSTOM18 = 20;
  public final static int PHENOTYPE_CUSTOM2 = 4;
  public final static int PHENOTYPE_CUSTOM3 = 5;
  public final static int PHENOTYPE_CUSTOM4 = 6;
  public final static int PHENOTYPE_CUSTOM5 = 7;
  public final static int PHENOTYPE_CUSTOM6 = 8;
  public final static int PHENOTYPE_CUSTOM7 = 9;
  public final static int PHENOTYPE_CUSTOM8 = 10;
  public final static int PHENOTYPE_CUSTOM9 = 11;
  public final static int PHENOTYPE_NORMAL = 0;
  public final static float PI = 3.141592f;
  public final static int PLACEABLE_ACTION_BASH = 2;
  public final static int PLACEABLE_ACTION_KNOCK = 4;
  public final static int PLACEABLE_ACTION_UNLOCK = 1;
  public final static int PLACEABLE_ACTION_USE = 0;
  public final static boolean PLAYER_CHAR_IS_PC = true;
  public final static boolean PLAYER_CHAR_NOT_PC = false;
  public final static int POISON_ARANEA_VENOM = 33;
  public final static int POISON_ARSENIC = 23;
  public final static int POISON_BEBILITH_VENOM = 29;
  public final static int POISON_BLACK_ADDER_VENOM = 11;
  public final static int POISON_BLACK_LOTUS_EXTRACT = 19;
  public final static int POISON_BLADE_BANE = 2;
  public final static int POISON_BLOODROOT = 4;
  public final static int POISON_BLUE_WHINNIS = 8;
  public final static int POISON_BURNT_OTHUR_FUMES = 27;
  public final static int POISON_CARRION_CRAWLER_BRAIN_JUICE = 18;
  public final static int POISON_CHAOS_MIST = 28;
  public final static int POISON_COLOSSAL_SPIDER_VENOM = 40;
  public final static int POISON_DARK_REAVER_POWDER = 25;
  public final static int POISON_DEATHBLADE = 12;
  public final static int POISON_DRAGON_BILE = 15;
  public final static int POISON_ETTERCAP_VENOM = 32;
  public final static int POISON_GARGANTUAN_SPIDER_VENOM = 39;
  public final static int POISON_GIANT_WASP_POISON = 9;
  public final static int POISON_GREENBLOOD_OIL = 3;
  public final static int POISON_HUGE_SPIDER_VENOM = 38;
  public final static int POISON_ID_MOSS = 21;
  public final static int POISON_IRON_GOLEM = 43;
  public final static int POISON_LARGE_SCORPION_VENOM = 6;
  public final static int POISON_LARGE_SPIDER_VENOM = 37;
  public final static int POISON_LICH_DUST = 24;
  public final static int POISON_MALYSS_ROOT_PASTE = 13;
  public final static int POISON_MEDIUM_SPIDER_VENOM = 36;
  public final static int POISON_NIGHTSHADE = 0;
  public final static int POISON_NITHARIT = 14;
  public final static int POISON_OIL_OF_TAGGIT = 20;
  public final static int POISON_PHASE_SPIDER_VENOM = 41;
  public final static int POISON_PIT_FIEND_ICHOR = 31;
  public final static int POISON_PURPLE_WORM_POISON = 5;
  public final static int POISON_QUASIT_VENOM = 30;
  public final static int POISON_SASSONE_LEAF_RESIDUE = 16;
  public final static int POISON_SHADOW_ESSENCE = 10;
  public final static int POISON_SMALL_CENTIPEDE_POISON = 1;
  public final static int POISON_SMALL_SPIDER_VENOM = 35;
  public final static int POISON_STRIPED_TOADSTOOL = 22;
  public final static int POISON_TERINAV_ROOT = 17;
  public final static int POISON_TINY_SPIDER_VENOM = 34;
  public final static int POISON_UNGOL_DUST = 26;
  public final static int POISON_WRAITH_SPIDER_VENOM = 42;
  public final static int POISON_WYVERN_POISON = 7;
  public final static int POLYMORPH_TYPE_ANCIENT_BLUE_DRAGON = 71;
  public final static int POLYMORPH_TYPE_ANCIENT_GREEN_DRAGON = 73;
  public final static int POLYMORPH_TYPE_ANCIENT_RED_DRAGON = 72;
  public final static int POLYMORPH_TYPE_BADGER = 25;
  public final static int POLYMORPH_TYPE_BALOR = 10;
  public final static int POLYMORPH_TYPE_BASILISK = 61;
  public final static int POLYMORPH_TYPE_BEHOLDER = 63;
  public final static int POLYMORPH_TYPE_BOAR = 24;
  public final static int POLYMORPH_TYPE_BROWN_BEAR = 21;
  public final static int POLYMORPH_TYPE_CELESTIAL_AVENGER = 38;
  public final static int POLYMORPH_TYPE_CHICKEN = 40;
  public final static int POLYMORPH_TYPE_COW = 27;
  public final static int POLYMORPH_TYPE_DEATH_SLAAD = 11;
  public final static int POLYMORPH_TYPE_DIRETIGER = 69;
  public final static int POLYMORPH_TYPE_DIRE_BADGER = 37;
  public final static int POLYMORPH_TYPE_DIRE_BOAR = 36;
  public final static int POLYMORPH_TYPE_DIRE_BROWN_BEAR = 33;
  public final static int POLYMORPH_TYPE_DIRE_PANTHER = 34;
  public final static int POLYMORPH_TYPE_DIRE_WOLF = 35;
  public final static int POLYMORPH_TYPE_DOOM_KNIGHT = 28;
  public final static int POLYMORPH_TYPE_DRIDER = 62;
  public final static int POLYMORPH_TYPE_ELDER_AIR_ELEMENTAL = 20;
  public final static int POLYMORPH_TYPE_ELDER_EARTH_ELEMENTAL = 19;
  public final static int POLYMORPH_TYPE_ELDER_FIRE_ELEMENTAL = 17;
  public final static int POLYMORPH_TYPE_ELDER_WATER_ELEMENTAL = 18;
  public final static int POLYMORPH_TYPE_FEMALE_DROW = 70;
  public final static int POLYMORPH_TYPE_FIRE_GIANT = 9;
  public final static int POLYMORPH_TYPE_FROST_GIANT_FEMALE = 42;
  public final static int POLYMORPH_TYPE_FROST_GIANT_MALE = 41;
  public final static int POLYMORPH_TYPE_GARGOYLE = 65;
  public final static int POLYMORPH_TYPE_GIANT_SPIDER = 3;
  public final static int POLYMORPH_TYPE_GOLEM_AUTOMATON = 57;
  public final static int POLYMORPH_TYPE_HARPY = 60;
  public final static int POLYMORPH_TYPE_HEURODIS = 43;
  public final static int POLYMORPH_TYPE_HUGE_AIR_ELEMENTAL = 16;
  public final static int POLYMORPH_TYPE_HUGE_EARTH_ELEMENTAL = 15;
  public final static int POLYMORPH_TYPE_HUGE_FIRE_ELEMENTAL = 13;
  public final static int POLYMORPH_TYPE_HUGE_WATER_ELEMENTAL = 14;
  public final static int POLYMORPH_TYPE_IMP = 30;
  public final static int POLYMORPH_TYPE_IRON_GOLEM = 12;
  public final static int POLYMORPH_TYPE_JNAH_GIANT_FEMAL = 45;
  public final static int POLYMORPH_TYPE_JNAH_GIANT_MALE = 44;
  public final static int POLYMORPH_TYPE_MALE_DROW = 59;
  public final static int POLYMORPH_TYPE_MANTICORE = 58;
  public final static int POLYMORPH_TYPE_MEDUSA = 64;
  public final static int POLYMORPH_TYPE_MINDFLAYER = 68;
  public final static int POLYMORPH_TYPE_MINOTAUR = 66;
  public final static int POLYMORPH_TYPE_NULL_HUMAN = 78;
  public final static int POLYMORPH_TYPE_PANTHER = 22;
  public final static int POLYMORPH_TYPE_PENGUIN = 26;
  public final static int POLYMORPH_TYPE_PIXIE = 6;
  public final static int POLYMORPH_TYPE_QUASIT = 31;
  public final static int POLYMORPH_TYPE_RED_DRAGON = 8;
  public final static int POLYMORPH_TYPE_RISEN_LORD = 75;
  public final static int POLYMORPH_TYPE_SPECTRE = 76;
  public final static int POLYMORPH_TYPE_SUCCUBUS = 32;
  public final static int POLYMORPH_TYPE_SUPER_CHICKEN = 67;
  public final static int POLYMORPH_TYPE_TROLL = 4;
  public final static int POLYMORPH_TYPE_UMBER_HULK = 5;
  public final static int POLYMORPH_TYPE_VAMPIRE_FEMALE = 77;
  public final static int POLYMORPH_TYPE_VAMPIRE_MALE = 74;
  public final static int POLYMORPH_TYPE_VROCK = 39;
  public final static int POLYMORPH_TYPE_WERECAT = 2;
  public final static int POLYMORPH_TYPE_WERERAT = 1;
  public final static int POLYMORPH_TYPE_WEREWOLF = 0;
  public final static int POLYMORPH_TYPE_WOLF = 23;
  public final static int POLYMORPH_TYPE_WYRMLING_BLACK = 56;
  public final static int POLYMORPH_TYPE_WYRMLING_BLUE = 53;
  public final static int POLYMORPH_TYPE_WYRMLING_GREEN = 55;
  public final static int POLYMORPH_TYPE_WYRMLING_RED = 54;
  public final static int POLYMORPH_TYPE_WYRMLING_WHITE = 52;
  public final static int POLYMORPH_TYPE_YUANTI = 29;
  public final static int POLYMORPH_TYPE_ZOMBIE = 7;
  public final static int PORTRAIT_INVALID = 65535;
  public final static int PROJECTILE_PATH_TYPE_ACCELERATING = 4;
  public final static int PROJECTILE_PATH_TYPE_BALLISTIC = 2;
  public final static int PROJECTILE_PATH_TYPE_DEFAULT = 0;
  public final static int PROJECTILE_PATH_TYPE_HIGH_BALLISTIC = 3;
  public final static int PROJECTILE_PATH_TYPE_HOMING = 1;
  public final static int RACIAL_TYPE_ABERRATION = 7;
  public final static int RACIAL_TYPE_ALL = 28;
  public final static int RACIAL_TYPE_ANIMAL = 8;
  public final static int RACIAL_TYPE_BEAST = 9;
  public final static int RACIAL_TYPE_CONSTRUCT = 10;
  public final static int RACIAL_TYPE_DRAGON = 11;
  public final static int RACIAL_TYPE_DWARF = 0;
  public final static int RACIAL_TYPE_ELEMENTAL = 16;
  public final static int RACIAL_TYPE_ELF = 1;
  public final static int RACIAL_TYPE_FEY = 17;
  public final static int RACIAL_TYPE_GIANT = 18;
  public final static int RACIAL_TYPE_GNOME = 2;
  public final static int RACIAL_TYPE_HALFELF = 4;
  public final static int RACIAL_TYPE_HALFLING = 3;
  public final static int RACIAL_TYPE_HALFORC = 5;
  public final static int RACIAL_TYPE_HUMAN = 6;
  public final static int RACIAL_TYPE_HUMANOID_GOBLINOID = 12;
  public final static int RACIAL_TYPE_HUMANOID_MONSTROUS = 13;
  public final static int RACIAL_TYPE_HUMANOID_ORC = 14;
  public final static int RACIAL_TYPE_HUMANOID_REPTILIAN = 15;
  public final static int RACIAL_TYPE_INVALID = 28;
  public final static int RACIAL_TYPE_MAGICAL_BEAST = 19;
  public final static int RACIAL_TYPE_OOZE = 29;
  public final static int RACIAL_TYPE_OUTSIDER = 20;
  public final static int RACIAL_TYPE_SHAPECHANGER = 23;
  public final static int RACIAL_TYPE_UNDEAD = 24;
  public final static int RACIAL_TYPE_VERMIN = 25;
  public final static float RADIUS_SIZE_COLOSSAL = 10.0f;
  public final static float RADIUS_SIZE_GARGANTUAN = 8.33f;
  public final static float RADIUS_SIZE_HUGE = 6.67f;
  public final static float RADIUS_SIZE_LARGE = 5.0f;
  public final static float RADIUS_SIZE_MEDIUM = 3.33f;
  public final static float RADIUS_SIZE_SMALL = 1.67f;
  public final static int REPUTATION_TYPE_ENEMY = 1;
  public final static int REPUTATION_TYPE_FRIEND = 0;
  public final static int REPUTATION_TYPE_NEUTRAL = 2;
  public final static int REST_EVENTTYPE_REST_CANCELLED = 3;
  public final static int REST_EVENTTYPE_REST_FINISHED = 2;
  public final static int REST_EVENTTYPE_REST_INVALID = 0;
  public final static int REST_EVENTTYPE_REST_STARTED = 1;
  public final static int SAVING_THROW_ALL = 0;
  public final static int SAVING_THROW_FORT = 1;
  public final static int SAVING_THROW_REFLEX = 2;
  public final static int SAVING_THROW_TYPE_ACID = 6;
  public final static int SAVING_THROW_TYPE_ALL = 0;
  public final static int SAVING_THROW_TYPE_CHAOS = 19;
  public final static int SAVING_THROW_TYPE_COLD = 12;
  public final static int SAVING_THROW_TYPE_DEATH = 11;
  public final static int SAVING_THROW_TYPE_DISEASE = 3;
  public final static int SAVING_THROW_TYPE_DIVINE = 13;
  public final static int SAVING_THROW_TYPE_ELECTRICITY = 8;
  public final static int SAVING_THROW_TYPE_EVIL = 17;
  public final static int SAVING_THROW_TYPE_FEAR = 4;
  public final static int SAVING_THROW_TYPE_FIRE = 7;
  public final static int SAVING_THROW_TYPE_GOOD = 16;
  public final static int SAVING_THROW_TYPE_LAW = 18;
  public final static int SAVING_THROW_TYPE_MIND_SPELLS = 1;
  public final static int SAVING_THROW_TYPE_NEGATIVE = 10;
  public final static int SAVING_THROW_TYPE_NONE = 0;
  public final static int SAVING_THROW_TYPE_POISON = 2;
  public final static int SAVING_THROW_TYPE_POSITIVE = 9;
  public final static int SAVING_THROW_TYPE_SONIC = 5;
  public final static int SAVING_THROW_TYPE_SPELL = 15;
  public final static int SAVING_THROW_TYPE_TRAP = 14;
  public final static int SAVING_THROW_WILL = 3;
  public final static int SHAPE_CONE = 1;
  public final static int SHAPE_CUBE = 2;
  public final static int SHAPE_SPELLCONE = 3;
  public final static int SHAPE_SPELLCYLINDER = 0;
  public final static int SHAPE_SPHERE = 4;
  public final static int SKILL_ALL_SKILLS = 255;
  public final static int SKILL_ANIMAL_EMPATHY = 0;
  public final static int SKILL_APPRAISE = 20;
  public final static int SKILL_BLUFF = 23;
  public final static int SKILL_CONCENTRATION = 1;
  public final static int SKILL_CRAFT_ARMOR = 25;
  public final static int SKILL_CRAFT_TRAP = 22;
  public final static int SKILL_CRAFT_WEAPON = 26;
  public final static int SKILL_DISABLE_TRAP = 2;
  public final static int SKILL_DISCIPLINE = 3;
  public final static int SKILL_HEAL = 4;
  public final static int SKILL_HIDE = 5;
  public final static int SKILL_INTIMIDATE = 24;
  public final static int SKILL_LISTEN = 6;
  public final static int SKILL_LORE = 7;
  public final static int SKILL_MOVE_SILENTLY = 8;
  public final static int SKILL_OPEN_LOCK = 9;
  public final static int SKILL_PARRY = 10;
  public final static int SKILL_PERFORM = 11;
  public final static int SKILL_PERSUADE = 12;
  public final static int SKILL_PICK_POCKET = 13;
  public final static int SKILL_RIDE = 27;
  public final static int SKILL_SEARCH = 14;
  public final static int SKILL_SET_TRAP = 15;
  public final static int SKILL_SPELLCRAFT = 16;
  public final static int SKILL_SPOT = 17;
  public final static int SKILL_TAUNT = 18;
  public final static int SKILL_TUMBLE = 21;
  public final static int SKILL_USE_MAGIC_DEVICE = 19;
  public final static int SKYBOX_DESERT_CLEAR = 3;
  public final static int SKYBOX_GRASS_CLEAR = 1;
  public final static int SKYBOX_GRASS_STORM = 2;
  public final static int SKYBOX_ICY = 5;
  public final static int SKYBOX_NONE = 0;
  public final static int SKYBOX_WINTER_CLEAR = 4;
  public final static int SPECIAL_ATTACK_CALLED_SHOT_ARM = 2;
  public final static int SPECIAL_ATTACK_CALLED_SHOT_LEG = 1;
  public final static int SPECIAL_ATTACK_DISARM = 4;
  public final static int SPECIAL_ATTACK_FLURRY_OF_BLOWS = 9;
  public final static int SPECIAL_ATTACK_IMPROVED_DISARM = 5;
  public final static int SPECIAL_ATTACK_IMPROVED_KNOCKDOWN = 7;
  public final static int SPECIAL_ATTACK_INVALID = 0;
  public final static int SPECIAL_ATTACK_KNOCKDOWN = 6;
  public final static int SPECIAL_ATTACK_RAPID_SHOT = 10;
  public final static int SPECIAL_ATTACK_SAP = 3;
  public final static int SPECIAL_ATTACK_STUNNING_FIST = 8;
  public final static int SPELLABILITY_AA_ARROW_OF_DEATH = 604;
  public final static int SPELLABILITY_AA_HAIL_OF_ARROWS = 603;
  public final static int SPELLABILITY_AA_IMBUE_ARROW = 600;
  public final static int SPELLABILITY_AA_SEEKER_ARROW_1 = 601;
  public final static int SPELLABILITY_AA_SEEKER_ARROW_2 = 602;
  public final static int SPELLABILITY_ACTIVATE_ITEM = 386;
  public final static int SPELLABILITY_AS_DARKNESS = 606;
  public final static int SPELLABILITY_AS_GHOSTLY_VISAGE = 605;
  public final static int SPELLABILITY_AS_IMPROVED_INVISIBLITY = 608;
  public final static int SPELLABILITY_AS_INVISIBILITY = 607;
  public final static int SPELLABILITY_AURA_BLINDING = 195;
  public final static int SPELLABILITY_AURA_COLD = 196;
  public final static int SPELLABILITY_AURA_ELECTRICITY = 197;
  public final static int SPELLABILITY_AURA_FEAR = 198;
  public final static int SPELLABILITY_AURA_FIRE = 199;
  public final static int SPELLABILITY_AURA_HORRIFICAPPEARANCE = 804;
  public final static int SPELLABILITY_AURA_MENACE = 200;
  public final static int SPELLABILITY_AURA_OF_COURAGE = 314;
  public final static int SPELLABILITY_AURA_PROTECTION = 201;
  public final static int SPELLABILITY_AURA_STUN = 202;
  public final static int SPELLABILITY_AURA_UNEARTHLY_VISAGE = 203;
  public final static int SPELLABILITY_AURA_UNNATURAL = 204;
  public final static int SPELLABILITY_BARBARIAN_RAGE = 307;
  public final static int SPELLABILITY_BATTLE_MASTERY = 380;
  public final static int SPELLABILITY_BG_BULLS_STRENGTH = 614;
  public final static int SPELLABILITY_BG_CONTAGION = 613;
  public final static int SPELLABILITY_BG_CREATEDEAD = 609;
  public final static int SPELLABILITY_BG_FIENDISH_SERVANT = 610;
  public final static int SPELLABILITY_BG_INFLICT_CRITICAL_WOUNDS = 612;
  public final static int SPELLABILITY_BG_INFLICT_SERIOUS_WOUNDS = 611;
  public final static int SPELLABILITY_BOLT_ABILITY_DRAIN_CHARISMA = 205;
  public final static int SPELLABILITY_BOLT_ABILITY_DRAIN_CONSTITUTION = 206;
  public final static int SPELLABILITY_BOLT_ABILITY_DRAIN_DEXTERITY = 207;
  public final static int SPELLABILITY_BOLT_ABILITY_DRAIN_INTELLIGENCE = 208;
  public final static int SPELLABILITY_BOLT_ABILITY_DRAIN_STRENGTH = 209;
  public final static int SPELLABILITY_BOLT_ABILITY_DRAIN_WISDOM = 210;
  public final static int SPELLABILITY_BOLT_ACID = 211;
  public final static int SPELLABILITY_BOLT_CHARM = 212;
  public final static int SPELLABILITY_BOLT_COLD = 213;
  public final static int SPELLABILITY_BOLT_CONFUSE = 214;
  public final static int SPELLABILITY_BOLT_DAZE = 215;
  public final static int SPELLABILITY_BOLT_DEATH = 216;
  public final static int SPELLABILITY_BOLT_DISEASE = 217;
  public final static int SPELLABILITY_BOLT_DOMINATE = 218;
  public final static int SPELLABILITY_BOLT_FIRE = 219;
  public final static int SPELLABILITY_BOLT_KNOCKDOWN = 220;
  public final static int SPELLABILITY_BOLT_LEVEL_DRAIN = 221;
  public final static int SPELLABILITY_BOLT_LIGHTNING = 222;
  public final static int SPELLABILITY_BOLT_PARALYZE = 223;
  public final static int SPELLABILITY_BOLT_POISON = 224;
  public final static int SPELLABILITY_BOLT_SHARDS = 225;
  public final static int SPELLABILITY_BOLT_SLOW = 226;
  public final static int SPELLABILITY_BOLT_STUN = 227;
  public final static int SPELLABILITY_BOLT_WEB = 228;
  public final static int SPELLABILITY_BREATH_PETRIFY = 495;
  public final static int SPELLABILITY_CHARMMONSTER = 552;
  public final static int SPELLABILITY_COMMAND_THE_HORDE = 571;
  public final static int SPELLABILITY_CONE_ACID = 229;
  public final static int SPELLABILITY_CONE_COLD = 230;
  public final static int SPELLABILITY_CONE_DISEASE = 231;
  public final static int SPELLABILITY_CONE_FIRE = 232;
  public final static int SPELLABILITY_CONE_LIGHTNING = 233;
  public final static int SPELLABILITY_CONE_POISON = 234;
  public final static int SPELLABILITY_CONE_SONIC = 235;
  public final static int SPELLABILITY_DC_DIVINE_WRATH = 622;
  public final static int SPELLABILITY_DETECT_EVIL = 312;
  public final static int SPELLABILITY_DIVINE_PROTECTION = 382;
  public final static int SPELLABILITY_DIVINE_STRENGTH = 381;
  public final static int SPELLABILITY_DIVINE_TRICKERY = 384;
  public final static int SPELLABILITY_DRAGON_BREATH_ACID = 236;
  public final static int SPELLABILITY_DRAGON_BREATH_COLD = 237;
  public final static int SPELLABILITY_DRAGON_BREATH_FEAR = 238;
  public final static int SPELLABILITY_DRAGON_BREATH_FIRE = 239;
  public final static int SPELLABILITY_DRAGON_BREATH_GAS = 240;
  public final static int SPELLABILITY_DRAGON_BREATH_LIGHTNING = 241;
  public final static int SPELLABILITY_DRAGON_BREATH_NEGATIVE = 698;
  public final static int SPELLABILITY_DRAGON_BREATH_PARALYZE = 242;
  public final static int SPELLABILITY_DRAGON_BREATH_SLEEP = 243;
  public final static int SPELLABILITY_DRAGON_BREATH_SLOW = 244;
  public final static int SPELLABILITY_DRAGON_BREATH_WEAKEN = 245;
  public final static int SPELLABILITY_DRAGON_FEAR = 412;
  public final static int SPELLABILITY_DRAGON_WING_BUFFET = 246;
  public final static int SPELLABILITY_DW_DEFENSIVE_STANCE = 641;
  public final static int SPELLABILITY_ELEMENTAL_SHAPE = 319;
  public final static int SPELLABILITY_EMPTY_BODY = 311;
  public final static int SPELLABILITY_EPIC_CURSE_SONG = 644;
  public final static int SPELLABILITY_EPIC_IMPROVED_WHIRLWIND = 645;
  public final static int SPELLABILITY_EPIC_MIGHTY_RAGE = 642;
  public final static int SPELLABILITY_EPIC_SHAPE_DRAGON = 647;
  public final static int SPELLABILITY_EPIC_SHAPE_DRAGONKIN = 646;
  public final static int SPELLABILITY_FEROCITY_1 = 247;
  public final static int SPELLABILITY_FEROCITY_2 = 248;
  public final static int SPELLABILITY_FEROCITY_3 = 249;
  public final static int SPELLABILITY_GAZE_CHARM = 250;
  public final static int SPELLABILITY_GAZE_CONFUSION = 251;
  public final static int SPELLABILITY_GAZE_DAZE = 252;
  public final static int SPELLABILITY_GAZE_DEATH = 253;
  public final static int SPELLABILITY_GAZE_DESTROY_CHAOS = 254;
  public final static int SPELLABILITY_GAZE_DESTROY_EVIL = 255;
  public final static int SPELLABILITY_GAZE_DESTROY_GOOD = 256;
  public final static int SPELLABILITY_GAZE_DESTROY_LAW = 257;
  public final static int SPELLABILITY_GAZE_DOMINATE = 258;
  public final static int SPELLABILITY_GAZE_DOOM = 259;
  public final static int SPELLABILITY_GAZE_FEAR = 260;
  public final static int SPELLABILITY_GAZE_PARALYSIS = 261;
  public final static int SPELLABILITY_GAZE_PETRIFY = 497;
  public final static int SPELLABILITY_GAZE_STUNNED = 262;
  public final static int SPELLABILITY_GOLEM_BREATH_GAS = 263;
  public final static int SPELLABILITY_HELL_HOUND_FIREBREATH = 264;
  public final static int SPELLABILITY_HOWL_CONFUSE = 265;
  public final static int SPELLABILITY_HOWL_DAZE = 266;
  public final static int SPELLABILITY_HOWL_DEATH = 267;
  public final static int SPELLABILITY_HOWL_DOOM = 268;
  public final static int SPELLABILITY_HOWL_FEAR = 269;
  public final static int SPELLABILITY_HOWL_PARALYSIS = 270;
  public final static int SPELLABILITY_HOWL_SONIC = 271;
  public final static int SPELLABILITY_HOWL_STUN = 272;
  public final static int SPELLABILITY_INTENSITY_1 = 273;
  public final static int SPELLABILITY_INTENSITY_2 = 274;
  public final static int SPELLABILITY_INTENSITY_3 = 275;
  public final static int SPELLABILITY_KRENSHAR_SCARE = 276;
  public final static int SPELLABILITY_LAY_ON_HANDS = 313;
  public final static int SPELLABILITY_LESSER_BODY_ADJUSTMENT = 277;
  public final static int SPELLABILITY_MANTICORE_SPIKES = 498;
  public final static int SPELLABILITY_MEPHIT_SALT_BREATH = 278;
  public final static int SPELLABILITY_MEPHIT_STEAM_BREATH = 279;
  public final static int SPELLABILITY_MINDBLAST = 551;
  public final static int SPELLABILITY_MUMMY_BOLSTER_UNDEAD = 280;
  public final static int SPELLABILITY_NEGATIVE_PLANE_AVATAR = 383;
  public final static int SPELLABILITY_PM_ANIMATE_DEAD = 623;
  public final static int SPELLABILITY_PM_DEATHLESS_MASTER_TOUCH = 628;
  public final static int SPELLABILITY_PM_SUMMON_GREATER_UNDEAD = 627;
  public final static int SPELLABILITY_PM_SUMMON_UNDEAD = 624;
  public final static int SPELLABILITY_PM_UNDEAD_GRAFT_1 = 625;
  public final static int SPELLABILITY_PM_UNDEAD_GRAFT_2 = 626;
  public final static int SPELLABILITY_PULSE_ABILITY_DRAIN_CHARISMA = 292;
  public final static int SPELLABILITY_PULSE_ABILITY_DRAIN_CONSTITUTION = 293;
  public final static int SPELLABILITY_PULSE_ABILITY_DRAIN_DEXTERITY = 294;
  public final static int SPELLABILITY_PULSE_ABILITY_DRAIN_INTELLIGENCE = 291;
  public final static int SPELLABILITY_PULSE_ABILITY_DRAIN_STRENGTH = 295;
  public final static int SPELLABILITY_PULSE_ABILITY_DRAIN_WISDOM = 296;
  public final static int SPELLABILITY_PULSE_COLD = 286;
  public final static int SPELLABILITY_PULSE_DEATH = 289;
  public final static int SPELLABILITY_PULSE_DISEASE = 298;
  public final static int SPELLABILITY_PULSE_DROWN = 281;
  public final static int SPELLABILITY_PULSE_FIRE = 284;
  public final static int SPELLABILITY_PULSE_HOLY = 288;
  public final static int SPELLABILITY_PULSE_LEVEL_DRAIN = 290;
  public final static int SPELLABILITY_PULSE_LIGHTNING = 285;
  public final static int SPELLABILITY_PULSE_NEGATIVE = 287;
  public final static int SPELLABILITY_PULSE_POISON = 297;
  public final static int SPELLABILITY_PULSE_SPORES = 282;
  public final static int SPELLABILITY_PULSE_WHIRLWIND = 283;
  public final static int SPELLABILITY_QUIVERING_PALM = 310;
  public final static int SPELLABILITY_RAGE_3 = 299;
  public final static int SPELLABILITY_RAGE_4 = 300;
  public final static int SPELLABILITY_RAGE_5 = 301;
  public final static int SPELLABILITY_REMOVE_DISEASE = 316;
  public final static int SPELLABILITY_ROGUES_CUNNING = 385;
  public final static int SPELLABILITY_SEAHAG_EVILEYE = 803;
  public final static int SPELLABILITY_SMITE_EVIL = 315;
  public final static int SPELLABILITY_SMOKE_CLAW = 302;
  public final static int SPELLABILITY_SUMMON_ANIMAL_COMPANION = 317;
  public final static int SPELLABILITY_SUMMON_CELESTIAL = 379;
  public final static int SPELLABILITY_SUMMON_FAMILIAR = 318;
  public final static int SPELLABILITY_SUMMON_MEPHIT = 378;
  public final static int SPELLABILITY_SUMMON_SLAAD = 303;
  public final static int SPELLABILITY_SUMMON_TANARRI = 304;
  public final static int SPELLABILITY_TOUCH_PETRIFY = 496;
  public final static int SPELLABILITY_TROGLODYTE_STENCH = 805;
  public final static int SPELLABILITY_TRUMPET_BLAST = 305;
  public final static int SPELLABILITY_TURN_UNDEAD = 308;
  public final static int SPELLABILITY_TYRANT_FOG_MIST = 306;
  public final static int SPELLABILITY_WHIRLWIND = 561;
  public final static int SPELLABILITY_WHOLENESS_OF_BODY = 309;
  public final static int SPELLABILITY_WILD_SHAPE = 320;
  public final static int SPELL_ACID_FOG = 0;
  public final static int SPELL_ACID_SPLASH = 424;
  public final static int SPELL_ACTIVATE_ITEM_PORTAL = 472;
  public final static int SPELL_ACTIVATE_ITEM_SELF2 = 428;
  public final static int SPELL_AID = 1;
  public final static int SPELL_ALL_SPELLS = -1;
  public final static int SPELL_AMPLIFY = 442;
  public final static int SPELL_ANIMATE_DEAD = 2;
  public final static int SPELL_AURAOFGLORY = 429;
  public final static int SPELL_AURA_OF_VITALITY = 372;
  public final static int SPELL_AWAKEN = 363;
  public final static int SPELL_BALAGARNSIRONHORN = 436;
  public final static int SPELL_BALL_LIGHTNING = 516;
  public final static int SPELL_BANE = 449;
  public final static int SPELL_BANISHMENT = 430;
  public final static int SPELL_BARKSKIN = 3;
  public final static int SPELL_BATTLETIDE = 517;
  public final static int SPELL_BESTOW_CURSE = 4;
  public final static int SPELL_BIGBYS_CLENCHED_FIST = 462;
  public final static int SPELL_BIGBYS_CRUSHING_HAND = 463;
  public final static int SPELL_BIGBYS_FORCEFUL_HAND = 460;
  public final static int SPELL_BIGBYS_GRASPING_HAND = 461;
  public final static int SPELL_BIGBYS_INTERPOSING_HAND = 459;
  public final static int SPELL_BLACKSTAFF = 541;
  public final static int SPELL_BLACK_BLADE_OF_DISASTER = 533;
  public final static int SPELL_BLADE_BARRIER = 5;
  public final static int SPELL_BLADE_THIRST = 535;
  public final static int SPELL_BLESS = 6;
  public final static int SPELL_BLESS_WEAPON = 537;
  public final static int SPELL_BLINDNESS_AND_DEAFNESS = 8;
  public final static int SPELL_BLOOD_FRENZY = 422;
  public final static int SPELL_BOMBARDMENT = 423;
  public final static int SPELL_BULLS_STRENGTH = 9;
  public final static int SPELL_BURNING_HANDS = 10;
  public final static int SPELL_CALL_LIGHTNING = 11;
  public final static int SPELL_CAMOFLAGE = 421;
  public final static int SPELL_CATS_GRACE = 13;
  public final static int SPELL_CHAIN_LIGHTNING = 14;
  public final static int SPELL_CHARGER = 500;
  public final static int SPELL_CHARM_MONSTER = 15;
  public final static int SPELL_CHARM_PERSON = 16;
  public final static int SPELL_CHARM_PERSON_OR_ANIMAL = 17;
  public final static int SPELL_CIRCLE_OF_DEATH = 18;
  public final static int SPELL_CIRCLE_OF_DOOM = 19;
  public final static int SPELL_CLAIRAUDIENCE_AND_CLAIRVOYANCE = 20;
  public final static int SPELL_CLARITY = 21;
  public final static int SPELL_CLOAK_OF_CHAOS = 22;
  public final static int SPELL_CLOUDKILL = 23;
  public final static int SPELL_CLOUD_OF_BEWILDERMENT = 569;
  public final static int SPELL_COLOR_SPRAY = 24;
  public final static int SPELL_COMBUST = 518;
  public final static int SPELL_CONE_OF_COLD = 25;
  public final static int SPELL_CONFUSION = 26;
  public final static int SPELL_CONTAGION = 27;
  public final static int SPELL_CONTINUAL_FLAME = 419;
  public final static int SPELL_CONTROL_UNDEAD = 28;
  public final static int SPELL_CRAFT_ADD_ITEM_PROPERTY = 654;
  public final static int SPELL_CRAFT_CRAFT_ARMOR_SKILL = 657;
  public final static int SPELL_CRAFT_CRAFT_WEAPON_SKILL = 656;
  public final static int SPELL_CRAFT_DYE_CLOTHCOLOR_1 = 648;
  public final static int SPELL_CRAFT_DYE_CLOTHCOLOR_2 = 649;
  public final static int SPELL_CRAFT_DYE_LEATHERCOLOR_1 = 650;
  public final static int SPELL_CRAFT_DYE_LEATHERCOLOR_2 = 651;
  public final static int SPELL_CRAFT_DYE_METALCOLOR_1 = 652;
  public final static int SPELL_CRAFT_DYE_METALCOLOR_2 = 653;
  public final static int SPELL_CRAFT_HARPER_ITEM = 479;
  public final static int SPELL_CRAFT_POISON_WEAPON_OR_AMMO = 655;
  public final static int SPELL_CREATE_GREATER_UNDEAD = 29;
  public final static int SPELL_CREATE_UNDEAD = 30;
  public final static int SPELL_CREEPING_DOOM = 364;
  public final static int SPELL_CRUMBLE = 512;
  public final static int SPELL_CURE_CRITICAL_WOUNDS = 31;
  public final static int SPELL_CURE_LIGHT_WOUNDS = 32;
  public final static int SPELL_CURE_MINOR_WOUNDS = 33;
  public final static int SPELL_CURE_MODERATE_WOUNDS = 34;
  public final static int SPELL_CURE_SERIOUS_WOUNDS = 35;
  public final static int SPELL_DARKFIRE = 548;
  public final static int SPELL_DARKNESS = 36;
  public final static int SPELL_DARKVISION = 365;
  public final static int SPELL_DAZE = 37;
  public final static int SPELL_DEAFENING_CLANG = 536;
  public final static int SPELL_DEATH_ARMOR = 519;
  public final static int SPELL_DEATH_WARD = 38;
  public final static int SPELL_DECHARGER = 510;
  public final static int SPELL_DECK_AVATAR = 503;
  public final static int SPELL_DECK_BUTTERFLYSPRAY = 505;
  public final static int SPELL_DECK_GEMSPRAY = 504;
  public final static int SPELL_DECK_OF_MANY_THINGS = 500;
  public final static int SPELL_DELAYED_BLAST_FIREBALL = 39;
  public final static int SPELL_DESTRUCTION = 366;
  public final static int SPELL_DIRGE = 445;
  public final static int SPELL_DISMISSAL = 40;
  public final static int SPELL_DISPEL_MAGIC = 41;
  public final static int SPELL_DISPLACEMENT = 458;
  public final static int SPELL_DIVINE_FAVOR = 414;
  public final static int SPELL_DIVINE_MIGHT = 473;
  public final static int SPELL_DIVINE_POWER = 42;
  public final static int SPELL_DIVINE_SHIELD = 474;
  public final static int SPELL_DOMINATE_ANIMAL = 43;
  public final static int SPELL_DOMINATE_MONSTER = 44;
  public final static int SPELL_DOMINATE_PERSON = 45;
  public final static int SPELL_DOOM = 46;
  public final static int SPELL_DROWN = 437;
  public final static int SPELL_EAGLE_SPLEDOR = 354;
  public final static int SPELL_EARTHQUAKE = 426;
  public final static int SPELL_ELECTRIC_JOLT = 439;
  public final static int SPELL_ELEMENTAL_SHIELD = 47;
  public final static int SPELL_ELEMENTAL_SUMMONING_ITEM = 502;
  public final static int SPELL_ELEMENTAL_SWARM = 48;
  public final static int SPELL_ENDURANCE = 49;
  public final static int SPELL_ENDURE_ELEMENTS = 50;
  public final static int SPELL_ENERGY_BUFFER = 369;
  public final static int SPELL_ENERGY_DRAIN = 51;
  public final static int SPELL_ENERVATION = 52;
  public final static int SPELL_ENTANGLE = 53;
  public final static int SPELL_ENTROPIC_SHIELD = 418;
  public final static int SPELL_EPIC_DRAGON_KNIGHT = 638;
  public final static int SPELL_EPIC_HELLBALL = 636;
  public final static int SPELL_EPIC_MAGE_ARMOR = 639;
  public final static int SPELL_EPIC_MUMMY_DUST = 637;
  public final static int SPELL_EPIC_RUIN = 640;
  public final static int SPELL_ETHEREALNESS = 443;
  public final static int SPELL_ETHEREAL_VISAGE = 121;
  public final static int SPELL_EVARDS_BLACK_TENTACLES = 375;
  public final static int SPELL_EXPEDITIOUS_RETREAT = 456;
  public final static int SPELL_FEAR = 54;
  public final static int SPELL_FEEBLEMIND = 55;
  public final static int SPELL_FIND_TRAPS = 377;
  public final static int SPELL_FINGER_OF_DEATH = 56;
  public final static int SPELL_FIREBALL = 58;
  public final static int SPELL_FIREBRAND = 440;
  public final static int SPELL_FIRE_STORM = 57;
  public final static int SPELL_FLAME_ARROW = 59;
  public final static int SPELL_FLAME_LASH = 60;
  public final static int SPELL_FLAME_STRIKE = 61;
  public final static int SPELL_FLAME_WEAPON = 542;
  public final static int SPELL_FLARE = 416;
  public final static int SPELL_FLESH_TO_STONE = 485;
  public final static int SPELL_FLYING_DEBRIS = 620;
  public final static int SPELL_FOXS_CUNNING = 356;
  public final static int SPELL_FREEDOM_OF_MOVEMENT = 62;
  public final static int SPELL_GATE = 63;
  public final static int SPELL_GEDLEES_ELECTRIC_LOOP = 520;
  public final static int SPELL_GHOSTLY_VISAGE = 120;
  public final static int SPELL_GHOUL_TOUCH = 64;
  public final static int SPELL_GLOBE_OF_INVULNERABILITY = 65;
  public final static int SPELL_GLYPH_OF_WARDING = 549;
  public final static int SPELL_GREASE = 66;
  public final static int SPELL_GREATER_BULLS_STRENGTH = 360;
  public final static int SPELL_GREATER_CATS_GRACE = 361;
  public final static int SPELL_GREATER_DISPELLING = 67;
  public final static int SPELL_GREATER_EAGLE_SPLENDOR = 357;
  public final static int SPELL_GREATER_ENDURANCE = 362;
  public final static int SPELL_GREATER_FOXS_CUNNING = 359;
  public final static int SPELL_GREATER_MAGIC_FANG = 453;
  public final static int SPELL_GREATER_MAGIC_WEAPON = 545;
  public final static int SPELL_GREATER_OWLS_WISDOM = 358;
  public final static int SPELL_GREATER_PLANAR_BINDING = 69;
  public final static int SPELL_GREATER_RESTORATION = 70;
  public final static int SPELL_GREATER_SHADOW_CONJURATION_ACID_ARROW = 350;
  public final static int SPELL_GREATER_SHADOW_CONJURATION_MINOR_GLOBE = 353;
  public final static int SPELL_GREATER_SHADOW_CONJURATION_MIRROR_IMAGE = 351;
  public final static int SPELL_GREATER_SHADOW_CONJURATION_SUMMON_SHADOW = 349;
  public final static int SPELL_GREATER_SHADOW_CONJURATION_WEB = 352;
  public final static int SPELL_GREATER_SPELL_BREACH = 72;
  public final static int SPELL_GREATER_SPELL_MANTLE = 73;
  public final static int SPELL_GREATER_STONESKIN = 74;
  public final static int SPELL_GREAT_THUNDERCLAP = 515;
  public final static int SPELL_GRENADE_ACID = 469;
  public final static int SPELL_GRENADE_CALTROPS = 471;
  public final static int SPELL_GRENADE_CHICKEN = 470;
  public final static int SPELL_GRENADE_CHOKING = 467;
  public final static int SPELL_GRENADE_FIRE = 464;
  public final static int SPELL_GRENADE_HOLY = 466;
  public final static int SPELL_GRENADE_TANGLE = 465;
  public final static int SPELL_GRENADE_THUNDERSTONE = 468;
  public final static int SPELL_GUST_OF_WIND = 75;
  public final static int SPELL_HAMMER_OF_THE_GODS = 76;
  public final static int SPELL_HARM = 77;
  public final static int SPELL_HASTE = 78;
  public final static int SPELL_HEAL = 79;
  public final static int SPELL_HEALINGKIT = 506;
  public final static int SPELL_HEALING_CIRCLE = 80;
  public final static int SPELL_HEALING_STING = 514;
  public final static int SPELL_HOLD_ANIMAL = 81;
  public final static int SPELL_HOLD_MONSTER = 82;
  public final static int SPELL_HOLD_PERSON = 83;
  public final static int SPELL_HOLY_AURA = 84;
  public final static int SPELL_HOLY_SWORD = 538;
  public final static int SPELL_HORIZIKAULS_BOOM = 521;
  public final static int SPELL_HORRID_WILTING = 367;
  public final static int SPELL_HORSE_ASSIGN_MOUNT = 817;
  public final static int SPELL_HORSE_DISMOUNT = 814;
  public final static int SPELL_HORSE_MENU = 812;
  public final static int SPELL_HORSE_MOUNT = 813;
  public final static int SPELL_HORSE_PARTY_DISMOUNT = 816;
  public final static int SPELL_HORSE_PARTY_MOUNT = 815;
  public final static int SPELL_ICE_DAGGER = 543;
  public final static int SPELL_ICE_STORM = 368;
  public final static int SPELL_IDENTIFY = 86;
  public final static int SPELL_IMPLOSION = 87;
  public final static int SPELL_IMPROVED_INVISIBILITY = 88;
  public final static int SPELL_INCENDIARY_CLOUD = 89;
  public final static int SPELL_INFERNO = 446;
  public final static int SPELL_INFESTATION_OF_MAGGOTS = 513;
  public final static int SPELL_INFLICT_CRITICAL_WOUNDS = 435;
  public final static int SPELL_INFLICT_LIGHT_WOUNDS = 432;
  public final static int SPELL_INFLICT_MINOR_WOUNDS = 431;
  public final static int SPELL_INFLICT_MODERATE_WOUNDS = 433;
  public final static int SPELL_INFLICT_SERIOUS_WOUNDS = 434;
  public final static int SPELL_INVISIBILITY = 90;
  public final static int SPELL_INVISIBILITY_PURGE = 91;
  public final static int SPELL_INVISIBILITY_SPHERE = 92;
  public final static int SPELL_IOUN_STONE_BLUE = 557;
  public final static int SPELL_IOUN_STONE_DEEP_RED = 558;
  public final static int SPELL_IOUN_STONE_DUSTY_ROSE = 554;
  public final static int SPELL_IOUN_STONE_PALE_BLUE = 555;
  public final static int SPELL_IOUN_STONE_PINK = 559;
  public final static int SPELL_IOUN_STONE_PINK_GREEN = 560;
  public final static int SPELL_IOUN_STONE_SCARLET_BLUE = 556;
  public final static int SPELL_IRONGUTS = 522;
  public final static int SPELL_ISAACS_GREATER_MISSILE_STORM = 448;
  public final static int SPELL_ISAACS_LESSER_MISSILE_STORM = 447;
  public final static int SPELL_KEEN_EDGE = 539;
  public final static int SPELL_KNOCK = 93;
  public final static int SPELL_KOBOLD_JUMP = 511;
  public final static int SPELL_LEGEND_LORE = 376;
  public final static int SPELL_LESSER_DISPEL = 94;
  public final static int SPELL_LESSER_MIND_BLANK = 95;
  public final static int SPELL_LESSER_PLANAR_BINDING = 96;
  public final static int SPELL_LESSER_RESTORATION = 97;
  public final static int SPELL_LESSER_SPELL_BREACH = 98;
  public final static int SPELL_LESSER_SPELL_MANTLE = 99;
  public final static int SPELL_LIGHT = 100;
  public final static int SPELL_LIGHTNING_BOLT = 101;
  public final static int SPELL_MAGE_ARMOR = 102;
  public final static int SPELL_MAGIC_CIRCLE_AGAINST_CHAOS = 103;
  public final static int SPELL_MAGIC_CIRCLE_AGAINST_EVIL = 104;
  public final static int SPELL_MAGIC_CIRCLE_AGAINST_GOOD = 105;
  public final static int SPELL_MAGIC_CIRCLE_AGAINST_LAW = 106;
  public final static int SPELL_MAGIC_FANG = 452;
  public final static int SPELL_MAGIC_MISSILE = 107;
  public final static int SPELL_MAGIC_VESTMENT = 546;
  public final static int SPELL_MAGIC_WEAPON = 544;
  public final static int SPELL_MASS_BLINDNESS_AND_DEAFNESS = 110;
  public final static int SPELL_MASS_CAMOFLAGE = 455;
  public final static int SPELL_MASS_CHARM = 111;
  public final static int SPELL_MASS_HASTE = 113;
  public final static int SPELL_MASS_HEAL = 114;
  public final static int SPELL_MELFS_ACID_ARROW = 115;
  public final static int SPELL_MESTILS_ACID_BREATH = 523;
  public final static int SPELL_MESTILS_ACID_SHEATH = 524;
  public final static int SPELL_METEOR_SWARM = 116;
  public final static int SPELL_MIND_BLANK = 117;
  public final static int SPELL_MIND_FOG = 118;
  public final static int SPELL_MINOR_GLOBE_OF_INVULNERABILITY = 119;
  public final static int SPELL_MONSTROUS_REGENERATION = 525;
  public final static int SPELL_MORDENKAINENS_DISJUNCTION = 122;
  public final static int SPELL_MORDENKAINENS_SWORD = 123;
  public final static int SPELL_NATURES_BALANCE = 124;
  public final static int SPELL_NEGATIVE_ENERGY_BURST = 370;
  public final static int SPELL_NEGATIVE_ENERGY_PROTECTION = 125;
  public final static int SPELL_NEGATIVE_ENERGY_RAY = 371;
  public final static int SPELL_NEUTRALIZE_POISON = 126;
  public final static int SPELL_ONE_WITH_THE_LAND = 420;
  public final static int SPELL_OWLS_INSIGHT = 438;
  public final static int SPELL_OWLS_WISDOM = 355;
  public final static int SPELL_PALADIN_SUMMON_MOUNT = 818;
  public final static int SPELL_PHANTASMAL_KILLER = 127;
  public final static int SPELL_PLANAR_ALLY = 451;
  public final static int SPELL_PLANAR_BINDING = 128;
  public final static int SPELL_POISON = 129;
  public final static int SPELL_POLYMORPH_SELF = 130;
  public final static int SPELL_POWERSTONE = 507;
  public final static int SPELL_POWER_WORD_KILL = 131;
  public final static int SPELL_POWER_WORD_STUN = 132;
  public final static int SPELL_PRAYER = 133;
  public final static int SPELL_PREMONITION = 134;
  public final static int SPELL_PRISMATIC_SPRAY = 135;
  public final static int SPELL_PROTECTION_FROM_ELEMENTS = 137;
  public final static int SPELL_PROTECTION_FROM_EVIL = 138;
  public final static int SPELL_PROTECTION_FROM_GOOD = 139;
  public final static int SPELL_PROTECTION_FROM_LAW = 140;
  public final static int SPELL_PROTECTION_FROM_SPELLS = 141;
  public final static int SPELL_PROTECTION__FROM_CHAOS = 136;
  public final static int SPELL_QUILLFIRE = 425;
  public final static int SPELL_RAISE_DEAD = 142;
  public final static int SPELL_RAY_OF_ENFEEBLEMENT = 143;
  public final static int SPELL_RAY_OF_FROST = 144;
  public final static int SPELL_REGENERATE = 374;
  public final static int SPELL_REMOVE_BLINDNESS_AND_DEAFNESS = 145;
  public final static int SPELL_REMOVE_CURSE = 146;
  public final static int SPELL_REMOVE_DISEASE = 147;
  public final static int SPELL_REMOVE_FEAR = 148;
  public final static int SPELL_REMOVE_PARALYSIS = 149;
  public final static int SPELL_RESISTANCE = 151;
  public final static int SPELL_RESIST_ELEMENTS = 150;
  public final static int SPELL_RESTORATION = 152;
  public final static int SPELL_RESURRECTION = 153;
  public final static int SPELL_ROD_OF_WONDER = 499;
  public final static int SPELL_SANCTUARY = 154;
  public final static int SPELL_SCARE = 155;
  public final static int SPELL_SCHOOL_ABJURATION = 1;
  public final static int SPELL_SCHOOL_CONJURATION = 2;
  public final static int SPELL_SCHOOL_DIVINATION = 3;
  public final static int SPELL_SCHOOL_ENCHANTMENT = 4;
  public final static int SPELL_SCHOOL_EVOCATION = 5;
  public final static int SPELL_SCHOOL_GENERAL = 0;
  public final static int SPELL_SCHOOL_ILLUSION = 6;
  public final static int SPELL_SCHOOL_NECROMANCY = 7;
  public final static int SPELL_SCHOOL_TRANSMUTATION = 8;
  public final static int SPELL_SCINTILLATING_SPHERE = 526;
  public final static int SPELL_SEARING_LIGHT = 156;
  public final static int SPELL_SEE_INVISIBILITY = 157;
  public final static int SPELL_SHADES_CONE_OF_COLD = 340;
  public final static int SPELL_SHADES_FIREBALL = 341;
  public final static int SPELL_SHADES_STONESKIN = 342;
  public final static int SPELL_SHADES_SUMMON_SHADOW = 324;
  public final static int SPELL_SHADES_WALL_OF_FIRE = 343;
  public final static int SPELL_SHADOW_CONJURATION_DARKNESS = 345;
  public final static int SPELL_SHADOW_CONJURATION_INIVSIBILITY = 346;
  public final static int SPELL_SHADOW_CONJURATION_MAGE_ARMOR = 347;
  public final static int SPELL_SHADOW_CONJURATION_MAGIC_MISSILE = 348;
  public final static int SPELL_SHADOW_CONJURATION_SUMMON_SHADOW = 344;
  public final static int SPELL_SHADOW_DAZE = 475;
  public final static int SPELL_SHADOW_EVADE = 477;
  public final static int SPELL_SHADOW_SHIELD = 160;
  public final static int SPELL_SHAPECHANGE = 161;
  public final static int SPELL_SHELGARNS_PERSISTENT_BLADE = 534;
  public final static int SPELL_SHIELD = 417;
  public final static int SPELL_SHIELD_OF_FAITH = 450;
  public final static int SPELL_SHIELD_OF_LAW = 162;
  public final static int SPELL_SILENCE = 163;
  public final static int SPELL_SLAY_LIVING = 164;
  public final static int SPELL_SLEEP = 165;
  public final static int SPELL_SLOW = 166;
  public final static int SPELL_SOUND_BURST = 167;
  public final static int SPELL_SPELLSTAFF = 508;
  public final static int SPELL_SPELL_MANTLE = 169;
  public final static int SPELL_SPELL_RESISTANCE = 168;
  public final static int SPELL_SPHERE_OF_CHAOS = 170;
  public final static int SPELL_SPIKE_GROWTH = 454;
  public final static int SPELL_STINKING_CLOUD = 171;
  public final static int SPELL_STONEHOLD = 547;
  public final static int SPELL_STONESKIN = 172;
  public final static int SPELL_STONE_BONES = 527;
  public final static int SPELL_STONE_TO_FLESH = 486;
  public final static int SPELL_STORM_OF_VENGEANCE = 173;
  public final static int SPELL_SUMMON_CREATURE_I = 174;
  public final static int SPELL_SUMMON_CREATURE_II = 175;
  public final static int SPELL_SUMMON_CREATURE_III = 176;
  public final static int SPELL_SUMMON_CREATURE_IV = 177;
  public final static int SPELL_SUMMON_CREATURE_IX = 178;
  public final static int SPELL_SUMMON_CREATURE_V = 179;
  public final static int SPELL_SUMMON_CREATURE_VI = 180;
  public final static int SPELL_SUMMON_CREATURE_VII = 181;
  public final static int SPELL_SUMMON_CREATURE_VIII = 182;
  public final static int SPELL_SUMMON_SHADOW = 476;
  public final static int SPELL_SUNBEAM = 183;
  public final static int SPELL_SUNBURST = 427;
  public final static int SPELL_TASHAS_HIDEOUS_LAUGHTER = 457;
  public final static int SPELL_TENSERS_TRANSFORMATION = 184;
  public final static int SPELL_TIME_STOP = 185;
  public final static int SPELL_TRAP_ARROW = 487;
  public final static int SPELL_TRAP_BOLT = 488;
  public final static int SPELL_TRAP_DART = 493;
  public final static int SPELL_TRAP_SHURIKEN = 494;
  public final static int SPELL_TRUE_SEEING = 186;
  public final static int SPELL_TRUE_STRIKE = 415;
  public final static int SPELL_TYMORAS_SMILE = 478;
  public final static int SPELL_UNDEATHS_ETERNAL_FOE = 444;
  public final static int SPELL_UNDEATH_TO_DEATH = 528;
  public final static int SPELL_UNHOLY_AURA = 187;
  public final static int SPELL_VAMPIRIC_TOUCH = 188;
  public final static int SPELL_VINE_MINE = 529;
  public final static int SPELL_VINE_MINE_CAMOUFLAGE = 532;
  public final static int SPELL_VINE_MINE_ENTANGLE = 530;
  public final static int SPELL_VINE_MINE_HAMPER_MOVEMENT = 531;
  public final static int SPELL_VIRTUE = 189;
  public final static int SPELL_WAIL_OF_THE_BANSHEE = 190;
  public final static int SPELL_WALL_OF_FIRE = 191;
  public final static int SPELL_WAR_CRY = 373;
  public final static int SPELL_WEB = 192;
  public final static int SPELL_WEIRD = 193;
  public final static int SPELL_WORD_OF_FAITH = 194;
  public final static int SPELL_WOUNDING_WHISPERS = 441;
  public final static int STANDARD_FACTION_COMMONER = 1;
  public final static int STANDARD_FACTION_DEFENDER = 3;
  public final static int STANDARD_FACTION_HOSTILE = 0;
  public final static int STANDARD_FACTION_MERCHANT = 2;
  public final static int STEALTH_MODE_ACTIVATED = 1;
  public final static int STEALTH_MODE_DISABLED = 0;
  public final static int SUBSKILL_EXAMINETRAP = 102;
  public final static int SUBSKILL_FLAGTRAP = 100;
  public final static int SUBSKILL_RECOVERTRAP = 101;
  public final static int SUBTYPE_EXTRAORDINARY = 24;
  public final static int SUBTYPE_MAGICAL = 8;
  public final static int SUBTYPE_SUPERNATURAL = 16;
  public final static int TALENT_CATEGORY_BENEFICIAL_CONDITIONAL_AREAEFFECT = 6;
  public final static int TALENT_CATEGORY_BENEFICIAL_CONDITIONAL_POTION = 18;
  public final static int TALENT_CATEGORY_BENEFICIAL_CONDITIONAL_SINGLE = 7;
  public final static int TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_AREAEFFECT = 8;
  public final static int TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_POTION = 21;
  public final static int TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_SELF = 10;
  public final static int TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_SINGLE = 9;
  public final static int TALENT_CATEGORY_BENEFICIAL_HEALING_AREAEFFECT = 4;
  public final static int TALENT_CATEGORY_BENEFICIAL_HEALING_POTION = 17;
  public final static int TALENT_CATEGORY_BENEFICIAL_HEALING_TOUCH = 5;
  public final static int TALENT_CATEGORY_BENEFICIAL_OBTAIN_ALLIES = 15;
  public final static int TALENT_CATEGORY_BENEFICIAL_PROTECTION_AREAEFFECT = 14;
  public final static int TALENT_CATEGORY_BENEFICIAL_PROTECTION_POTION = 20;
  public final static int TALENT_CATEGORY_BENEFICIAL_PROTECTION_SELF = 12;
  public final static int TALENT_CATEGORY_BENEFICIAL_PROTECTION_SINGLE = 13;
  public final static int TALENT_CATEGORY_DRAGONS_BREATH = 19;
  public final static int TALENT_CATEGORY_HARMFUL_AREAEFFECT_DISCRIMINANT = 1;
  public final static int TALENT_CATEGORY_HARMFUL_AREAEFFECT_INDISCRIMINANT = 11;
  public final static int TALENT_CATEGORY_HARMFUL_MELEE = 22;
  public final static int TALENT_CATEGORY_HARMFUL_RANGED = 2;
  public final static int TALENT_CATEGORY_HARMFUL_TOUCH = 3;
  public final static int TALENT_CATEGORY_PERSISTENT_AREA_OF_EFFECT = 16;
  public final static int TALENT_TYPE_FEAT = 1;
  public final static int TALENT_TYPE_SKILL = 2;
  public final static int TALENT_TYPE_SPELL = 0;
  public final static int TALKVOLUME_PARTY = 5;
  public final static int TALKVOLUME_SHOUT = 2;
  public final static int TALKVOLUME_SILENT_SHOUT = 4;
  public final static int TALKVOLUME_SILENT_TALK = 3;
  public final static int TALKVOLUME_TALK = 0;
  public final static int TALKVOLUME_TELL = 6;
  public final static int TALKVOLUME_WHISPER = 1;
  public final static String TILESET_RESREF_BEHOLDER_CAVES = "tib01";
  public final static String TILESET_RESREF_CASTLE_INTERIOR = "tic01";
  public final static String TILESET_RESREF_CITY_EXTERIOR = "tcn01";
  public final static String TILESET_RESREF_CITY_INTERIOR = "tin01";
  public final static String TILESET_RESREF_CRYPT = "tdc01";
  public final static String TILESET_RESREF_DESERT = "ttd01";
  public final static String TILESET_RESREF_DROW_INTERIOR = "tid01";
  public final static String TILESET_RESREF_DUNGEON = "tde01";
  public final static String TILESET_RESREF_FOREST = "ttf01";
  public final static String TILESET_RESREF_FROZEN_WASTES = "tti01";
  public final static String TILESET_RESREF_ILLITHID_INTERIOR = "tii01";
  public final static String TILESET_RESREF_MICROSET = "tms01";
  public final static String TILESET_RESREF_MINES_AND_CAVERNS = "tdm01";
  public final static String TILESET_RESREF_RUINS = "tdr01";
  public final static String TILESET_RESREF_RURAL = "ttr01";
  public final static String TILESET_RESREF_RURAL_WINTER = "tts01";
  public final static String TILESET_RESREF_SEWERS = "tds01";
  public final static String TILESET_RESREF_UNDERDARK = "ttu01";
  public final static int TILE_MAIN_LIGHT_COLOR_AQUA = 15;
  public final static int TILE_MAIN_LIGHT_COLOR_BLACK = 0;
  public final static int TILE_MAIN_LIGHT_COLOR_BLUE = 19;
  public final static int TILE_MAIN_LIGHT_COLOR_BRIGHT_WHITE = 3;
  public final static int TILE_MAIN_LIGHT_COLOR_DARK_AQUA = 13;
  public final static int TILE_MAIN_LIGHT_COLOR_DARK_BLUE = 17;
  public final static int TILE_MAIN_LIGHT_COLOR_DARK_GREEN = 9;
  public final static int TILE_MAIN_LIGHT_COLOR_DARK_ORANGE = 29;
  public final static int TILE_MAIN_LIGHT_COLOR_DARK_PURPLE = 21;
  public final static int TILE_MAIN_LIGHT_COLOR_DARK_RED = 25;
  public final static int TILE_MAIN_LIGHT_COLOR_DARK_YELLOW = 5;
  public final static int TILE_MAIN_LIGHT_COLOR_DIM_WHITE = 1;
  public final static int TILE_MAIN_LIGHT_COLOR_GREEN = 11;
  public final static int TILE_MAIN_LIGHT_COLOR_ORANGE = 31;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_AQUA = 14;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_BLUE = 18;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_DARK_AQUA = 12;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_DARK_BLUE = 16;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_DARK_GREEN = 8;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_DARK_ORANGE = 28;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_DARK_PURPLE = 20;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_DARK_RED = 24;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_DARK_YELLOW = 4;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_GREEN = 10;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_ORANGE = 30;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_PURPLE = 22;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_RED = 26;
  public final static int TILE_MAIN_LIGHT_COLOR_PALE_YELLOW = 6;
  public final static int TILE_MAIN_LIGHT_COLOR_PURPLE = 23;
  public final static int TILE_MAIN_LIGHT_COLOR_RED = 27;
  public final static int TILE_MAIN_LIGHT_COLOR_WHITE = 2;
  public final static int TILE_MAIN_LIGHT_COLOR_YELLOW = 7;
  public final static int TILE_SOURCE_LIGHT_COLOR_BLACK = 0;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_AQUA = 7;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_BLUE = 9;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_DARK_AQUA = 6;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_DARK_BLUE = 8;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_DARK_GREEN = 4;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_DARK_ORANGE = 14;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_DARK_PURPLE = 10;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_DARK_RED = 12;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_DARK_YELLOW = 2;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_GREEN = 5;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_ORANGE = 15;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_PURPLE = 11;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_RED = 13;
  public final static int TILE_SOURCE_LIGHT_COLOR_PALE_YELLOW = 3;
  public final static int TILE_SOURCE_LIGHT_COLOR_WHITE = 1;
  public final static int TRACK_BATTLE_ARIBETH = 47;
  public final static int TRACK_BATTLE_CITY1 = 40;
  public final static int TRACK_BATTLE_CITY2 = 41;
  public final static int TRACK_BATTLE_CITY3 = 42;
  public final static int TRACK_BATTLE_CITYBOSS = 43;
  public final static int TRACK_BATTLE_DESERT = 57;
  public final static int TRACK_BATTLE_DRAGON = 46;
  public final static int TRACK_BATTLE_DUNGEON1 = 37;
  public final static int TRACK_BATTLE_DUNGEON2 = 38;
  public final static int TRACK_BATTLE_DUNGEON3 = 39;
  public final static int TRACK_BATTLE_ENDBOSS = 48;
  public final static int TRACK_BATTLE_FOREST1 = 35;
  public final static int TRACK_BATTLE_FOREST2 = 36;
  public final static int TRACK_BATTLE_FORESTBOSS = 44;
  public final static int TRACK_BATTLE_LIZARDBOSS = 45;
  public final static int TRACK_BATTLE_RURAL1 = 34;
  public final static int TRACK_BATTLE_WINTER = 60;
  public final static int TRACK_CASTLE = 50;
  public final static int TRACK_CITYDOCKDAY = 17;
  public final static int TRACK_CITYDOCKNIGHT = 18;
  public final static int TRACK_CITYMARKET = 20;
  public final static int TRACK_CITYNIGHT = 21;
  public final static int TRACK_CITYSLUMDAY = 15;
  public final static int TRACK_CITYSLUMNIGHT = 16;
  public final static int TRACK_CITYWEALTHY = 19;
  public final static int TRACK_CRYPT1 = 11;
  public final static int TRACK_CRYPT2 = 12;
  public final static int TRACK_DESERT_DAY = 58;
  public final static int TRACK_DESERT_NIGHT = 61;
  public final static int TRACK_DUNGEON1 = 7;
  public final static int TRACK_EVILDUNGEON1 = 13;
  public final static int TRACK_EVILDUNGEON2 = 14;
  public final static int TRACK_FORESTDAY1 = 4;
  public final static int TRACK_FORESTDAY2 = 5;
  public final static int TRACK_FORESTNIGHT = 6;
  public final static int TRACK_HOTU_BATTLE_BOSS1 = 74;
  public final static int TRACK_HOTU_BATTLE_BOSS2 = 75;
  public final static int TRACK_HOTU_BATTLE_HELL = 73;
  public final static int TRACK_HOTU_BATTLE_LARGE = 72;
  public final static int TRACK_HOTU_BATTLE_MED = 71;
  public final static int TRACK_HOTU_BATTLE_SMALL = 70;
  public final static int TRACK_HOTU_DRACOLICH = 69;
  public final static int TRACK_HOTU_FIREPLANE = 66;
  public final static int TRACK_HOTU_HELLFROZEOVER = 68;
  public final static int TRACK_HOTU_QUEEN = 67;
  public final static int TRACK_HOTU_REBELCAMP = 65;
  public final static int TRACK_HOTU_THEME = 62;
  public final static int TRACK_HOTU_UNDERMOUNTAIN = 64;
  public final static int TRACK_HOTU_WATERDEEP = 63;
  public final static int TRACK_MINES1 = 9;
  public final static int TRACK_MINES2 = 10;
  public final static int TRACK_RICHHOUSE = 25;
  public final static int TRACK_RURALDAY1 = 1;
  public final static int TRACK_RURALDAY2 = 2;
  public final static int TRACK_RURALNIGHT = 3;
  public final static int TRACK_SEWER = 8;
  public final static int TRACK_STORE = 26;
  public final static int TRACK_TAVERN1 = 22;
  public final static int TRACK_TAVERN2 = 23;
  public final static int TRACK_TAVERN3 = 24;
  public final static int TRACK_TAVERN4 = 56;
  public final static int TRACK_TEMPLEEVIL = 28;
  public final static int TRACK_TEMPLEGOOD = 27;
  public final static int TRACK_TEMPLEGOOD2 = 49;
  public final static int TRACK_THEME_ARIBETH1 = 51;
  public final static int TRACK_THEME_ARIBETH2 = 52;
  public final static int TRACK_THEME_CHAPTER1 = 30;
  public final static int TRACK_THEME_CHAPTER2 = 31;
  public final static int TRACK_THEME_CHAPTER3 = 32;
  public final static int TRACK_THEME_CHAPTER4 = 33;
  public final static int TRACK_THEME_GEND = 53;
  public final static int TRACK_THEME_MAUGRIM = 54;
  public final static int TRACK_THEME_MORAG = 55;
  public final static int TRACK_THEME_NWN = 29;
  public final static int TRACK_WINTER_DAY = 59;
  public final static int TRAP_BASE_TYPE_AVERAGE_ACID = 13;
  public final static int TRAP_BASE_TYPE_AVERAGE_ACID_SPLASH = 41;
  public final static int TRAP_BASE_TYPE_AVERAGE_ELECTRICAL = 21;
  public final static int TRAP_BASE_TYPE_AVERAGE_FIRE = 17;
  public final static int TRAP_BASE_TYPE_AVERAGE_FROST = 29;
  public final static int TRAP_BASE_TYPE_AVERAGE_GAS = 25;
  public final static int TRAP_BASE_TYPE_AVERAGE_HOLY = 5;
  public final static int TRAP_BASE_TYPE_AVERAGE_NEGATIVE = 33;
  public final static int TRAP_BASE_TYPE_AVERAGE_SONIC = 37;
  public final static int TRAP_BASE_TYPE_AVERAGE_SPIKE = 1;
  public final static int TRAP_BASE_TYPE_AVERAGE_TANGLE = 9;
  public final static int TRAP_BASE_TYPE_DEADLY_ACID = 15;
  public final static int TRAP_BASE_TYPE_DEADLY_ACID_SPLASH = 43;
  public final static int TRAP_BASE_TYPE_DEADLY_ELECTRICAL = 23;
  public final static int TRAP_BASE_TYPE_DEADLY_FIRE = 19;
  public final static int TRAP_BASE_TYPE_DEADLY_FROST = 31;
  public final static int TRAP_BASE_TYPE_DEADLY_GAS = 27;
  public final static int TRAP_BASE_TYPE_DEADLY_HOLY = 7;
  public final static int TRAP_BASE_TYPE_DEADLY_NEGATIVE = 35;
  public final static int TRAP_BASE_TYPE_DEADLY_SONIC = 39;
  public final static int TRAP_BASE_TYPE_DEADLY_SPIKE = 3;
  public final static int TRAP_BASE_TYPE_DEADLY_TANGLE = 11;
  public final static int TRAP_BASE_TYPE_EPIC_ELECTRICAL = 44;
  public final static int TRAP_BASE_TYPE_EPIC_FIRE = 45;
  public final static int TRAP_BASE_TYPE_EPIC_FROST = 46;
  public final static int TRAP_BASE_TYPE_EPIC_SONIC = 47;
  public final static int TRAP_BASE_TYPE_MINOR_ACID = 12;
  public final static int TRAP_BASE_TYPE_MINOR_ACID_SPLASH = 40;
  public final static int TRAP_BASE_TYPE_MINOR_ELECTRICAL = 20;
  public final static int TRAP_BASE_TYPE_MINOR_FIRE = 16;
  public final static int TRAP_BASE_TYPE_MINOR_FROST = 28;
  public final static int TRAP_BASE_TYPE_MINOR_GAS = 24;
  public final static int TRAP_BASE_TYPE_MINOR_HOLY = 4;
  public final static int TRAP_BASE_TYPE_MINOR_NEGATIVE = 32;
  public final static int TRAP_BASE_TYPE_MINOR_SONIC = 36;
  public final static int TRAP_BASE_TYPE_MINOR_SPIKE = 0;
  public final static int TRAP_BASE_TYPE_MINOR_TANGLE = 8;
  public final static int TRAP_BASE_TYPE_STRONG_ACID = 14;
  public final static int TRAP_BASE_TYPE_STRONG_ACID_SPLASH = 42;
  public final static int TRAP_BASE_TYPE_STRONG_ELECTRICAL = 22;
  public final static int TRAP_BASE_TYPE_STRONG_FIRE = 18;
  public final static int TRAP_BASE_TYPE_STRONG_FROST = 30;
  public final static int TRAP_BASE_TYPE_STRONG_GAS = 26;
  public final static int TRAP_BASE_TYPE_STRONG_HOLY = 6;
  public final static int TRAP_BASE_TYPE_STRONG_NEGATIVE = 34;
  public final static int TRAP_BASE_TYPE_STRONG_SONIC = 38;
  public final static int TRAP_BASE_TYPE_STRONG_SPIKE = 2;
  public final static int TRAP_BASE_TYPE_STRONG_TANGLE = 10;
  public final static int TRUE = 1;
  public final static int USE_CREATURE_LEVEL = 0;
  public final static int VFX_BEAM_BLACK = 485;
  public final static int VFX_BEAM_CHAIN = 484;
  public final static int VFX_BEAM_COLD = 211;
  public final static int VFX_BEAM_DISINTEGRATE = 447;
  public final static int VFX_BEAM_EVIL = 214;
  public final static int VFX_BEAM_FIRE = 210;
  public final static int VFX_BEAM_FIRE_LASH = 216;
  public final static int VFX_BEAM_FIRE_W = 482;
  public final static int VFX_BEAM_FIRE_W_SILENT = 483;
  public final static int VFX_BEAM_HOLY = 212;
  public final static int VFX_BEAM_LIGHTNING = 73 ;
  public final static int VFX_BEAM_MIND = 213;
  public final static int VFX_BEAM_ODD = 215;
  public final static int VFX_BEAM_SILENT_COLD = 309;
  public final static int VFX_BEAM_SILENT_EVIL = 312;
  public final static int VFX_BEAM_SILENT_FIRE = 308;
  public final static int VFX_BEAM_SILENT_HOLY = 310;
  public final static int VFX_BEAM_SILENT_LIGHTNING = 307;
  public final static int VFX_BEAM_SILENT_MIND = 311;
  public final static int VFX_BEAM_SILENT_ODD = 313;
  public final static int VFX_COM_BLOOD_CRT_GREEN = 116 ;
  public final static int VFX_COM_BLOOD_CRT_RED = 115 ;
  public final static int VFX_COM_BLOOD_CRT_WIMP = 108 ;
  public final static int VFX_COM_BLOOD_CRT_YELLOW = 117 ;
  public final static int VFX_COM_BLOOD_LRG_GREEN = 113 ;
  public final static int VFX_COM_BLOOD_LRG_RED = 112 ;
  public final static int VFX_COM_BLOOD_LRG_WIMP = 107 ;
  public final static int VFX_COM_BLOOD_LRG_YELLOW = 114 ;
  public final static int VFX_COM_BLOOD_REG_GREEN = 110 ;
  public final static int VFX_COM_BLOOD_REG_RED = 109 ;
  public final static int VFX_COM_BLOOD_REG_WIMP = 106 ;
  public final static int VFX_COM_BLOOD_REG_YELLOW = 111 ;
  public final static int VFX_COM_BLOOD_SPARK_LARGE = 239;
  public final static int VFX_COM_BLOOD_SPARK_MEDIUM = 238;
  public final static int VFX_COM_BLOOD_SPARK_SMALL = 237;
  public final static int VFX_COM_CHUNK_BONE_MEDIUM = 236;
  public final static int VFX_COM_CHUNK_GREEN_MEDIUM = 124 ;
  public final static int VFX_COM_CHUNK_GREEN_SMALL = 123 ;
  public final static int VFX_COM_CHUNK_RED_BALLISTA = 504;
  public final static int VFX_COM_CHUNK_RED_LARGE = 235;
  public final static int VFX_COM_CHUNK_RED_MEDIUM = 122 ;
  public final static int VFX_COM_CHUNK_RED_SMALL = 121 ;
  public final static int VFX_COM_CHUNK_STONE_MEDIUM = 354;
  public final static int VFX_COM_CHUNK_STONE_SMALL = 353;
  public final static int VFX_COM_CHUNK_YELLOW_MEDIUM = 126 ;
  public final static int VFX_COM_CHUNK_YELLOW_SMALL = 125 ;
  public final static int VFX_COM_HIT_ACID = 283;
  public final static int VFX_COM_HIT_DIVINE = 289;
  public final static int VFX_COM_HIT_ELECTRICAL = 282;
  public final static int VFX_COM_HIT_FIRE = 280;
  public final static int VFX_COM_HIT_FROST = 281;
  public final static int VFX_COM_HIT_NEGATIVE = 288;
  public final static int VFX_COM_HIT_SONIC = 284;
  public final static int VFX_COM_SPARKS_PARRY = 118 ;
  public final static int VFX_COM_SPECIAL_BLUE_RED = 100 ;
  public final static int VFX_COM_SPECIAL_PINK_ORANGE = 101 ;
  public final static int VFX_COM_SPECIAL_RED_ORANGE = 103 ;
  public final static int VFX_COM_SPECIAL_RED_WHITE = 102 ;
  public final static int VFX_COM_SPECIAL_WHITE_BLUE = 104 ;
  public final static int VFX_COM_SPECIAL_WHITE_ORANGE = 105 ;
  public final static int VFX_COM_UNLOAD_MODEL = 120 ;
  public final static int VFX_DUR_ANTI_LIGHT_10 = 248;
  public final static int VFX_DUR_ARROW_IN_BACK = 635;
  public final static int VFX_DUR_ARROW_IN_CHEST_LEFT = 633;
  public final static int VFX_DUR_ARROW_IN_CHEST_RIGHT = 634;
  public final static int VFX_DUR_ARROW_IN_FACE = 637;
  public final static int VFX_DUR_ARROW_IN_HEAD = 638;
  public final static int VFX_DUR_ARROW_IN_STERNUM = 632;
  public final static int VFX_DUR_ARROW_IN_TEMPLES = 636;
  public final static int VFX_DUR_AURA_BLUE = 550;
  public final static int VFX_DUR_AURA_BLUE_DARK = 562;
  public final static int VFX_DUR_AURA_BLUE_LIGHT = 563;
  public final static int VFX_DUR_AURA_BROWN = 555;
  public final static int VFX_DUR_AURA_COLD = 267;
  public final static int VFX_DUR_AURA_CYAN = 557;
  public final static int VFX_DUR_AURA_DISEASE = 270;
  public final static int VFX_DUR_AURA_DRAGON_FEAR = 291;
  public final static int VFX_DUR_AURA_FIRE = 268;
  public final static int VFX_DUR_AURA_GREEN = 549;
  public final static int VFX_DUR_AURA_GREEN_DARK = 558;
  public final static int VFX_DUR_AURA_GREEN_LIGHT = 559;
  public final static int VFX_DUR_AURA_MAGENTA = 551;
  public final static int VFX_DUR_AURA_ODD = 271;
  public final static int VFX_DUR_AURA_ORANGE = 554;
  public final static int VFX_DUR_AURA_POISON = 269;
  public final static int VFX_DUR_AURA_PULSE_BLUE_BLACK = 529;
  public final static int VFX_DUR_AURA_PULSE_BLUE_GREEN = 523;
  public final static int VFX_DUR_AURA_PULSE_BLUE_WHITE = 513;
  public final static int VFX_DUR_AURA_PULSE_BLUE_YELLOW = 528;
  public final static int VFX_DUR_AURA_PULSE_BROWN_BLACK = 536;
  public final static int VFX_DUR_AURA_PULSE_BROWN_WHITE = 519;
  public final static int VFX_DUR_AURA_PULSE_CYAN_BLACK = 534;
  public final static int VFX_DUR_AURA_PULSE_CYAN_BLUE = 539;
  public final static int VFX_DUR_AURA_PULSE_CYAN_GREEN = 538;
  public final static int VFX_DUR_AURA_PULSE_CYAN_RED = 540;
  public final static int VFX_DUR_AURA_PULSE_CYAN_WHITE = 517;
  public final static int VFX_DUR_AURA_PULSE_CYAN_YELLOW = 541;
  public final static int VFX_DUR_AURA_PULSE_GREEN_BLACK = 531;
  public final static int VFX_DUR_AURA_PULSE_GREEN_WHITE = 514;
  public final static int VFX_DUR_AURA_PULSE_GREEN_YELLOW = 526;
  public final static int VFX_DUR_AURA_PULSE_GREY_BLACK = 522;
  public final static int VFX_DUR_AURA_PULSE_GREY_WHITE = 521;
  public final static int VFX_DUR_AURA_PULSE_MAGENTA_BLACK = 533;
  public final static int VFX_DUR_AURA_PULSE_MAGENTA_BLUE = 542;
  public final static int VFX_DUR_AURA_PULSE_MAGENTA_GREEN = 544;
  public final static int VFX_DUR_AURA_PULSE_MAGENTA_RED = 543;
  public final static int VFX_DUR_AURA_PULSE_MAGENTA_WHITE = 516;
  public final static int VFX_DUR_AURA_PULSE_MAGENTA_YELLOW = 545;
  public final static int VFX_DUR_AURA_PULSE_ORANGE_BLACK = 535;
  public final static int VFX_DUR_AURA_PULSE_ORANGE_WHITE = 518;
  public final static int VFX_DUR_AURA_PULSE_PURPLE_BLACK = 537;
  public final static int VFX_DUR_AURA_PULSE_PURPLE_WHITE = 520;
  public final static int VFX_DUR_AURA_PULSE_RED_BLACK = 530;
  public final static int VFX_DUR_AURA_PULSE_RED_BLUE = 524;
  public final static int VFX_DUR_AURA_PULSE_RED_GREEN = 527;
  public final static int VFX_DUR_AURA_PULSE_RED_ORANGE = 546;
  public final static int VFX_DUR_AURA_PULSE_RED_WHITE = 512;
  public final static int VFX_DUR_AURA_PULSE_RED_YELLOW = 525;
  public final static int VFX_DUR_AURA_PULSE_YELLOW_BLACK = 532;
  public final static int VFX_DUR_AURA_PULSE_YELLOW_ORANGE = 547;
  public final static int VFX_DUR_AURA_PULSE_YELLOW_WHITE = 515;
  public final static int VFX_DUR_AURA_PURPLE = 556;
  public final static int VFX_DUR_AURA_RED = 548;
  public final static int VFX_DUR_AURA_RED_DARK = 560;
  public final static int VFX_DUR_AURA_RED_LIGHT = 561;
  public final static int VFX_DUR_AURA_SILENCE = 272;
  public final static int VFX_DUR_AURA_WHITE = 553;
  public final static int VFX_DUR_AURA_YELLOW = 552;
  public final static int VFX_DUR_AURA_YELLOW_DARK = 564;
  public final static int VFX_DUR_AURA_YELLOW_LIGHT = 565;
  public final static int VFX_DUR_BARD_SONG = 277;
  public final static int VFX_DUR_BIGBYS_CLENCHED_FIST = 316;
  public final static int VFX_DUR_BIGBYS_CRUSHING_HAND = 317;
  public final static int VFX_DUR_BIGBYS_GRASPING_HAND = 318;
  public final static int VFX_DUR_BIGBYS_INTERPOSING_HAND = 314;
  public final static int VFX_DUR_BLACKOUT = 5;
  public final static int VFX_DUR_BLIND = 247;
  public final static int VFX_DUR_BLINDVISION = 242;
  public final static int VFX_DUR_BLUR = 0;
  public final static int VFX_DUR_BUBBLES = 566;
  public final static int VFX_DUR_CALTROPS = 319;
  public final static int VFX_DUR_CESSATE_NEGATIVE = 207;
  public final static int VFX_DUR_CESSATE_NEUTRAL = 205;
  public final static int VFX_DUR_CESSATE_POSITIVE = 206;
  public final static int VFX_DUR_CUTSCENE_INVISIBILITY = 355;
  public final static int VFX_DUR_DARKNESS = 1;
  public final static int VFX_DUR_DARKVISION = 182;
  public final static int VFX_DUR_DEATH_ARMOR = 463;
  public final static int VFX_DUR_ELEMENTAL_SHIELD = 147;
  public final static int VFX_DUR_ENTANGLE = 2;
  public final static int VFX_DUR_ETHEREAL_VISAGE = 10;
  public final static int VFX_DUR_FLAG_BLUE = 304;
  public final static int VFX_DUR_FLAG_GOLD = 305;
  public final static int VFX_DUR_FLAG_GOLD_FIXED = 306;
  public final static int VFX_DUR_FLAG_PURPLE = 306;
  public final static int VFX_DUR_FLAG_PURPLE_FIXED = 305;
  public final static int VFX_DUR_FLAG_RED = 303;
  public final static int VFX_DUR_FLIES = 480;
  public final static int VFX_DUR_FREEDOM_OF_MOVEMENT = 3;
  public final static int VFX_DUR_FREEZE_ANIMATION = 352;
  public final static int VFX_DUR_GHOSTLY_PULSE = 240;
  public final static int VFX_DUR_GHOSTLY_VISAGE = 9;
  public final static int VFX_DUR_GHOSTLY_VISAGE_NO_SOUND = 478;
  public final static int VFX_DUR_GHOST_SMOKE = 425;
  public final static int VFX_DUR_GHOST_SMOKE_2 = 479;
  public final static int VFX_DUR_GHOST_TRANSPARENT = 424;
  public final static int VFX_DUR_GLOBE_INVULNERABILITY = 4;
  public final static int VFX_DUR_GLOBE_MINOR = 220;
  public final static int VFX_DUR_GLOW_BLUE = 410;
  public final static int VFX_DUR_GLOW_BROWN = 419;
  public final static int VFX_DUR_GLOW_GREEN = 415;
  public final static int VFX_DUR_GLOW_GREY = 421;
  public final static int VFX_DUR_GLOW_LIGHT_BLUE = 408;
  public final static int VFX_DUR_GLOW_LIGHT_BROWN = 420;
  public final static int VFX_DUR_GLOW_LIGHT_GREEN = 416;
  public final static int VFX_DUR_GLOW_LIGHT_ORANGE = 418;
  public final static int VFX_DUR_GLOW_LIGHT_PURPLE = 423;
  public final static int VFX_DUR_GLOW_LIGHT_RED = 412;
  public final static int VFX_DUR_GLOW_LIGHT_YELLOW = 414;
  public final static int VFX_DUR_GLOW_ORANGE = 417;
  public final static int VFX_DUR_GLOW_PURPLE = 409;
  public final static int VFX_DUR_GLOW_RED = 411;
  public final static int VFX_DUR_GLOW_WHITE = 422;
  public final static int VFX_DUR_GLOW_YELLOW = 413;
  public final static int VFX_DUR_GLYPH_OF_WARDING = 445;
  public final static int VFX_DUR_ICESKIN = 465;
  public final static int VFX_DUR_INFERNO = 474;
  public final static int VFX_DUR_INFERNO_CHEST = 498;
  public final static int VFX_DUR_INFERNO_NO_SOUND = 505;
  public final static int VFX_DUR_INVISIBILITY = 6;
  public final static int VFX_DUR_IOUNSTONE = 403;
  public final static int VFX_DUR_IOUNSTONE_BLUE = 500;
  public final static int VFX_DUR_IOUNSTONE_GREEN = 502;
  public final static int VFX_DUR_IOUNSTONE_RED = 499;
  public final static int VFX_DUR_IOUNSTONE_YELLOW = 501;
  public final static int VFX_DUR_LIGHT = 148;
  public final static int VFX_DUR_LIGHT_BLUE_10 = 154;
  public final static int VFX_DUR_LIGHT_BLUE_15 = 155;
  public final static int VFX_DUR_LIGHT_BLUE_20 = 156;
  public final static int VFX_DUR_LIGHT_BLUE_5 = 153;
  public final static int VFX_DUR_LIGHT_GREY_10 = 178;
  public final static int VFX_DUR_LIGHT_GREY_15 = 179;
  public final static int VFX_DUR_LIGHT_GREY_20 = 180;
  public final static int VFX_DUR_LIGHT_GREY_5 = 177;
  public final static int VFX_DUR_LIGHT_ORANGE_10 = 170;
  public final static int VFX_DUR_LIGHT_ORANGE_15 = 171;
  public final static int VFX_DUR_LIGHT_ORANGE_20 = 172;
  public final static int VFX_DUR_LIGHT_ORANGE_5 = 169;
  public final static int VFX_DUR_LIGHT_PURPLE_10 = 162;
  public final static int VFX_DUR_LIGHT_PURPLE_15 = 163;
  public final static int VFX_DUR_LIGHT_PURPLE_20 = 164;
  public final static int VFX_DUR_LIGHT_PURPLE_5 = 161;
  public final static int VFX_DUR_LIGHT_RED_10 = 166;
  public final static int VFX_DUR_LIGHT_RED_15 = 167;
  public final static int VFX_DUR_LIGHT_RED_20 = 168;
  public final static int VFX_DUR_LIGHT_RED_5 = 165;
  public final static int VFX_DUR_LIGHT_WHITE_10 = 174;
  public final static int VFX_DUR_LIGHT_WHITE_15 = 175;
  public final static int VFX_DUR_LIGHT_WHITE_20 = 176;
  public final static int VFX_DUR_LIGHT_WHITE_5 = 173;
  public final static int VFX_DUR_LIGHT_YELLOW_10 = 158;
  public final static int VFX_DUR_LIGHT_YELLOW_15 = 159;
  public final static int VFX_DUR_LIGHT_YELLOW_20 = 160;
  public final static int VFX_DUR_LIGHT_YELLOW_5 = 157;
  public final static int VFX_DUR_LOWLIGHTVISION = 243;
  public final static int VFX_DUR_MAGICAL_SIGHT = 229;
  public final static int VFX_DUR_MAGIC_RESISTANCE = 249;
  public final static int VFX_DUR_MIND_AFFECTING_DISABLED = 208;
  public final static int VFX_DUR_MIND_AFFECTING_DOMINATED = 209;
  public final static int VFX_DUR_MIND_AFFECTING_FEAR = 218;
  public final static int VFX_DUR_MIND_AFFECTING_NEGATIVE = 7;
  public final static int VFX_DUR_MIND_AFFECTING_POSITIVE = 8;
  public final static int VFX_DUR_MIRV_ACID = 245;
  public final static int VFX_DUR_PARALYZED = 232;
  public final static int VFX_DUR_PARALYZE_HOLD = 82 ;
  public final static int VFX_DUR_PDK_FEAR = 628;
  public final static int VFX_DUR_PETRIFY = 351;
  public final static int VFX_DUR_PIXIEDUST = 321;
  public final static int VFX_DUR_PROTECTION_ELEMENTS = 224;
  public final static int VFX_DUR_PROTECTION_EVIL_MAJOR = 228;
  public final static int VFX_DUR_PROTECTION_EVIL_MINOR = 227;
  public final static int VFX_DUR_PROTECTION_GOOD_MAJOR = 226;
  public final static int VFX_DUR_PROTECTION_GOOD_MINOR = 225;
  public final static int VFX_DUR_PROT_BARKSKIN = 11;
  public final static int VFX_DUR_PROT_EPIC_ARMOR = 495;
  public final static int VFX_DUR_PROT_EPIC_ARMOR_2 = 497;
  public final static int VFX_DUR_PROT_GREATER_STONESKIN = 12;
  public final static int VFX_DUR_PROT_PREMONITION = 13;
  public final static int VFX_DUR_PROT_SHADOW_ARMOR = 14;
  public final static int VFX_DUR_PROT_STONESKIN = 15;
  public final static int VFX_DUR_QUILL_IN_CHEST = 639;
  public final static int VFX_DUR_SANCTUARY = 16;
  public final static int VFX_DUR_SMOKE = 320;
  public final static int VFX_DUR_SPELLTURNING = 138;
  public final static int VFX_DUR_STONEHOLD = 476;
  public final static int VFX_DUR_TENTACLE = 346;
  public final static int VFX_DUR_ULTRAVISION = 244;
  public final static int VFX_DUR_WEB = 17;
  public final static int VFX_DUR_WEB_MASS = 230;
  public final static int VFX_EYES_CYN_DWARF_FEMALE = 596;
  public final static int VFX_EYES_CYN_DWARF_MALE = 595;
  public final static int VFX_EYES_CYN_ELF_FEMALE = 598;
  public final static int VFX_EYES_CYN_ELF_MALE = 597;
  public final static int VFX_EYES_CYN_GNOME_FEMALE = 600;
  public final static int VFX_EYES_CYN_GNOME_MALE = 599;
  public final static int VFX_EYES_CYN_HALFLING_FEMALE = 602;
  public final static int VFX_EYES_CYN_HALFLING_MALE = 601;
  public final static int VFX_EYES_CYN_HALFORC_FEMALE = 604;
  public final static int VFX_EYES_CYN_HALFORC_MALE = 603;
  public final static int VFX_EYES_CYN_HUMAN_FEMALE = 594;
  public final static int VFX_EYES_CYN_HUMAN_MALE = 593;
  public final static int VFX_EYES_CYN_TROGLODYTE = 605;
  public final static int VFX_EYES_GREEN_DWARF_FEMALE = 570;
  public final static int VFX_EYES_GREEN_DWARF_MALE = 569;
  public final static int VFX_EYES_GREEN_ELF_FEMALE = 572;
  public final static int VFX_EYES_GREEN_ELF_MALE = 571;
  public final static int VFX_EYES_GREEN_GNOME_FEMALE = 574;
  public final static int VFX_EYES_GREEN_GNOME_MALE = 573;
  public final static int VFX_EYES_GREEN_HALFELF_FEMALE = 568;
  public final static int VFX_EYES_GREEN_HALFELF_MALE = 567;
  public final static int VFX_EYES_GREEN_HALFLING_FEMALE = 576;
  public final static int VFX_EYES_GREEN_HALFLING_MALE = 575;
  public final static int VFX_EYES_GREEN_HALFORC_FEMALE = 578;
  public final static int VFX_EYES_GREEN_HALFORC_MALE = 577;
  public final static int VFX_EYES_GREEN_HUMAN_FEMALE = 568;
  public final static int VFX_EYES_GREEN_HUMAN_MALE = 567;
  public final static int VFX_EYES_GREEN_TROGLODYTE = 579;
  public final static int VFX_EYES_ORG_DWARF_FEMALE = 389;
  public final static int VFX_EYES_ORG_DWARF_MALE = 388;
  public final static int VFX_EYES_ORG_ELF_FEMALE = 391;
  public final static int VFX_EYES_ORG_ELF_MALE = 390;
  public final static int VFX_EYES_ORG_GNOME_FEMALE = 393;
  public final static int VFX_EYES_ORG_GNOME_MALE = 392;
  public final static int VFX_EYES_ORG_HALFLING_FEMALE = 395;
  public final static int VFX_EYES_ORG_HALFLING_MALE = 394;
  public final static int VFX_EYES_ORG_HALFORC_FEMALE = 397;
  public final static int VFX_EYES_ORG_HALFORC_MALE = 396;
  public final static int VFX_EYES_ORG_HUMAN_FEMALE = 387;
  public final static int VFX_EYES_ORG_HUMAN_MALE = 386;
  public final static int VFX_EYES_ORG_TROGLODYTE = 398;
  public final static int VFX_EYES_PUR_DWARF_FEMALE = 583;
  public final static int VFX_EYES_PUR_DWARF_MALE = 582;
  public final static int VFX_EYES_PUR_ELF_FEMALE = 585;
  public final static int VFX_EYES_PUR_ELF_MALE = 584;
  public final static int VFX_EYES_PUR_GNOME_FEMALE = 587;
  public final static int VFX_EYES_PUR_GNOME_MALE = 586;
  public final static int VFX_EYES_PUR_HALFLING_FEMALE = 589;
  public final static int VFX_EYES_PUR_HALFLING_MALE = 588;
  public final static int VFX_EYES_PUR_HALFORC_FEMALE = 591;
  public final static int VFX_EYES_PUR_HALFORC_MALE = 590;
  public final static int VFX_EYES_PUR_HUMAN_FEMALE = 581;
  public final static int VFX_EYES_PUR_HUMAN_MALE = 580;
  public final static int VFX_EYES_PUR_TROGLODYTE = 592;
  public final static int VFX_EYES_RED_FLAME_DWARF_FEMALE = 363;
  public final static int VFX_EYES_RED_FLAME_DWARF_MALE = 362;
  public final static int VFX_EYES_RED_FLAME_ELF_FEMALE = 365;
  public final static int VFX_EYES_RED_FLAME_ELF_MALE = 364;
  public final static int VFX_EYES_RED_FLAME_GNOME_FEMALE = 367;
  public final static int VFX_EYES_RED_FLAME_GNOME_MALE = 366;
  public final static int VFX_EYES_RED_FLAME_HALFELF_FEMALE = 361;
  public final static int VFX_EYES_RED_FLAME_HALFELF_MALE = 360;
  public final static int VFX_EYES_RED_FLAME_HALFLING_FEMALE = 369;
  public final static int VFX_EYES_RED_FLAME_HALFLING_MALE = 368;
  public final static int VFX_EYES_RED_FLAME_HALFORC_FEMALE = 371;
  public final static int VFX_EYES_RED_FLAME_HALFORC_MALE = 370;
  public final static int VFX_EYES_RED_FLAME_HUMAN_FEMALE = 361;
  public final static int VFX_EYES_RED_FLAME_HUMAN_MALE = 360;
  public final static int VFX_EYES_RED_FLAME_TROGLODYTE = 372;
  public final static int VFX_EYES_WHT_DWARF_FEMALE = 609;
  public final static int VFX_EYES_WHT_DWARF_MALE = 608;
  public final static int VFX_EYES_WHT_ELF_FEMALE = 611;
  public final static int VFX_EYES_WHT_ELF_MALE = 610;
  public final static int VFX_EYES_WHT_GNOME_FEMALE = 613;
  public final static int VFX_EYES_WHT_GNOME_MALE = 612;
  public final static int VFX_EYES_WHT_HALFLING_FEMALE = 615;
  public final static int VFX_EYES_WHT_HALFLING_MALE = 614;
  public final static int VFX_EYES_WHT_HALFORC_FEMALE = 617;
  public final static int VFX_EYES_WHT_HALFORC_MALE = 616;
  public final static int VFX_EYES_WHT_HUMAN_FEMALE = 607;
  public final static int VFX_EYES_WHT_HUMAN_MALE = 606;
  public final static int VFX_EYES_WHT_TROGLODYTE = 618;
  public final static int VFX_EYES_YEL_DWARF_FEMALE = 376;
  public final static int VFX_EYES_YEL_DWARF_MALE = 375;
  public final static int VFX_EYES_YEL_ELF_FEMALE = 378;
  public final static int VFX_EYES_YEL_ELF_MALE = 377;
  public final static int VFX_EYES_YEL_GNOME_FEMALE = 380;
  public final static int VFX_EYES_YEL_GNOME_MALE = 379;
  public final static int VFX_EYES_YEL_HALFLING_FEMALE = 382;
  public final static int VFX_EYES_YEL_HALFLING_MALE = 381;
  public final static int VFX_EYES_YEL_HALFORC_FEMALE = 384;
  public final static int VFX_EYES_YEL_HALFORC_MALE = 383;
  public final static int VFX_EYES_YEL_HUMAN_FEMALE = 374;
  public final static int VFX_EYES_YEL_HUMAN_MALE = 373;
  public final static int VFX_EYES_YEL_TROGLODYTE = 385;
  public final static int VFX_FNF_BLINDDEAF = 18;
  public final static int VFX_FNF_DECK = 322;
  public final static int VFX_FNF_DEMON_HAND = 475;
  public final static int VFX_FNF_DISPEL = 19;
  public final static int VFX_FNF_DISPEL_DISJUNCTION = 20;
  public final static int VFX_FNF_DISPEL_GREATER = 21 ;
  public final static int VFX_FNF_ELECTRIC_EXPLOSION = 459;
  public final static int VFX_FNF_FIREBALL = 22 ;
  public final static int VFX_FNF_FIRESTORM = 23 ;
  public final static int VFX_FNF_GAS_EXPLOSION_ACID = 257;
  public final static int VFX_FNF_GAS_EXPLOSION_EVIL = 258;
  public final static int VFX_FNF_GAS_EXPLOSION_FIRE = 260;
  public final static int VFX_FNF_GAS_EXPLOSION_GREASE = 261;
  public final static int VFX_FNF_GAS_EXPLOSION_MIND = 262;
  public final static int VFX_FNF_GAS_EXPLOSION_NATURE = 259;
  public final static int VFX_FNF_GREATER_RUIN = 487;
  public final static int VFX_FNF_HORRID_WILTING = 241;
  public final static int VFX_FNF_HOWL_MIND = 278;
  public final static int VFX_FNF_HOWL_ODD = 279;
  public final static int VFX_FNF_HOWL_WAR_CRY = 285;
  public final static int VFX_FNF_HOWL_WAR_CRY_FEMALE = 290;
  public final static int VFX_FNF_ICESTORM = 231;
  public final static int VFX_FNF_IMPLOSION = 24 ;
  public final static int VFX_FNF_LOS_EVIL_10 = 185;
  public final static int VFX_FNF_LOS_EVIL_20 = 186;
  public final static int VFX_FNF_LOS_EVIL_30 = 187;
  public final static int VFX_FNF_LOS_HOLY_10 = 188;
  public final static int VFX_FNF_LOS_HOLY_20 = 189;
  public final static int VFX_FNF_LOS_HOLY_30 = 190;
  public final static int VFX_FNF_LOS_NORMAL_10 = 191;
  public final static int VFX_FNF_LOS_NORMAL_20 = 192;
  public final static int VFX_FNF_LOS_NORMAL_30 = 193;
  public final static int VFX_FNF_MASS_HEAL = 26 ;
  public final static int VFX_FNF_MASS_MIND_AFFECTING = 27 ;
  public final static int VFX_FNF_METEOR_SWARM = 28 ;
  public final static int VFX_FNF_MYSTICAL_EXPLOSION = 477;
  public final static int VFX_FNF_NATURES_BALANCE = 29 ;
  public final static int VFX_FNF_PWKILL = 30 ;
  public final static int VFX_FNF_PWSTUN = 31 ;
  public final static int VFX_FNF_SCREEN_BUMP = 287;
  public final static int VFX_FNF_SCREEN_SHAKE = 286;
  public final static int VFX_FNF_SMOKE_PUFF = 263;
  public final static int VFX_FNF_SOUND_BURST = 183;
  public final static int VFX_FNF_SOUND_BURST_SILENT = 446;
  public final static int VFX_FNF_STORM = 151;
  public final static int VFX_FNF_STRIKE_HOLY = 184;
  public final static int VFX_FNF_SUMMONDRAGON = 481;
  public final static int VFX_FNF_SUMMON_CELESTIAL = 219;
  public final static int VFX_FNF_SUMMON_EPIC_UNDEAD = 496;
  public final static int VFX_FNF_SUMMON_GATE = 32 ;
  public final static int VFX_FNF_SUMMON_MONSTER_1 = 33 ;
  public final static int VFX_FNF_SUMMON_MONSTER_2 = 34 ;
  public final static int VFX_FNF_SUMMON_MONSTER_3 = 35 ;
  public final static int VFX_FNF_SUMMON_UNDEAD = 36 ;
  public final static int VFX_FNF_SUNBEAM = 37 ;
  public final static int VFX_FNF_SWINGING_BLADE = 473;
  public final static int VFX_FNF_TIME_STOP = 38 ;
  public final static int VFX_FNF_UNDEAD_DRAGON = 488;
  public final static int VFX_FNF_WAIL_O_BANSHEES = 39 ;
  public final static int VFX_FNF_WEIRD = 40 ;
  public final static int VFX_FNF_WORD = 41 ;
  public final static int VFX_IMP_ACID_L = 43 ;
  public final static int VFX_IMP_ACID_S = 44 ;
  public final static int VFX_IMP_AC_BONUS = 42 ;
  public final static int VFX_IMP_AURA_FEAR = 275;
  public final static int VFX_IMP_AURA_HOLY = 273;
  public final static int VFX_IMP_AURA_NEGATIVE_ENERGY = 276;
  public final static int VFX_IMP_AURA_UNEARTHLY = 274;
  public final static int VFX_IMP_BIGBYS_FORCEFUL_HAND = 315;
  public final static int VFX_IMP_BLIND_DEAF_M = 46 ;
  public final static int VFX_IMP_BREACH = 47 ;
  public final static int VFX_IMP_CHARM = 140;
  public final static int VFX_IMP_CONFUSION_S = 48 ;
  public final static int VFX_IMP_DAZED_S = 49 ;
  public final static int VFX_IMP_DEATH = 50 ;
  public final static int VFX_IMP_DEATH_L = 217;
  public final static int VFX_IMP_DEATH_WARD = 146;
  public final static int VFX_IMP_DESTRUCTION = 234;
  public final static int VFX_IMP_DISEASE_S = 51 ;
  public final static int VFX_IMP_DISPEL = 52 ;
  public final static int VFX_IMP_DISPEL_DISJUNCTION = 53 ;
  public final static int VFX_IMP_DIVINE_STRIKE_FIRE = 54 ;
  public final static int VFX_IMP_DIVINE_STRIKE_HOLY = 55 ;
  public final static int VFX_IMP_DOMINATE_S = 56 ;
  public final static int VFX_IMP_DOOM = 57 ;
  public final static int VFX_IMP_DUST_EXPLOSION = 460;
  public final static int VFX_IMP_ELEMENTAL_PROTECTION = 152;
  public final static int VFX_IMP_EVIL_HELP = 144;
  public final static int VFX_IMP_FEAR_S = 58 ;
  public final static int VFX_IMP_FLAME_M = 60 ;
  public final static int VFX_IMP_FLAME_S = 61 ;
  public final static int VFX_IMP_FORTITUDE_SAVING_THROW_USE = 255;
  public final static int VFX_IMP_FROST_L = 62 ;
  public final static int VFX_IMP_FROST_S = 63 ;
  public final static int VFX_IMP_GLOBE_USE = 251;
  public final static int VFX_IMP_GOOD_HELP = 145;
  public final static int VFX_IMP_GREASE = 64 ;
  public final static int VFX_IMP_HARM = 246;
  public final static int VFX_IMP_HASTE = 65 ;
  public final static int VFX_IMP_HEAD_ACID = 194;
  public final static int VFX_IMP_HEAD_COLD = 198;
  public final static int VFX_IMP_HEAD_ELECTRICITY = 197;
  public final static int VFX_IMP_HEAD_EVIL = 203;
  public final static int VFX_IMP_HEAD_FIRE = 195;
  public final static int VFX_IMP_HEAD_HEAL = 201;
  public final static int VFX_IMP_HEAD_HOLY = 199;
  public final static int VFX_IMP_HEAD_MIND = 202;
  public final static int VFX_IMP_HEAD_NATURE = 200;
  public final static int VFX_IMP_HEAD_ODD = 204;
  public final static int VFX_IMP_HEAD_SONIC = 196;
  public final static int VFX_IMP_HEALING_G = 66 ;
  public final static int VFX_IMP_HEALING_L = 67 ;
  public final static int VFX_IMP_HEALING_M = 68 ;
  public final static int VFX_IMP_HEALING_S = 69 ;
  public final static int VFX_IMP_HEALING_X = 70 ;
  public final static int VFX_IMP_HOLY_AID = 71 ;
  public final static int VFX_IMP_IMPROVE_ABILITY_SCORE = 139;
  public final static int VFX_IMP_KNOCK = 72 ;
  public final static int VFX_IMP_LIGHTNING_M = 74 ;
  public final static int VFX_IMP_LIGHTNING_S = 75 ;
  public final static int VFX_IMP_MAGBLUE = 76 ;
  public final static int VFX_IMP_MAGICAL_VISION = 141;
  public final static int VFX_IMP_MAGIC_PROTECTION = 149;
  public final static int VFX_IMP_MAGIC_RESISTANCE_USE = 250;
  public final static int VFX_IMP_MIRV = 181;
  public final static int VFX_IMP_MIRV_ELECTRIC = 503;
  public final static int VFX_IMP_MIRV_FLAME = 233;
  public final static int VFX_IMP_NEGATIVE_ENERGY = 81 ;
  public final static int VFX_IMP_NIGHTMARE_HEAD_HIT = 670;
  public final static int VFX_IMP_PDK_FINAL_STAND = 631;
  public final static int VFX_IMP_PDK_GENERIC_HEAD_HIT = 624;
  public final static int VFX_IMP_PDK_GENERIC_PULSE = 623;
  public final static int VFX_IMP_PDK_HEROIC_SHIELD = 626;
  public final static int VFX_IMP_PDK_INSPIRE_COURAGE = 627;
  public final static int VFX_IMP_PDK_OATH = 630;
  public final static int VFX_IMP_PDK_RALLYING_CRY = 625;
  public final static int VFX_IMP_PDK_WRATH = 629;
  public final static int VFX_IMP_POISON_L = 83 ;
  public final static int VFX_IMP_POISON_S = 84 ;
  public final static int VFX_IMP_POLYMORPH = 85 ;
  public final static int VFX_IMP_PULSE_COLD = 86 ;
  public final static int VFX_IMP_PULSE_FIRE = 87 ;
  public final static int VFX_IMP_PULSE_HOLY = 88 ;
  public final static int VFX_IMP_PULSE_HOLY_SILENT = 461;
  public final static int VFX_IMP_PULSE_NATURE = 266;
  public final static int VFX_IMP_PULSE_NEGATIVE = 89 ;
  public final static int VFX_IMP_PULSE_WATER = 264;
  public final static int VFX_IMP_PULSE_WIND = 265;
  public final static int VFX_IMP_RAISE_DEAD = 90 ;
  public final static int VFX_IMP_REDUCE_ABILITY_SCORE = 91 ;
  public final static int VFX_IMP_REFLEX_SAVE_THROW_USE = 256;
  public final static int VFX_IMP_REMOVE_CONDITION = 92 ;
  public final static int VFX_IMP_RESTORATION = 222;
  public final static int VFX_IMP_RESTORATION_GREATER = 223;
  public final static int VFX_IMP_RESTORATION_LESSER = 221;
  public final static int VFX_IMP_SILENCE = 93 ;
  public final static int VFX_IMP_SLEEP = 94 ;
  public final static int VFX_IMP_SLOW = 95 ;
  public final static int VFX_IMP_SONIC = 96 ;
  public final static int VFX_IMP_SPELL_MANTLE_USE = 254;
  public final static int VFX_IMP_SPIKE_TRAP = 253;
  public final static int VFX_IMP_STARBURST_GREEN = 644;
  public final static int VFX_IMP_STARBURST_RED = 645;
  public final static int VFX_IMP_STUN = 97 ;
  public final static int VFX_IMP_SUNSTRIKE = 98 ;
  public final static int VFX_IMP_SUPER_HEROISM = 150;
  public final static int VFX_IMP_TORNADO = 407;
  public final static int VFX_IMP_UNSUMMON = 99 ;
  public final static int VFX_IMP_WALLSPIKE = 486;
  public final static int VFX_IMP_WILL_SAVING_THROW_USE = 252;
  public final static int VFX_NONE = -1;
  public final static int VOICE_CHAT_ATTACK = 0;
  public final static int VOICE_CHAT_BADIDEA = 47;
  public final static int VOICE_CHAT_BATTLECRY1 = 1;
  public final static int VOICE_CHAT_BATTLECRY2 = 2;
  public final static int VOICE_CHAT_BATTLECRY3 = 3;
  public final static int VOICE_CHAT_BORED = 39;
  public final static int VOICE_CHAT_CANDO = 29;
  public final static int VOICE_CHAT_CANTDO = 30;
  public final static int VOICE_CHAT_CHEER = 44;
  public final static int VOICE_CHAT_CUSS = 43;
  public final static int VOICE_CHAT_DEATH = 18;
  public final static int VOICE_CHAT_ENCUMBERED = 32;
  public final static int VOICE_CHAT_ENEMIES = 6;
  public final static int VOICE_CHAT_FLEE = 7;
  public final static int VOICE_CHAT_FOLLOWME = 22;
  public final static int VOICE_CHAT_GATTACK1 = 11;
  public final static int VOICE_CHAT_GATTACK2 = 12;
  public final static int VOICE_CHAT_GATTACK3 = 13;
  public final static int VOICE_CHAT_GOODBYE = 40;
  public final static int VOICE_CHAT_GOODIDEA = 46;
  public final static int VOICE_CHAT_GROUP = 24;
  public final static int VOICE_CHAT_GUARDME = 9;
  public final static int VOICE_CHAT_HEALME = 4;
  public final static int VOICE_CHAT_HELLO = 34;
  public final static int VOICE_CHAT_HELP = 5;
  public final static int VOICE_CHAT_HIDE = 28;
  public final static int VOICE_CHAT_HOLD = 10;
  public final static int VOICE_CHAT_LAUGH = 42;
  public final static int VOICE_CHAT_LOOKHERE = 23;
  public final static int VOICE_CHAT_MOVEOVER = 25;
  public final static int VOICE_CHAT_NEARDEATH = 17;
  public final static int VOICE_CHAT_NO = 36;
  public final static int VOICE_CHAT_PAIN1 = 14;
  public final static int VOICE_CHAT_PAIN2 = 15;
  public final static int VOICE_CHAT_PAIN3 = 16;
  public final static int VOICE_CHAT_PICKLOCK = 26;
  public final static int VOICE_CHAT_POISONED = 19;
  public final static int VOICE_CHAT_REST = 38;
  public final static int VOICE_CHAT_SEARCH = 27;
  public final static int VOICE_CHAT_SELECTED = 33;
  public final static int VOICE_CHAT_SPELLFAILED = 20;
  public final static int VOICE_CHAT_STOP = 37;
  public final static int VOICE_CHAT_TALKTOME = 45;
  public final static int VOICE_CHAT_TASKCOMPLETE = 31;
  public final static int VOICE_CHAT_TAUNT = 8;
  public final static int VOICE_CHAT_THANKS = 41;
  public final static int VOICE_CHAT_THREATEN = 48;
  public final static int VOICE_CHAT_WEAPONSUCKS = 21;
  public final static int VOICE_CHAT_YES = 35;
  public final static int WEATHER_CLEAR = 0;
  public final static int WEATHER_INVALID = -1;
  public final static int WEATHER_RAIN = 1;
  public final static int WEATHER_SNOW = 2;
  public final static int WEATHER_USE_AREA_SETTINGS = -1;

  public static String nameOf(int value) {
    if (value == 5) return "All.ABILITY_CHARISMA";
    if (value == 2) return "All.ABILITY_CONSTITUTION";
    if (value == 1) return "All.ABILITY_DEXTERITY";
    if (value == 3) return "All.ABILITY_INTELLIGENCE";
    if (value == 0) return "All.ABILITY_STRENGTH";
    if (value == 4) return "All.ABILITY_WISDOM";
    if (value == 16) return "All.ACTION_ANIMALEMPATHY";
    if (value == 3) return "All.ACTION_ATTACKOBJECT";
    if (value == 4) return "All.ACTION_CASTSPELL";
    if (value == 6) return "All.ACTION_CLOSEDOOR";
    if (value == 31) return "All.ACTION_COUNTERSPELL";
    if (value == 7) return "All.ACTION_DIALOGOBJECT";
    if (value == 8) return "All.ACTION_DISABLETRAP";
    if (value == 2) return "All.ACTION_DROPITEM";
    if (value == 11) return "All.ACTION_EXAMINETRAP";
    if (value == 10) return "All.ACTION_FLAGTRAP";
    if (value == 35) return "All.ACTION_FOLLOW";
    if (value == 33) return "All.ACTION_HEAL";
    if (value == 65535) return "All.ACTION_INVALID";
    if (value == 19) return "All.ACTION_ITEMCASTSPELL";
    if (value == 41) return "All.ACTION_KIDAMAGE";
    if (value == 14) return "All.ACTION_LOCK";
    if (value == 5) return "All.ACTION_MODE_COUNTERSPELL";
    if (value == 10) return "All.ACTION_MODE_DEFENSIVE_CAST";
    if (value == 0) return "All.ACTION_MODE_DETECT";
    if (value == 11) return "All.ACTION_MODE_DIRTY_FIGHTING";
    if (value == 8) return "All.ACTION_MODE_EXPERTISE";
    if (value == 6) return "All.ACTION_MODE_FLURRY_OF_BLOWS";
    if (value == 9) return "All.ACTION_MODE_IMPROVED_EXPERTISE";
    if (value == 4) return "All.ACTION_MODE_IMPROVED_POWER_ATTACK";
    if (value == 2) return "All.ACTION_MODE_PARRY";
    if (value == 3) return "All.ACTION_MODE_POWER_ATTACK";
    if (value == 7) return "All.ACTION_MODE_RAPID_SHOT";
    if (value == 1) return "All.ACTION_MODE_STEALTH";
    if (value == 0) return "All.ACTION_MOVETOPOINT";
    if (value == 5) return "All.ACTION_OPENDOOR";
    if (value == 13) return "All.ACTION_OPENLOCK";
    if (value == 34) return "All.ACTION_PICKPOCKET";
    if (value == 1) return "All.ACTION_PICKUPITEM";
    if (value == 43) return "All.ACTION_RANDOMWALK";
    if (value == 9) return "All.ACTION_RECOVERTRAP";
    if (value == 17) return "All.ACTION_REST";
    if (value == 12) return "All.ACTION_SETTRAP";
    if (value == 37) return "All.ACTION_SIT";
    if (value == 40) return "All.ACTION_SMITEGOOD";
    if (value == 18) return "All.ACTION_TAUNT";
    if (value == 15) return "All.ACTION_USEOBJECT";
    if (value == 36) return "All.ACTION_WAIT";
    if (value == 2) return "All.AC_ARMOUR_ENCHANTMENT_BONUS";
    if (value == 4) return "All.AC_DEFLECTION_BONUS";
    if (value == 0) return "All.AC_DODGE_BONUS";
    if (value == 1) return "All.AC_NATURAL_BONUS";
    if (value == 3) return "All.AC_SHIELD_ENCHANTMENT_BONUS";
    if (value == 4103) return "All.AC_VS_DAMAGE_TYPE_ALL";
    if (value == -1) return "All.AI_LEVEL_DEFAULT";
    if (value == 3) return "All.AI_LEVEL_HIGH";
    if (value == -1) return "All.AI_LEVEL_INVALID";
    if (value == 1) return "All.AI_LEVEL_LOW";
    if (value == 2) return "All.AI_LEVEL_NORMAL";
    if (value == 4) return "All.AI_LEVEL_VERY_HIGH";
    if (value == 0) return "All.AI_LEVEL_VERY_LOW";
    if (value == 0) return "All.ALIGNMENT_ALL";
    if (value == 3) return "All.ALIGNMENT_CHAOTIC";
    if (value == 5) return "All.ALIGNMENT_EVIL";
    if (value == 4) return "All.ALIGNMENT_GOOD";
    if (value == 2) return "All.ALIGNMENT_LAWFUL";
    if (value == 1) return "All.ALIGNMENT_NEUTRAL";
    if (value == 80) return "All.AMBIENT_SOUND_BLACK_SMITH";
    if (value == 21) return "All.AMBIENT_SOUND_BORDELLO_MEN_AND_WOMEN";
    if (value == 20) return "All.AMBIENT_SOUND_BORDELLO_WOMEN";
    if (value == 68) return "All.AMBIENT_SOUND_CASTLE_INTERIOR_LARGE";
    if (value == 67) return "All.AMBIENT_SOUND_CASTLE_INTERIOR_MEDIUM";
    if (value == 66) return "All.AMBIENT_SOUND_CASTLE_INTERIOR_SMALL";
    if (value == 104) return "All.AMBIENT_SOUND_CAVE_EVIL_1_XP2";
    if (value == 105) return "All.AMBIENT_SOUND_CAVE_EVIL_2_XP2";
    if (value == 106) return "All.AMBIENT_SOUND_CAVE_EVIL_3_XP2";
    if (value == 42) return "All.AMBIENT_SOUND_CAVE_INSECTS_1";
    if (value == 43) return "All.AMBIENT_SOUND_CAVE_INSECTS_2";
    if (value == 62) return "All.AMBIENT_SOUND_CAVE_LARGE";
    if (value == 61) return "All.AMBIENT_SOUND_CAVE_MEDIUM";
    if (value == 60) return "All.AMBIENT_SOUND_CAVE_SMALL";
    if (value == 12) return "All.AMBIENT_SOUND_CITY_DAY_CROWDED";
    if (value == 13) return "All.AMBIENT_SOUND_CITY_DAY_SPARSE";
    if (value == 15) return "All.AMBIENT_SOUND_CITY_MARKET";
    if (value == 14) return "All.AMBIENT_SOUND_CITY_NIGHT";
    if (value == 9) return "All.AMBIENT_SOUND_CITY_SLUMS_DAY_CROWDED";
    if (value == 10) return "All.AMBIENT_SOUND_CITY_SLUMS_DAY_SPARSE";
    if (value == 11) return "All.AMBIENT_SOUND_CITY_SLUMS_NIGHT";
    if (value == 16) return "All.AMBIENT_SOUND_CITY_TEMPLE_DISTRICT";
    if (value == 26) return "All.AMBIENT_SOUND_COMBAT_MUFFLED_1";
    if (value == 27) return "All.AMBIENT_SOUND_COMBAT_MUFFLED_2";
    if (value == 24) return "All.AMBIENT_SOUND_COMBAT_OUTSIDE_1";
    if (value == 25) return "All.AMBIENT_SOUND_COMBAT_OUTSIDE_2";
    if (value == 7) return "All.AMBIENT_SOUND_COMMONER_TAVERN_TALK";
    if (value == 70) return "All.AMBIENT_SOUND_CRYPT_MEDIUM_1";
    if (value == 71) return "All.AMBIENT_SOUND_CRYPT_MEDIUM_2";
    if (value == 69) return "All.AMBIENT_SOUND_CRYPT_SMALL";
    if (value == 92) return "All.AMBIENT_SOUND_DESERT_DAY_XP1";
    if (value == 93) return "All.AMBIENT_SOUND_DESERT_NIGHT_XP1";
    if (value == 28) return "All.AMBIENT_SOUND_DUNGEON_LAKE_LAVA";
    if (value == 101) return "All.AMBIENT_SOUND_EVIL_DRONE_XP2";
    if (value == 59) return "All.AMBIENT_SOUND_EVIL_DUNGEON_LARGE";
    if (value == 58) return "All.AMBIENT_SOUND_EVIL_DUNGEON_MEDIUM";
    if (value == 57) return "All.AMBIENT_SOUND_EVIL_DUNGEON_SMALL";
    if (value == 49) return "All.AMBIENT_SOUND_FOREST_DAY_1";
    if (value == 50) return "All.AMBIENT_SOUND_FOREST_DAY_2";
    if (value == 51) return "All.AMBIENT_SOUND_FOREST_DAY_3";
    if (value == 52) return "All.AMBIENT_SOUND_FOREST_DAY_SCARY";
    if (value == 56) return "All.AMBIENT_SOUND_FOREST_MAGICAL";
    if (value == 53) return "All.AMBIENT_SOUND_FOREST_NIGHT_1";
    if (value == 54) return "All.AMBIENT_SOUND_FOREST_NIGHT_2";
    if (value == 55) return "All.AMBIENT_SOUND_FOREST_NIGHT_SCARY";
    if (value == 103) return "All.AMBIENT_SOUND_FROZEN_HELL_XP2";
    if (value == 35) return "All.AMBIENT_SOUND_GUST_CAVERN";
    if (value == 34) return "All.AMBIENT_SOUND_GUST_CHASM";
    if (value == 37) return "All.AMBIENT_SOUND_GUST_DRAFT";
    if (value == 36) return "All.AMBIENT_SOUND_GUST_GRASS";
    if (value == 77) return "All.AMBIENT_SOUND_HAUNTED_INTERIOR_1";
    if (value == 78) return "All.AMBIENT_SOUND_HAUNTED_INTERIOR_2";
    if (value == 79) return "All.AMBIENT_SOUND_HAUNTED_INTERIOR_3";
    if (value == 72) return "All.AMBIENT_SOUND_HOUSE_INTERIOR_1";
    if (value == 73) return "All.AMBIENT_SOUND_HOUSE_INTERIOR_2";
    if (value == 74) return "All.AMBIENT_SOUND_HOUSE_INTERIOR_3";
    if (value == 44) return "All.AMBIENT_SOUND_INTERIOR_INSECTS_1";
    if (value == 45) return "All.AMBIENT_SOUND_INTERIOR_INSECTS_2";
    if (value == 76) return "All.AMBIENT_SOUND_KITCHEN_INTERIOR_LARGE";
    if (value == 75) return "All.AMBIENT_SOUND_KITCHEN_INTERIOR_SMALL";
    if (value == 6) return "All.AMBIENT_SOUND_LARGE_GROUP_TALKS_INSIDE";
    if (value == 46) return "All.AMBIENT_SOUND_LIZARD_FOLK_CAVE_CRYSTALS";
    if (value == 88) return "All.AMBIENT_SOUND_MAGICAL_INTERIOR_AIRLAB";
    if (value == 87) return "All.AMBIENT_SOUND_MAGICAL_INTERIOR_EARTHLAB";
    if (value == 86) return "All.AMBIENT_SOUND_MAGICAL_INTERIOR_FIRELAB";
    if (value == 89) return "All.AMBIENT_SOUND_MAGICAL_INTERIOR_WATERLAB";
    if (value == 85) return "All.AMBIENT_SOUND_MAGIC_INTERIOR_EVIL";
    if (value == 84) return "All.AMBIENT_SOUND_MAGIC_INTERIOR_LARGE";
    if (value == 83) return "All.AMBIENT_SOUND_MAGIC_INTERIOR_MEDIUM";
    if (value == 82) return "All.AMBIENT_SOUND_MAGIC_INTERIOR_SMALL";
    if (value == 5) return "All.AMBIENT_SOUND_MEDIUM_GROUP_TALKS_INSIDE";
    if (value == 1) return "All.AMBIENT_SOUND_MEN_WHISPER_INSIDE";
    if (value == 65) return "All.AMBIENT_SOUND_MINE_LARGE";
    if (value == 64) return "All.AMBIENT_SOUND_MINE_MEDIUM";
    if (value == 63) return "All.AMBIENT_SOUND_MINE_SMALL";
    if (value == 94) return "All.AMBIENT_SOUND_MONASTERY_INTERIOR_XP1";
    if (value == 8) return "All.AMBIENT_SOUND_NOBLE_TAVERN_TALK";
    if (value == 0) return "All.AMBIENT_SOUND_NONE";
    if (value == 3) return "All.AMBIENT_SOUND_PEOPLE_WHISPER_INSIDE";
    if (value == 81) return "All.AMBIENT_SOUND_PIT_CRIES";
    if (value == 102) return "All.AMBIENT_SOUND_PLAIN_OF_FIRE_XP2";
    if (value == 39) return "All.AMBIENT_SOUND_RAIN_HARD";
    if (value == 38) return "All.AMBIENT_SOUND_RAIN_LIGHT";
    if (value == 41) return "All.AMBIENT_SOUND_RAIN_STORM_BIG";
    if (value == 40) return "All.AMBIENT_SOUND_RAIN_STORM_SMALL";
    if (value == 23) return "All.AMBIENT_SOUND_RIOT_MUFFLED";
    if (value == 22) return "All.AMBIENT_SOUND_RIOT_OUTSIDE";
    if (value == 98) return "All.AMBIENT_SOUND_RUIN_HAUNTED_XP1";
    if (value == 97) return "All.AMBIENT_SOUND_RUIN_RUMBLING_XP1";
    if (value == 96) return "All.AMBIENT_SOUND_RUIN_WET_XP1";
    if (value == 100) return "All.AMBIENT_SOUND_SAND_STORM_EXTREME_XP1";
    if (value == 99) return "All.AMBIENT_SOUND_SAND_STORM_LIGHT_XP1";
    if (value == 47) return "All.AMBIENT_SOUND_SEWERS_1";
    if (value == 48) return "All.AMBIENT_SOUND_SEWERS_2";
    if (value == 29) return "All.AMBIENT_SOUND_SEWER_SLUDGE_LAKE";
    if (value == 4) return "All.AMBIENT_SOUND_SMALL_GROUP_TALKS_INSIDE";
    if (value == 107) return "All.AMBIENT_SOUND_TAVERN_ROWDY";
    if (value == 17) return "All.AMBIENT_SOUND_TOWN_DAY_CROWDED";
    if (value == 18) return "All.AMBIENT_SOUND_TOWN_DAY_SPARSE";
    if (value == 19) return "All.AMBIENT_SOUND_TOWN_NIGHT";
    if (value == 33) return "All.AMBIENT_SOUND_WIND_FOREST";
    if (value == 31) return "All.AMBIENT_SOUND_WIND_MEDIUM";
    if (value == 30) return "All.AMBIENT_SOUND_WIND_SOFT";
    if (value == 32) return "All.AMBIENT_SOUND_WIND_STRONG";
    if (value == 90) return "All.AMBIENT_SOUND_WINTER_DAY_WET_XP1";
    if (value == 91) return "All.AMBIENT_SOUND_WINTER_DAY_WINDY_XP1";
    if (value == 2) return "All.AMBIENT_SOUND_WOMEN_WHISPER_INSIDE";
    if (value == 0) return "All.ANIMAL_COMPANION_CREATURE_TYPE_BADGER";
    if (value == 2) return "All.ANIMAL_COMPANION_CREATURE_TYPE_BEAR";
    if (value == 3) return "All.ANIMAL_COMPANION_CREATURE_TYPE_BOAR";
    if (value == 8) return "All.ANIMAL_COMPANION_CREATURE_TYPE_DIRERAT";
    if (value == 7) return "All.ANIMAL_COMPANION_CREATURE_TYPE_DIREWOLF";
    if (value == 4) return "All.ANIMAL_COMPANION_CREATURE_TYPE_HAWK";
    if (value == 255) return "All.ANIMAL_COMPANION_CREATURE_TYPE_NONE";
    if (value == 5) return "All.ANIMAL_COMPANION_CREATURE_TYPE_PANTHER";
    if (value == 6) return "All.ANIMAL_COMPANION_CREATURE_TYPE_SPIDER";
    if (value == 1) return "All.ANIMAL_COMPANION_CREATURE_TYPE_WOLF";
    if (value == 42) return "All.ANIMATION_DISMOUNT1";
    if (value == 204) return "All.ANIMATION_DOOR_CLOSE";
    if (value == 207) return "All.ANIMATION_DOOR_DESTROY";
    if (value == 205) return "All.ANIMATION_DOOR_OPEN1";
    if (value == 206) return "All.ANIMATION_DOOR_OPEN2";
    if (value == 105) return "All.ANIMATION_FIREFORGET_BOW";
    if (value == 115) return "All.ANIMATION_FIREFORGET_DODGE_DUCK";
    if (value == 114) return "All.ANIMATION_FIREFORGET_DODGE_SIDE";
    if (value == 113) return "All.ANIMATION_FIREFORGET_DRINK";
    if (value == 107) return "All.ANIMATION_FIREFORGET_GREETING";
    if (value == 100) return "All.ANIMATION_FIREFORGET_HEAD_TURN_LEFT";
    if (value == 101) return "All.ANIMATION_FIREFORGET_HEAD_TURN_RIGHT";
    if (value == 103) return "All.ANIMATION_FIREFORGET_PAUSE_BORED";
    if (value == 102) return "All.ANIMATION_FIREFORGET_PAUSE_SCRATCH_HEAD";
    if (value == 112) return "All.ANIMATION_FIREFORGET_READ";
    if (value == 104) return "All.ANIMATION_FIREFORGET_SALUTE";
    if (value == 116) return "All.ANIMATION_FIREFORGET_SPASM";
    if (value == 106) return "All.ANIMATION_FIREFORGET_STEAL";
    if (value == 108) return "All.ANIMATION_FIREFORGET_TAUNT";
    if (value == 109) return "All.ANIMATION_FIREFORGET_VICTORY1";
    if (value == 110) return "All.ANIMATION_FIREFORGET_VICTORY2";
    if (value == 111) return "All.ANIMATION_FIREFORGET_VICTORY3";
    if (value == 18) return "All.ANIMATION_LOOPING_CONJURE1";
    if (value == 19) return "All.ANIMATION_LOOPING_CONJURE2";
    if (value == 21) return "All.ANIMATION_LOOPING_CUSTOM1";
    if (value == 30) return "All.ANIMATION_LOOPING_CUSTOM10";
    if (value == 31) return "All.ANIMATION_LOOPING_CUSTOM11";
    if (value == 32) return "All.ANIMATION_LOOPING_CUSTOM12";
    if (value == 33) return "All.ANIMATION_LOOPING_CUSTOM13";
    if (value == 34) return "All.ANIMATION_LOOPING_CUSTOM14";
    if (value == 35) return "All.ANIMATION_LOOPING_CUSTOM15";
    if (value == 36) return "All.ANIMATION_LOOPING_CUSTOM16";
    if (value == 37) return "All.ANIMATION_LOOPING_CUSTOM17";
    if (value == 38) return "All.ANIMATION_LOOPING_CUSTOM18";
    if (value == 39) return "All.ANIMATION_LOOPING_CUSTOM19";
    if (value == 22) return "All.ANIMATION_LOOPING_CUSTOM2";
    if (value == 40) return "All.ANIMATION_LOOPING_CUSTOM20";
    if (value == 23) return "All.ANIMATION_LOOPING_CUSTOM3";
    if (value == 24) return "All.ANIMATION_LOOPING_CUSTOM4";
    if (value == 25) return "All.ANIMATION_LOOPING_CUSTOM5";
    if (value == 26) return "All.ANIMATION_LOOPING_CUSTOM6";
    if (value == 27) return "All.ANIMATION_LOOPING_CUSTOM7";
    if (value == 28) return "All.ANIMATION_LOOPING_CUSTOM8";
    if (value == 29) return "All.ANIMATION_LOOPING_CUSTOM9";
    if (value == 17) return "All.ANIMATION_LOOPING_DEAD_BACK";
    if (value == 16) return "All.ANIMATION_LOOPING_DEAD_FRONT";
    if (value == 12) return "All.ANIMATION_LOOPING_GET_LOW";
    if (value == 13) return "All.ANIMATION_LOOPING_GET_MID";
    if (value == 2) return "All.ANIMATION_LOOPING_LISTEN";
    if (value == 5) return "All.ANIMATION_LOOPING_LOOK_FAR";
    if (value == 3) return "All.ANIMATION_LOOPING_MEDITATE";
    if (value == 0) return "All.ANIMATION_LOOPING_PAUSE";
    if (value == 1) return "All.ANIMATION_LOOPING_PAUSE2";
    if (value == 15) return "All.ANIMATION_LOOPING_PAUSE_DRUNK";
    if (value == 14) return "All.ANIMATION_LOOPING_PAUSE_TIRED";
    if (value == 6) return "All.ANIMATION_LOOPING_SIT_CHAIR";
    if (value == 7) return "All.ANIMATION_LOOPING_SIT_CROSS";
    if (value == 20) return "All.ANIMATION_LOOPING_SPASM";
    if (value == 10) return "All.ANIMATION_LOOPING_TALK_FORCEFUL";
    if (value == 11) return "All.ANIMATION_LOOPING_TALK_LAUGHING";
    if (value == 8) return "All.ANIMATION_LOOPING_TALK_NORMAL";
    if (value == 9) return "All.ANIMATION_LOOPING_TALK_PLEADING";
    if (value == 4) return "All.ANIMATION_LOOPING_WORSHIP";
    if (value == 41) return "All.ANIMATION_MOUNT1";
    if (value == 200) return "All.ANIMATION_PLACEABLE_ACTIVATE";
    if (value == 203) return "All.ANIMATION_PLACEABLE_CLOSE";
    if (value == 201) return "All.ANIMATION_PLACEABLE_DEACTIVATE";
    if (value == 202) return "All.ANIMATION_PLACEABLE_OPEN";
    if (value == 17) return "All.AOE_MOB_BLINDING";
    if (value == 15) return "All.AOE_MOB_CIRCCHAOS";
    if (value == 12) return "All.AOE_MOB_CIRCEVIL";
    if (value == 13) return "All.AOE_MOB_CIRCGOOD";
    if (value == 14) return "All.AOE_MOB_CIRCLAW";
    if (value == 36) return "All.AOE_MOB_DRAGON_FEAR";
    if (value == 25) return "All.AOE_MOB_ELECTRICAL";
    if (value == 16) return "All.AOE_MOB_FEAR";
    if (value == 23) return "All.AOE_MOB_FIRE";
    if (value == 24) return "All.AOE_MOB_FROST";
    if (value == 44) return "All.AOE_MOB_HORRIFICAPPEARANCE";
    if (value == 35) return "All.AOE_MOB_INVISIBILITY_PURGE";
    if (value == 19) return "All.AOE_MOB_MENACE";
    if (value == 22) return "All.AOE_MOB_PROTECTION";
    if (value == 30) return "All.AOE_MOB_SILENCE";
    if (value == 21) return "All.AOE_MOB_STUN";
    if (value == 41) return "All.AOE_MOB_TIDE_OF_BATTLE";
    if (value == 45) return "All.AOE_MOB_TROGLODYTE_STENCH";
    if (value == 27) return "All.AOE_MOB_TYRANT_FOG";
    if (value == 18) return "All.AOE_MOB_UNEARTHLY";
    if (value == 20) return "All.AOE_MOB_UNNATURAL";
    if (value == 33) return "All.AOE_PER_CREEPING_DOOM";
    if (value == 37) return "All.AOE_PER_CUSTOM_AOE";
    if (value == 11) return "All.AOE_PER_DARKNESS";
    if (value == 31) return "All.AOE_PER_DELAY_BLAST_FIREBALL";
    if (value == 9) return "All.AOE_PER_ENTANGLE";
    if (value == 34) return "All.AOE_PER_EVARDS_BLACK_TENTACLES";
    if (value == 0) return "All.AOE_PER_FOGACID";
    if (value == 1) return "All.AOE_PER_FOGFIRE";
    if (value == 26) return "All.AOE_PER_FOGGHOUL";
    if (value == 3) return "All.AOE_PER_FOGKILL";
    if (value == 4) return "All.AOE_PER_FOGMIND";
    if (value == 2) return "All.AOE_PER_FOGSTINK";
    if (value == 39) return "All.AOE_PER_FOG_OF_BEWILDERMENT";
    if (value == 38) return "All.AOE_PER_GLYPH_OF_WARDING";
    if (value == 32) return "All.AOE_PER_GREASE";
    if (value == 29) return "All.AOE_PER_INVIS_SPHERE";
    if (value == 43) return "All.AOE_PER_OVERMIND";
    if (value == 42) return "All.AOE_PER_STONEHOLD";
    if (value == 28) return "All.AOE_PER_STORM";
    if (value == 40) return "All.AOE_PER_VINE_MINE_CAMOUFLAGE";
    if (value == 7) return "All.AOE_PER_WALLBLADE";
    if (value == 5) return "All.AOE_PER_WALLFIRE";
    if (value == 6) return "All.AOE_PER_WALLWIND";
    if (value == 8) return "All.AOE_PER_WEB";
    if (value == 186) return "All.APPEARANCE_TYPE_ALLIP";
    if (value == 469) return "All.APPEARANCE_TYPE_ANIMATED_CHEST";
    if (value == 157) return "All.APPEARANCE_TYPE_ARANEA";
    if (value == 200) return "All.APPEARANCE_TYPE_ARCH_TARGET";
    if (value == 190) return "All.APPEARANCE_TYPE_ARIBETH";
    if (value == 353) return "All.APPEARANCE_TYPE_ASABI_CHIEFTAIN";
    if (value == 354) return "All.APPEARANCE_TYPE_ASABI_SHAMAN";
    if (value == 355) return "All.APPEARANCE_TYPE_ASABI_WARRIOR";
    if (value == 429) return "All.APPEARANCE_TYPE_AZER_FEMALE";
    if (value == 428) return "All.APPEARANCE_TYPE_AZER_MALE";
    if (value == 8) return "All.APPEARANCE_TYPE_BADGER";
    if (value == 9) return "All.APPEARANCE_TYPE_BADGER_DIRE";
    if (value == 38) return "All.APPEARANCE_TYPE_BALOR";
    if (value == 234) return "All.APPEARANCE_TYPE_BARTENDER";
    if (value == 369) return "All.APPEARANCE_TYPE_BASILISK";
    if (value == 10) return "All.APPEARANCE_TYPE_BAT";
    if (value == 11) return "All.APPEARANCE_TYPE_BAT_HORROR";
    if (value == 12) return "All.APPEARANCE_TYPE_BEAR_BLACK";
    if (value == 13) return "All.APPEARANCE_TYPE_BEAR_BROWN";
    if (value == 15) return "All.APPEARANCE_TYPE_BEAR_DIRE";
    if (value == 204) return "All.APPEARANCE_TYPE_BEAR_KODIAK";
    if (value == 14) return "All.APPEARANCE_TYPE_BEAR_POLAR";
    if (value == 18) return "All.APPEARANCE_TYPE_BEETLE_FIRE";
    if (value == 17) return "All.APPEARANCE_TYPE_BEETLE_SLICER";
    if (value == 19) return "All.APPEARANCE_TYPE_BEETLE_STAG";
    if (value == 20) return "All.APPEARANCE_TYPE_BEETLE_STINK";
    if (value == 220) return "All.APPEARANCE_TYPE_BEGGER";
    if (value == 401) return "All.APPEARANCE_TYPE_BEHOLDER";
    if (value == 403) return "All.APPEARANCE_TYPE_BEHOLDER_EYEBALL";
    if (value == 402) return "All.APPEARANCE_TYPE_BEHOLDER_MAGE";
    if (value == 472) return "All.APPEARANCE_TYPE_BEHOLDER_MOTHER";
    if (value == 221) return "All.APPEARANCE_TYPE_BLOOD_SAILER";
    if (value == 21) return "All.APPEARANCE_TYPE_BOAR";
    if (value == 22) return "All.APPEARANCE_TYPE_BOAR_DIRE";
    if (value == 23) return "All.APPEARANCE_TYPE_BODAK";
    if (value == 29) return "All.APPEARANCE_TYPE_BUGBEAR_A";
    if (value == 30) return "All.APPEARANCE_TYPE_BUGBEAR_B";
    if (value == 25) return "All.APPEARANCE_TYPE_BUGBEAR_CHIEFTAIN_A";
    if (value == 26) return "All.APPEARANCE_TYPE_BUGBEAR_CHIEFTAIN_B";
    if (value == 27) return "All.APPEARANCE_TYPE_BUGBEAR_SHAMAN_A";
    if (value == 28) return "All.APPEARANCE_TYPE_BUGBEAR_SHAMAN_B";
    if (value == 481) return "All.APPEARANCE_TYPE_BULETTE";
    if (value == 95) return "All.APPEARANCE_TYPE_CAT_CAT_DIRE";
    if (value == 203) return "All.APPEARANCE_TYPE_CAT_COUGAR";
    if (value == 94) return "All.APPEARANCE_TYPE_CAT_CRAG_CAT";
    if (value == 98) return "All.APPEARANCE_TYPE_CAT_JAGUAR";
    if (value == 96) return "All.APPEARANCE_TYPE_CAT_KRENSHAR";
    if (value == 93) return "All.APPEARANCE_TYPE_CAT_LEOPARD";
    if (value == 97) return "All.APPEARANCE_TYPE_CAT_LION";
    if (value == 306) return "All.APPEARANCE_TYPE_CAT_MPANTHER";
    if (value == 202) return "All.APPEARANCE_TYPE_CAT_PANTHER";
    if (value == 31) return "All.APPEARANCE_TYPE_CHICKEN";
    if (value == 368) return "All.APPEARANCE_TYPE_COCKATRICE";
    if (value == 201) return "All.APPEARANCE_TYPE_COMBAT_DUMMY";
    if (value == 238) return "All.APPEARANCE_TYPE_CONVICT";
    if (value == 34) return "All.APPEARANCE_TYPE_COW";
    if (value == 212) return "All.APPEARANCE_TYPE_CULT_MEMBER";
    if (value == 416) return "All.APPEARANCE_TYPE_DEEP_ROTHE";
    if (value == 35) return "All.APPEARANCE_TYPE_DEER";
    if (value == 37) return "All.APPEARANCE_TYPE_DEER_STAG";
    if (value == 430) return "All.APPEARANCE_TYPE_DEMI_LICH";
    if (value == 392) return "All.APPEARANCE_TYPE_DEVIL";
    if (value == 176) return "All.APPEARANCE_TYPE_DOG";
    if (value == 174) return "All.APPEARANCE_TYPE_DOG_BLINKDOG";
    if (value == 175) return "All.APPEARANCE_TYPE_DOG_DIRE_WOLF";
    if (value == 177) return "All.APPEARANCE_TYPE_DOG_FENHOUND";
    if (value == 179) return "All.APPEARANCE_TYPE_DOG_HELL_HOUND";
    if (value == 180) return "All.APPEARANCE_TYPE_DOG_SHADOW_MASTIF";
    if (value == 184) return "All.APPEARANCE_TYPE_DOG_WINTER_WOLF";
    if (value == 181) return "All.APPEARANCE_TYPE_DOG_WOLF";
    if (value == 185) return "All.APPEARANCE_TYPE_DOG_WORG";
    if (value == 40) return "All.APPEARANCE_TYPE_DOOM_KNIGHT";
    if (value == 405) return "All.APPEARANCE_TYPE_DRACOLICH";
    if (value == 41) return "All.APPEARANCE_TYPE_DRAGON_BLACK";
    if (value == 47) return "All.APPEARANCE_TYPE_DRAGON_BLUE";
    if (value == 42) return "All.APPEARANCE_TYPE_DRAGON_BRASS";
    if (value == 45) return "All.APPEARANCE_TYPE_DRAGON_BRONZE";
    if (value == 43) return "All.APPEARANCE_TYPE_DRAGON_COPPER";
    if (value == 46) return "All.APPEARANCE_TYPE_DRAGON_GOLD";
    if (value == 48) return "All.APPEARANCE_TYPE_DRAGON_GREEN";
    if (value == 425) return "All.APPEARANCE_TYPE_DRAGON_PRIS";
    if (value == 49) return "All.APPEARANCE_TYPE_DRAGON_RED";
    if (value == 418) return "All.APPEARANCE_TYPE_DRAGON_SHADOW";
    if (value == 44) return "All.APPEARANCE_TYPE_DRAGON_SILVER";
    if (value == 50) return "All.APPEARANCE_TYPE_DRAGON_WHITE";
    if (value == 406) return "All.APPEARANCE_TYPE_DRIDER";
    if (value == 407) return "All.APPEARANCE_TYPE_DRIDER_CHIEF";
    if (value == 446) return "All.APPEARANCE_TYPE_DRIDER_FEMALE";
    if (value == 215) return "All.APPEARANCE_TYPE_DROW_CLERIC";
    if (value == 478) return "All.APPEARANCE_TYPE_DROW_FEMALE_1";
    if (value == 479) return "All.APPEARANCE_TYPE_DROW_FEMALE_2";
    if (value == 216) return "All.APPEARANCE_TYPE_DROW_FIGHTER";
    if (value == 410) return "All.APPEARANCE_TYPE_DROW_MATRON";
    if (value == 408) return "All.APPEARANCE_TYPE_DROW_SLAVE";
    if (value == 476) return "All.APPEARANCE_TYPE_DROW_WARRIOR_1";
    if (value == 477) return "All.APPEARANCE_TYPE_DROW_WARRIOR_2";
    if (value == 480) return "All.APPEARANCE_TYPE_DROW_WARRIOR_3";
    if (value == 409) return "All.APPEARANCE_TYPE_DROW_WIZARD";
    if (value == 218) return "All.APPEARANCE_TYPE_DRUEGAR_CLERIC";
    if (value == 217) return "All.APPEARANCE_TYPE_DRUEGAR_FIGHTER";
    if (value == 51) return "All.APPEARANCE_TYPE_DRYAD";
    if (value == 412) return "All.APPEARANCE_TYPE_DUERGAR_CHIEF";
    if (value == 411) return "All.APPEARANCE_TYPE_DUERGAR_SLAVE";
    if (value == 0) return "All.APPEARANCE_TYPE_DWARF";
    if (value == 474) return "All.APPEARANCE_TYPE_DWARF_GOLEM";
    if (value == 475) return "All.APPEARANCE_TYPE_DWARF_HALFORC";
    if (value == 248) return "All.APPEARANCE_TYPE_DWARF_NPC_FEMALE";
    if (value == 249) return "All.APPEARANCE_TYPE_DWARF_NPC_MALE";
    if (value == 52) return "All.APPEARANCE_TYPE_ELEMENTAL_AIR";
    if (value == 53) return "All.APPEARANCE_TYPE_ELEMENTAL_AIR_ELDER";
    if (value == 56) return "All.APPEARANCE_TYPE_ELEMENTAL_EARTH";
    if (value == 57) return "All.APPEARANCE_TYPE_ELEMENTAL_EARTH_ELDER";
    if (value == 60) return "All.APPEARANCE_TYPE_ELEMENTAL_FIRE";
    if (value == 61) return "All.APPEARANCE_TYPE_ELEMENTAL_FIRE_ELDER";
    if (value == 69) return "All.APPEARANCE_TYPE_ELEMENTAL_WATER";
    if (value == 68) return "All.APPEARANCE_TYPE_ELEMENTAL_WATER_ELDER";
    if (value == 1) return "All.APPEARANCE_TYPE_ELF";
    if (value == 245) return "All.APPEARANCE_TYPE_ELF_NPC_FEMALE";
    if (value == 246) return "All.APPEARANCE_TYPE_ELF_NPC_MALE_01";
    if (value == 247) return "All.APPEARANCE_TYPE_ELF_NPC_MALE_02";
    if (value == 166) return "All.APPEARANCE_TYPE_ETTERCAP";
    if (value == 72) return "All.APPEARANCE_TYPE_ETTIN";
    if (value == 374) return "All.APPEARANCE_TYPE_FAERIE_DRAGON";
    if (value == 55) return "All.APPEARANCE_TYPE_FAIRY";
    if (value == 144) return "All.APPEARANCE_TYPE_FALCON";
    if (value == 222) return "All.APPEARANCE_TYPE_FEMALE_01";
    if (value == 223) return "All.APPEARANCE_TYPE_FEMALE_02";
    if (value == 224) return "All.APPEARANCE_TYPE_FEMALE_03";
    if (value == 225) return "All.APPEARANCE_TYPE_FEMALE_04";
    if (value == 362) return "All.APPEARANCE_TYPE_FORMIAN_MYRMARCH";
    if (value == 363) return "All.APPEARANCE_TYPE_FORMIAN_QUEEN";
    if (value == 361) return "All.APPEARANCE_TYPE_FORMIAN_WARRIOR";
    if (value == 360) return "All.APPEARANCE_TYPE_FORMIAN_WORKER";
    if (value == 73) return "All.APPEARANCE_TYPE_GARGOYLE";
    if (value == 470) return "All.APPEARANCE_TYPE_GELATINOUS_CUBE";
    if (value == 74) return "All.APPEARANCE_TYPE_GHAST";
    if (value == 76) return "All.APPEARANCE_TYPE_GHOUL";
    if (value == 77) return "All.APPEARANCE_TYPE_GHOUL_LORD";
    if (value == 80) return "All.APPEARANCE_TYPE_GIANT_FIRE";
    if (value == 351) return "All.APPEARANCE_TYPE_GIANT_FIRE_FEMALE";
    if (value == 81) return "All.APPEARANCE_TYPE_GIANT_FROST";
    if (value == 350) return "All.APPEARANCE_TYPE_GIANT_FROST_FEMALE";
    if (value == 78) return "All.APPEARANCE_TYPE_GIANT_HILL";
    if (value == 79) return "All.APPEARANCE_TYPE_GIANT_MOUNTAIN";
    if (value == 388) return "All.APPEARANCE_TYPE_GNOLL_WARRIOR";
    if (value == 389) return "All.APPEARANCE_TYPE_GNOLL_WIZ";
    if (value == 2) return "All.APPEARANCE_TYPE_GNOME";
    if (value == 243) return "All.APPEARANCE_TYPE_GNOME_NPC_FEMALE";
    if (value == 244) return "All.APPEARANCE_TYPE_GNOME_NPC_MALE";
    if (value == 86) return "All.APPEARANCE_TYPE_GOBLIN_A";
    if (value == 87) return "All.APPEARANCE_TYPE_GOBLIN_B";
    if (value == 82) return "All.APPEARANCE_TYPE_GOBLIN_CHIEF_A";
    if (value == 83) return "All.APPEARANCE_TYPE_GOBLIN_CHIEF_B";
    if (value == 84) return "All.APPEARANCE_TYPE_GOBLIN_SHAMAN_A";
    if (value == 85) return "All.APPEARANCE_TYPE_GOBLIN_SHAMAN_B";
    if (value == 421) return "All.APPEARANCE_TYPE_GOLEM_ADAMANTIUM";
    if (value == 24) return "All.APPEARANCE_TYPE_GOLEM_BONE";
    if (value == 91) return "All.APPEARANCE_TYPE_GOLEM_CLAY";
    if (value == 468) return "All.APPEARANCE_TYPE_GOLEM_DEMONFLESH";
    if (value == 88) return "All.APPEARANCE_TYPE_GOLEM_FLESH";
    if (value == 89) return "All.APPEARANCE_TYPE_GOLEM_IRON";
    if (value == 420) return "All.APPEARANCE_TYPE_GOLEM_MITHRAL";
    if (value == 92) return "All.APPEARANCE_TYPE_GOLEM_STONE";
    if (value == 367) return "All.APPEARANCE_TYPE_GORGON";
    if (value == 393) return "All.APPEARANCE_TYPE_GRAY_OOZE";
    if (value == 205) return "All.APPEARANCE_TYPE_GREY_RENDER";
    if (value == 365) return "All.APPEARANCE_TYPE_GYNOSPHINX";
    if (value == 3) return "All.APPEARANCE_TYPE_HALFLING";
    if (value == 250) return "All.APPEARANCE_TYPE_HALFLING_NPC_FEMALE";
    if (value == 251) return "All.APPEARANCE_TYPE_HALFLING_NPC_MALE";
    if (value == 4) return "All.APPEARANCE_TYPE_HALF_ELF";
    if (value == 5) return "All.APPEARANCE_TYPE_HALF_ORC";
    if (value == 252) return "All.APPEARANCE_TYPE_HALF_ORC_NPC_FEMALE";
    if (value == 253) return "All.APPEARANCE_TYPE_HALF_ORC_NPC_MALE_01";
    if (value == 254) return "All.APPEARANCE_TYPE_HALF_ORC_NPC_MALE_02";
    if (value == 419) return "All.APPEARANCE_TYPE_HARPY";
    if (value == 100) return "All.APPEARANCE_TYPE_HELMED_HORROR";
    if (value == 370) return "All.APPEARANCE_TYPE_HEURODIS_LICH";
    if (value == 390) return "All.APPEARANCE_TYPE_HOBGOBLIN_WARRIOR";
    if (value == 391) return "All.APPEARANCE_TYPE_HOBGOBLIN_WIZARD";
    if (value == 102) return "All.APPEARANCE_TYPE_HOOK_HORROR";
    if (value == 219) return "All.APPEARANCE_TYPE_HOUSE_GUARD";
    if (value == 6) return "All.APPEARANCE_TYPE_HUMAN";
    if (value == 255) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_01";
    if (value == 256) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_02";
    if (value == 257) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_03";
    if (value == 258) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_04";
    if (value == 259) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_05";
    if (value == 260) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_06";
    if (value == 261) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_07";
    if (value == 262) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_08";
    if (value == 263) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_09";
    if (value == 264) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_10";
    if (value == 265) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_11";
    if (value == 266) return "All.APPEARANCE_TYPE_HUMAN_NPC_FEMALE_12";
    if (value == 267) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_01";
    if (value == 268) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_02";
    if (value == 269) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_03";
    if (value == 270) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_04";
    if (value == 271) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_05";
    if (value == 272) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_06";
    if (value == 273) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_07";
    if (value == 274) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_08";
    if (value == 275) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_09";
    if (value == 276) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_10";
    if (value == 277) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_11";
    if (value == 278) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_12";
    if (value == 279) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_13";
    if (value == 280) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_14";
    if (value == 281) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_15";
    if (value == 282) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_16";
    if (value == 283) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_17";
    if (value == 284) return "All.APPEARANCE_TYPE_HUMAN_NPC_MALE_18";
    if (value == 105) return "All.APPEARANCE_TYPE_IMP";
    if (value == 233) return "All.APPEARANCE_TYPE_INN_KEEPER";
    if (value == 117) return "All.APPEARANCE_TYPE_INTELLECT_DEVOURER";
    if (value == -1) return "All.APPEARANCE_TYPE_INVALID";
    if (value == 298) return "All.APPEARANCE_TYPE_INVISIBLE_HUMAN_MALE";
    if (value == 64) return "All.APPEARANCE_TYPE_INVISIBLE_STALKER";
    if (value == 242) return "All.APPEARANCE_TYPE_KID_FEMALE";
    if (value == 241) return "All.APPEARANCE_TYPE_KID_MALE";
    if (value == 302) return "All.APPEARANCE_TYPE_KOBOLD_A";
    if (value == 305) return "All.APPEARANCE_TYPE_KOBOLD_B";
    if (value == 300) return "All.APPEARANCE_TYPE_KOBOLD_CHIEF_A";
    if (value == 303) return "All.APPEARANCE_TYPE_KOBOLD_CHIEF_B";
    if (value == 301) return "All.APPEARANCE_TYPE_KOBOLD_SHAMAN_A";
    if (value == 304) return "All.APPEARANCE_TYPE_KOBOLD_SHAMAN_B";
    if (value == 103) return "All.APPEARANCE_TYPE_LANTERN_ARCHON";
    if (value == 39) return "All.APPEARANCE_TYPE_LICH";
    if (value == 134) return "All.APPEARANCE_TYPE_LIZARDFOLK_A";
    if (value == 135) return "All.APPEARANCE_TYPE_LIZARDFOLK_B";
    if (value == 132) return "All.APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_A";
    if (value == 133) return "All.APPEARANCE_TYPE_LIZARDFOLK_SHAMAN_B";
    if (value == 130) return "All.APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_A";
    if (value == 131) return "All.APPEARANCE_TYPE_LIZARDFOLK_WARRIOR_B";
    if (value == 211) return "All.APPEARANCE_TYPE_LUSKAN_GUARD";
    if (value == 226) return "All.APPEARANCE_TYPE_MALE_01";
    if (value == 227) return "All.APPEARANCE_TYPE_MALE_02";
    if (value == 228) return "All.APPEARANCE_TYPE_MALE_03";
    if (value == 229) return "All.APPEARANCE_TYPE_MALE_04";
    if (value == 230) return "All.APPEARANCE_TYPE_MALE_05";
    if (value == 366) return "All.APPEARANCE_TYPE_MANTICORE";
    if (value == 352) return "All.APPEARANCE_TYPE_MEDUSA";
    if (value == 404) return "All.APPEARANCE_TYPE_MEPHISTO_BIG";
    if (value == 471) return "All.APPEARANCE_TYPE_MEPHISTO_NORM";
    if (value == 106) return "All.APPEARANCE_TYPE_MEPHIT_AIR";
    if (value == 107) return "All.APPEARANCE_TYPE_MEPHIT_DUST";
    if (value == 108) return "All.APPEARANCE_TYPE_MEPHIT_EARTH";
    if (value == 109) return "All.APPEARANCE_TYPE_MEPHIT_FIRE";
    if (value == 110) return "All.APPEARANCE_TYPE_MEPHIT_ICE";
    if (value == 114) return "All.APPEARANCE_TYPE_MEPHIT_MAGMA";
    if (value == 112) return "All.APPEARANCE_TYPE_MEPHIT_OOZE";
    if (value == 111) return "All.APPEARANCE_TYPE_MEPHIT_SALT";
    if (value == 113) return "All.APPEARANCE_TYPE_MEPHIT_STEAM";
    if (value == 115) return "All.APPEARANCE_TYPE_MEPHIT_WATER";
    if (value == 413) return "All.APPEARANCE_TYPE_MINDFLAYER";
    if (value == 414) return "All.APPEARANCE_TYPE_MINDFLAYER_2";
    if (value == 415) return "All.APPEARANCE_TYPE_MINDFLAYER_ALHOON";
    if (value == 119) return "All.APPEARANCE_TYPE_MINOGON";
    if (value == 120) return "All.APPEARANCE_TYPE_MINOTAUR";
    if (value == 121) return "All.APPEARANCE_TYPE_MINOTAUR_CHIEFTAIN";
    if (value == 122) return "All.APPEARANCE_TYPE_MINOTAUR_SHAMAN";
    if (value == 123) return "All.APPEARANCE_TYPE_MOHRG";
    if (value == 58) return "All.APPEARANCE_TYPE_MUMMY_COMMON";
    if (value == 59) return "All.APPEARANCE_TYPE_MUMMY_FIGHTER_2";
    if (value == 124) return "All.APPEARANCE_TYPE_MUMMY_GREATER";
    if (value == 125) return "All.APPEARANCE_TYPE_MUMMY_WARRIOR";
    if (value == 188) return "All.APPEARANCE_TYPE_NWN_AARIN";
    if (value == 189) return "All.APPEARANCE_TYPE_NWN_ARIBETH_EVIL";
    if (value == 191) return "All.APPEARANCE_TYPE_NWN_HAEDRALINE";
    if (value == 193) return "All.APPEARANCE_TYPE_NWN_MAUGRIM";
    if (value == 192) return "All.APPEARANCE_TYPE_NWN_MORAG";
    if (value == 296) return "All.APPEARANCE_TYPE_NWN_NASHER";
    if (value == 297) return "All.APPEARANCE_TYPE_NWN_SEDOS";
    if (value == 210) return "All.APPEARANCE_TYPE_NW_MILITIA_MEMBER";
    if (value == 126) return "All.APPEARANCE_TYPE_NYMPH";
    if (value == 436) return "All.APPEARANCE_TYPE_OBJECT_BLUE";
    if (value == 473) return "All.APPEARANCE_TYPE_OBJECT_BOAT";
    if (value == 433) return "All.APPEARANCE_TYPE_OBJECT_CANDLE";
    if (value == 431) return "All.APPEARANCE_TYPE_OBJECT_CHAIR";
    if (value == 434) return "All.APPEARANCE_TYPE_OBJECT_CHEST";
    if (value == 437) return "All.APPEARANCE_TYPE_OBJECT_CYAN";
    if (value == 445) return "All.APPEARANCE_TYPE_OBJECT_FLAME_LARGE";
    if (value == 444) return "All.APPEARANCE_TYPE_OBJECT_FLAME_MEDIUM";
    if (value == 443) return "All.APPEARANCE_TYPE_OBJECT_FLAME_SMALL";
    if (value == 438) return "All.APPEARANCE_TYPE_OBJECT_GREEN";
    if (value == 440) return "All.APPEARANCE_TYPE_OBJECT_ORANGE";
    if (value == 442) return "All.APPEARANCE_TYPE_OBJECT_PURPLE";
    if (value == 441) return "All.APPEARANCE_TYPE_OBJECT_RED";
    if (value == 432) return "All.APPEARANCE_TYPE_OBJECT_TABLE";
    if (value == 435) return "All.APPEARANCE_TYPE_OBJECT_WHITE";
    if (value == 439) return "All.APPEARANCE_TYPE_OBJECT_YELLOW";
    if (value == 394) return "All.APPEARANCE_TYPE_OCHRE_JELLY_LARGE";
    if (value == 396) return "All.APPEARANCE_TYPE_OCHRE_JELLY_MEDIUM";
    if (value == 398) return "All.APPEARANCE_TYPE_OCHRE_JELLY_SMALL";
    if (value == 127) return "All.APPEARANCE_TYPE_OGRE";
    if (value == 207) return "All.APPEARANCE_TYPE_OGREB";
    if (value == 128) return "All.APPEARANCE_TYPE_OGRE_CHIEFTAIN";
    if (value == 208) return "All.APPEARANCE_TYPE_OGRE_CHIEFTAINB";
    if (value == 129) return "All.APPEARANCE_TYPE_OGRE_MAGE";
    if (value == 209) return "All.APPEARANCE_TYPE_OGRE_MAGEB";
    if (value == 239) return "All.APPEARANCE_TYPE_OLD_MAN";
    if (value == 240) return "All.APPEARANCE_TYPE_OLD_WOMAN";
    if (value == 140) return "All.APPEARANCE_TYPE_ORC_A";
    if (value == 141) return "All.APPEARANCE_TYPE_ORC_B";
    if (value == 136) return "All.APPEARANCE_TYPE_ORC_CHIEFTAIN_A";
    if (value == 137) return "All.APPEARANCE_TYPE_ORC_CHIEFTAIN_B";
    if (value == 138) return "All.APPEARANCE_TYPE_ORC_SHAMAN_A";
    if (value == 139) return "All.APPEARANCE_TYPE_ORC_SHAMAN_B";
    if (value == 142) return "All.APPEARANCE_TYPE_OX";
    if (value == 7) return "All.APPEARANCE_TYPE_PARROT";
    if (value == 206) return "All.APPEARANCE_TYPE_PENGUIN";
    if (value == 231) return "All.APPEARANCE_TYPE_PLAGUE_VICTIM";
    if (value == 236) return "All.APPEARANCE_TYPE_PROSTITUTE_01";
    if (value == 237) return "All.APPEARANCE_TYPE_PROSTITUTE_02";
    if (value == 375) return "All.APPEARANCE_TYPE_PSEUDODRAGON";
    if (value == 104) return "All.APPEARANCE_TYPE_QUASIT";
    if (value == 294) return "All.APPEARANCE_TYPE_RAKSHASA_BEAR_MALE";
    if (value == 290) return "All.APPEARANCE_TYPE_RAKSHASA_TIGER_FEMALE";
    if (value == 293) return "All.APPEARANCE_TYPE_RAKSHASA_TIGER_MALE";
    if (value == 295) return "All.APPEARANCE_TYPE_RAKSHASA_WOLF_MALE";
    if (value == 386) return "All.APPEARANCE_TYPE_RAT";
    if (value == 387) return "All.APPEARANCE_TYPE_RAT_DIRE";
    if (value == 145) return "All.APPEARANCE_TYPE_RAVEN";
    if (value == 65) return "All.APPEARANCE_TYPE_SAHUAGIN";
    if (value == 67) return "All.APPEARANCE_TYPE_SAHUAGIN_CLERIC";
    if (value == 66) return "All.APPEARANCE_TYPE_SAHUAGIN_LEADER";
    if (value == 291) return "All.APPEARANCE_TYPE_SEAGULL_FLYING";
    if (value == 292) return "All.APPEARANCE_TYPE_SEAGULL_WALKING";
    if (value == 454) return "All.APPEARANCE_TYPE_SEA_HAG";
    if (value == 146) return "All.APPEARANCE_TYPE_SHADOW";
    if (value == 147) return "All.APPEARANCE_TYPE_SHADOW_FIEND";
    if (value == 449) return "All.APPEARANCE_TYPE_SHARK_GOBLIN";
    if (value == 448) return "All.APPEARANCE_TYPE_SHARK_HAMMERHEAD";
    if (value == 447) return "All.APPEARANCE_TYPE_SHARK_MAKO";
    if (value == 90) return "All.APPEARANCE_TYPE_SHIELD_GUARDIAN";
    if (value == 232) return "All.APPEARANCE_TYPE_SHOP_KEEPER";
    if (value == 36) return "All.APPEARANCE_TYPE_SKELETAL_DEVOURER";
    if (value == 182) return "All.APPEARANCE_TYPE_SKELETON_CHIEFTAIN";
    if (value == 63) return "All.APPEARANCE_TYPE_SKELETON_COMMON";
    if (value == 148) return "All.APPEARANCE_TYPE_SKELETON_MAGE";
    if (value == 62) return "All.APPEARANCE_TYPE_SKELETON_PRIEST";
    if (value == 150) return "All.APPEARANCE_TYPE_SKELETON_WARRIOR";
    if (value == 70) return "All.APPEARANCE_TYPE_SKELETON_WARRIOR_1";
    if (value == 71) return "All.APPEARANCE_TYPE_SKELETON_WARRIOR_2";
    if (value == 426) return "All.APPEARANCE_TYPE_SLAAD_BLACK";
    if (value == 151) return "All.APPEARANCE_TYPE_SLAAD_BLUE";
    if (value == 152) return "All.APPEARANCE_TYPE_SLAAD_DEATH";
    if (value == 153) return "All.APPEARANCE_TYPE_SLAAD_GRAY";
    if (value == 154) return "All.APPEARANCE_TYPE_SLAAD_GREEN";
    if (value == 155) return "All.APPEARANCE_TYPE_SLAAD_RED";
    if (value == 427) return "All.APPEARANCE_TYPE_SLAAD_WHITE";
    if (value == 156) return "All.APPEARANCE_TYPE_SPECTRE";
    if (value == 364) return "All.APPEARANCE_TYPE_SPHINX";
    if (value == 422) return "All.APPEARANCE_TYPE_SPIDER_DEMON";
    if (value == 158) return "All.APPEARANCE_TYPE_SPIDER_DIRE";
    if (value == 159) return "All.APPEARANCE_TYPE_SPIDER_GIANT";
    if (value == 160) return "All.APPEARANCE_TYPE_SPIDER_PHASE";
    if (value == 161) return "All.APPEARANCE_TYPE_SPIDER_SWORD";
    if (value == 162) return "All.APPEARANCE_TYPE_SPIDER_WRAITH";
    if (value == 356) return "All.APPEARANCE_TYPE_STINGER";
    if (value == 358) return "All.APPEARANCE_TYPE_STINGER_CHIEFTAIN";
    if (value == 359) return "All.APPEARANCE_TYPE_STINGER_MAGE";
    if (value == 357) return "All.APPEARANCE_TYPE_STINGER_WARRIOR";
    if (value == 163) return "All.APPEARANCE_TYPE_SUCCUBUS";
    if (value == 424) return "All.APPEARANCE_TYPE_SVIRF_FEMALE";
    if (value == 423) return "All.APPEARANCE_TYPE_SVIRF_MALE";
    if (value == 451) return "All.APPEARANCE_TYPE_TROGLODYTE";
    if (value == 453) return "All.APPEARANCE_TYPE_TROGLODYTE_CLERIC";
    if (value == 452) return "All.APPEARANCE_TYPE_TROGLODYTE_WARRIOR";
    if (value == 167) return "All.APPEARANCE_TYPE_TROLL";
    if (value == 164) return "All.APPEARANCE_TYPE_TROLL_CHIEFTAIN";
    if (value == 165) return "All.APPEARANCE_TYPE_TROLL_SHAMAN";
    if (value == 168) return "All.APPEARANCE_TYPE_UMBERHULK";
    if (value == 213) return "All.APPEARANCE_TYPE_UTHGARD_ELK_TRIBE";
    if (value == 214) return "All.APPEARANCE_TYPE_UTHGARD_TIGER_TRIBE";
    if (value == 288) return "All.APPEARANCE_TYPE_VAMPIRE_FEMALE";
    if (value == 289) return "All.APPEARANCE_TYPE_VAMPIRE_MALE";
    if (value == 101) return "All.APPEARANCE_TYPE_VROCK";
    if (value == 235) return "All.APPEARANCE_TYPE_WAITRESS";
    if (value == 54) return "All.APPEARANCE_TYPE_WAR_DEVOURER";
    if (value == 99) return "All.APPEARANCE_TYPE_WERECAT";
    if (value == 170) return "All.APPEARANCE_TYPE_WERERAT";
    if (value == 171) return "All.APPEARANCE_TYPE_WEREWOLF";
    if (value == 172) return "All.APPEARANCE_TYPE_WIGHT";
    if (value == 116) return "All.APPEARANCE_TYPE_WILL_O_WISP";
    if (value == 187) return "All.APPEARANCE_TYPE_WRAITH";
    if (value == 378) return "All.APPEARANCE_TYPE_WYRMLING_BLACK";
    if (value == 377) return "All.APPEARANCE_TYPE_WYRMLING_BLUE";
    if (value == 381) return "All.APPEARANCE_TYPE_WYRMLING_BRASS";
    if (value == 383) return "All.APPEARANCE_TYPE_WYRMLING_BRONZE";
    if (value == 382) return "All.APPEARANCE_TYPE_WYRMLING_COPPER";
    if (value == 385) return "All.APPEARANCE_TYPE_WYRMLING_GOLD";
    if (value == 379) return "All.APPEARANCE_TYPE_WYRMLING_GREEN";
    if (value == 376) return "All.APPEARANCE_TYPE_WYRMLING_RED";
    if (value == 384) return "All.APPEARANCE_TYPE_WYRMLING_SILVER";
    if (value == 380) return "All.APPEARANCE_TYPE_WYRMLING_WHITE";
    if (value == 285) return "All.APPEARANCE_TYPE_YUAN_TI";
    if (value == 286) return "All.APPEARANCE_TYPE_YUAN_TI_CHIEFTEN";
    if (value == 287) return "All.APPEARANCE_TYPE_YUAN_TI_WIZARD";
    if (value == 198) return "All.APPEARANCE_TYPE_ZOMBIE";
    if (value == 195) return "All.APPEARANCE_TYPE_ZOMBIE_ROTTING";
    if (value == 199) return "All.APPEARANCE_TYPE_ZOMBIE_TYRANT_FOG";
    if (value == 196) return "All.APPEARANCE_TYPE_ZOMBIE_WARRIOR_1";
    if (value == 197) return "All.APPEARANCE_TYPE_ZOMBIE_WARRIOR_2";
    if (value == 1) return "All.AREA_ABOVEGROUND";
    if (value == 0) return "All.AREA_ARTIFICIAL";
    if (value == 0) return "All.AREA_HEIGHT";
    if (value == -1) return "All.AREA_INVALID";
    if (value == 1) return "All.AREA_NATURAL";
    if (value == 95) return "All.AREA_TRANSITION_BEHOLDER_01";
    if (value == 96) return "All.AREA_TRANSITION_BEHOLDER_02";
    if (value == 84) return "All.AREA_TRANSITION_CARAVAN_DESERT";
    if (value == 85) return "All.AREA_TRANSITION_CARAVAN_RURAL";
    if (value == 83) return "All.AREA_TRANSITION_CARAVAN_WINTER";
    if (value == 34) return "All.AREA_TRANSITION_CASTLE_01";
    if (value == 35) return "All.AREA_TRANSITION_CASTLE_02";
    if (value == 36) return "All.AREA_TRANSITION_CASTLE_03";
    if (value == 37) return "All.AREA_TRANSITION_CASTLE_04";
    if (value == 38) return "All.AREA_TRANSITION_CASTLE_05";
    if (value == 39) return "All.AREA_TRANSITION_CASTLE_06";
    if (value == 40) return "All.AREA_TRANSITION_CASTLE_07";
    if (value == 41) return "All.AREA_TRANSITION_CASTLE_08";
    if (value == 2) return "All.AREA_TRANSITION_CITY";
    if (value == 2) return "All.AREA_TRANSITION_CITY_01";
    if (value == 3) return "All.AREA_TRANSITION_CITY_02";
    if (value == 4) return "All.AREA_TRANSITION_CITY_03";
    if (value == 5) return "All.AREA_TRANSITION_CITY_04";
    if (value == 6) return "All.AREA_TRANSITION_CITY_05";
    if (value == 7) return "All.AREA_TRANSITION_CRYPT";
    if (value == 7) return "All.AREA_TRANSITION_CRYPT_01";
    if (value == 8) return "All.AREA_TRANSITION_CRYPT_02";
    if (value == 9) return "All.AREA_TRANSITION_CRYPT_03";
    if (value == 10) return "All.AREA_TRANSITION_CRYPT_04";
    if (value == 11) return "All.AREA_TRANSITION_CRYPT_05";
    if (value == 73) return "All.AREA_TRANSITION_DESERT_01";
    if (value == 74) return "All.AREA_TRANSITION_DESERT_02";
    if (value == 75) return "All.AREA_TRANSITION_DESERT_03";
    if (value == 76) return "All.AREA_TRANSITION_DESERT_04";
    if (value == 77) return "All.AREA_TRANSITION_DESERT_05";
    if (value == 97) return "All.AREA_TRANSITION_DROW_01";
    if (value == 98) return "All.AREA_TRANSITION_DROW_02";
    if (value == 104) return "All.AREA_TRANSITION_DROW_03";
    if (value == 105) return "All.AREA_TRANSITION_DROW_04";
    if (value == 12) return "All.AREA_TRANSITION_DUNGEON_01";
    if (value == 13) return "All.AREA_TRANSITION_DUNGEON_02";
    if (value == 14) return "All.AREA_TRANSITION_DUNGEON_03";
    if (value == 15) return "All.AREA_TRANSITION_DUNGEON_04";
    if (value == 16) return "All.AREA_TRANSITION_DUNGEON_05";
    if (value == 17) return "All.AREA_TRANSITION_DUNGEON_06";
    if (value == 18) return "All.AREA_TRANSITION_DUNGEON_07";
    if (value == 19) return "All.AREA_TRANSITION_DUNGEON_08";
    if (value == 58) return "All.AREA_TRANSITION_FOREST";
    if (value == 58) return "All.AREA_TRANSITION_FOREST_01";
    if (value == 59) return "All.AREA_TRANSITION_FOREST_02";
    if (value == 60) return "All.AREA_TRANSITION_FOREST_03";
    if (value == 61) return "All.AREA_TRANSITION_FOREST_04";
    if (value == 62) return "All.AREA_TRANSITION_FOREST_05";
    if (value == 99) return "All.AREA_TRANSITION_ILLITHID_01";
    if (value == 100) return "All.AREA_TRANSITION_ILLITHID_02";
    if (value == 42) return "All.AREA_TRANSITION_INTERIOR_01";
    if (value == 43) return "All.AREA_TRANSITION_INTERIOR_02";
    if (value == 44) return "All.AREA_TRANSITION_INTERIOR_03";
    if (value == 45) return "All.AREA_TRANSITION_INTERIOR_04";
    if (value == 46) return "All.AREA_TRANSITION_INTERIOR_05";
    if (value == 47) return "All.AREA_TRANSITION_INTERIOR_06";
    if (value == 48) return "All.AREA_TRANSITION_INTERIOR_07";
    if (value == 49) return "All.AREA_TRANSITION_INTERIOR_08";
    if (value == 50) return "All.AREA_TRANSITION_INTERIOR_09";
    if (value == 51) return "All.AREA_TRANSITION_INTERIOR_10";
    if (value == 52) return "All.AREA_TRANSITION_INTERIOR_11";
    if (value == 53) return "All.AREA_TRANSITION_INTERIOR_12";
    if (value == 54) return "All.AREA_TRANSITION_INTERIOR_13";
    if (value == 55) return "All.AREA_TRANSITION_INTERIOR_14";
    if (value == 56) return "All.AREA_TRANSITION_INTERIOR_15";
    if (value == 57) return "All.AREA_TRANSITION_INTERIOR_16";
    if (value == 86) return "All.AREA_TRANSITION_MAGICAL_01";
    if (value == 87) return "All.AREA_TRANSITION_MAGICAL_02";
    if (value == 20) return "All.AREA_TRANSITION_MINES_01";
    if (value == 21) return "All.AREA_TRANSITION_MINES_02";
    if (value == 22) return "All.AREA_TRANSITION_MINES_03";
    if (value == 23) return "All.AREA_TRANSITION_MINES_04";
    if (value == 24) return "All.AREA_TRANSITION_MINES_05";
    if (value == 25) return "All.AREA_TRANSITION_MINES_06";
    if (value == 26) return "All.AREA_TRANSITION_MINES_07";
    if (value == 27) return "All.AREA_TRANSITION_MINES_08";
    if (value == 28) return "All.AREA_TRANSITION_MINES_09";
    if (value == 0) return "All.AREA_TRANSITION_RANDOM";
    if (value == 78) return "All.AREA_TRANSITION_RUINS_01";
    if (value == 79) return "All.AREA_TRANSITION_RUINS_02";
    if (value == 80) return "All.AREA_TRANSITION_RUINS_03";
    if (value == 81) return "All.AREA_TRANSITION_RUINS_04";
    if (value == 82) return "All.AREA_TRANSITION_RUINS_05";
    if (value == 63) return "All.AREA_TRANSITION_RURAL";
    if (value == 63) return "All.AREA_TRANSITION_RURAL_01";
    if (value == 64) return "All.AREA_TRANSITION_RURAL_02";
    if (value == 65) return "All.AREA_TRANSITION_RURAL_03";
    if (value == 66) return "All.AREA_TRANSITION_RURAL_04";
    if (value == 67) return "All.AREA_TRANSITION_RURAL_05";
    if (value == 29) return "All.AREA_TRANSITION_SEWER_01";
    if (value == 30) return "All.AREA_TRANSITION_SEWER_02";
    if (value == 31) return "All.AREA_TRANSITION_SEWER_03";
    if (value == 32) return "All.AREA_TRANSITION_SEWER_04";
    if (value == 33) return "All.AREA_TRANSITION_SEWER_05";
    if (value == 88) return "All.AREA_TRANSITION_UNDERDARK_01";
    if (value == 89) return "All.AREA_TRANSITION_UNDERDARK_02";
    if (value == 90) return "All.AREA_TRANSITION_UNDERDARK_03";
    if (value == 91) return "All.AREA_TRANSITION_UNDERDARK_04";
    if (value == 92) return "All.AREA_TRANSITION_UNDERDARK_05";
    if (value == 93) return "All.AREA_TRANSITION_UNDERDARK_06";
    if (value == 94) return "All.AREA_TRANSITION_UNDERDARK_07";
    if (value == 1) return "All.AREA_TRANSITION_USER_DEFINED";
    if (value == 101) return "All.AREA_TRANSITION_WASTELAND_01";
    if (value == 102) return "All.AREA_TRANSITION_WASTELAND_02";
    if (value == 103) return "All.AREA_TRANSITION_WASTELAND_03";
    if (value == 68) return "All.AREA_TRANSITION_WRURAL_01";
    if (value == 69) return "All.AREA_TRANSITION_WRURAL_02";
    if (value == 70) return "All.AREA_TRANSITION_WRURAL_03";
    if (value == 71) return "All.AREA_TRANSITION_WRURAL_04";
    if (value == 72) return "All.AREA_TRANSITION_WRURAL_05";
    if (value == 0) return "All.AREA_UNDERGROUND";
    if (value == 1) return "All.AREA_WIDTH";
    if (value == -3) return "All.ASSOCIATE_COMMAND_ATTACKNEAREST";
    if (value == -20) return "All.ASSOCIATE_COMMAND_DISARMTRAP";
    if (value == -5) return "All.ASSOCIATE_COMMAND_FOLLOWMASTER";
    if (value == -7) return "All.ASSOCIATE_COMMAND_GUARDMASTER";
    if (value == -4) return "All.ASSOCIATE_COMMAND_HEALMASTER";
    if (value == -19) return "All.ASSOCIATE_COMMAND_INVENTORY";
    if (value == -17) return "All.ASSOCIATE_COMMAND_LEAVEPARTY";
    if (value == -15) return "All.ASSOCIATE_COMMAND_MASTERATTACKEDOTHER";
    if (value == -6) return "All.ASSOCIATE_COMMAND_MASTERFAILEDLOCKPICK";
    if (value == -16) return "All.ASSOCIATE_COMMAND_MASTERGOINGTOBEATTACKED";
    if (value == -14) return "All.ASSOCIATE_COMMAND_MASTERSAWTRAP";
    if (value == -11) return "All.ASSOCIATE_COMMAND_MASTERUNDERATTACK";
    if (value == -18) return "All.ASSOCIATE_COMMAND_PICKLOCK";
    if (value == -12) return "All.ASSOCIATE_COMMAND_RELEASEDOMINATION";
    if (value == -2) return "All.ASSOCIATE_COMMAND_STANDGROUND";
    if (value == -21) return "All.ASSOCIATE_COMMAND_TOGGLECASTING";
    if (value == -23) return "All.ASSOCIATE_COMMAND_TOGGLESEARCH";
    if (value == -22) return "All.ASSOCIATE_COMMAND_TOGGLESTEALTH";
    if (value == -13) return "All.ASSOCIATE_COMMAND_UNPOSSESSFAMILIAR";
    if (value == -9) return "All.ASSOCIATE_COMMAND_UNSUMMONANIMALCOMPANION";
    if (value == -8) return "All.ASSOCIATE_COMMAND_UNSUMMONFAMILIAR";
    if (value == -10) return "All.ASSOCIATE_COMMAND_UNSUMMONSUMMONED";
    if (value == 2) return "All.ASSOCIATE_TYPE_ANIMALCOMPANION";
    if (value == 5) return "All.ASSOCIATE_TYPE_DOMINATED";
    if (value == 3) return "All.ASSOCIATE_TYPE_FAMILIAR";
    if (value == 1) return "All.ASSOCIATE_TYPE_HENCHMAN";
    if (value == 0) return "All.ASSOCIATE_TYPE_NONE";
    if (value == 4) return "All.ASSOCIATE_TYPE_SUMMONED";
    if (value == 0) return "All.ATTACK_BONUS_MISC";
    if (value == 2) return "All.ATTACK_BONUS_OFFHAND";
    if (value == 1) return "All.ATTACK_BONUS_ONHAND";
    if (value == 1) return "All.ATTITUDE_AGGRESSIVE";
    if (value == 2) return "All.ATTITUDE_DEFENSIVE";
    if (value == 0) return "All.ATTITUDE_NEUTRAL";
    if (value == 3) return "All.ATTITUDE_SPECIAL";
    if (value == 19) return "All.BASE_ITEM_AMULET";
    if (value == 16) return "All.BASE_ITEM_ARMOR";
    if (value == 20) return "All.BASE_ITEM_ARROW";
    if (value == 3) return "All.BASE_ITEM_BASTARDSWORD";
    if (value == 2) return "All.BASE_ITEM_BATTLEAXE";
    if (value == 21) return "All.BASE_ITEM_BELT";
    if (value == 101) return "All.BASE_ITEM_BLANK_POTION";
    if (value == 102) return "All.BASE_ITEM_BLANK_SCROLL";
    if (value == 103) return "All.BASE_ITEM_BLANK_WAND";
    if (value == 25) return "All.BASE_ITEM_BOLT";
    if (value == 74) return "All.BASE_ITEM_BOOK";
    if (value == 26) return "All.BASE_ITEM_BOOTS";
    if (value == 78) return "All.BASE_ITEM_BRACER";
    if (value == 27) return "All.BASE_ITEM_BULLET";
    if (value == 71) return "All.BASE_ITEM_CBLUDGWEAPON";
    if (value == 80) return "All.BASE_ITEM_CLOAK";
    if (value == 28) return "All.BASE_ITEM_CLUB";
    if (value == 70) return "All.BASE_ITEM_CPIERCWEAPON";
    if (value == 109) return "All.BASE_ITEM_CRAFTMATERIALMED";
    if (value == 110) return "All.BASE_ITEM_CRAFTMATERIALSML";
    if (value == 73) return "All.BASE_ITEM_CREATUREITEM";
    if (value == 69) return "All.BASE_ITEM_CSLASHWEAPON";
    if (value == 72) return "All.BASE_ITEM_CSLSHPRCWEAP";
    if (value == 22) return "All.BASE_ITEM_DAGGER";
    if (value == 31) return "All.BASE_ITEM_DART";
    if (value == 32) return "All.BASE_ITEM_DIREMACE";
    if (value == 33) return "All.BASE_ITEM_DOUBLEAXE";
    if (value == 108) return "All.BASE_ITEM_DWARVENWARAXE";
    if (value == 104) return "All.BASE_ITEM_ENCHANTED_POTION";
    if (value == 105) return "All.BASE_ITEM_ENCHANTED_SCROLL";
    if (value == 106) return "All.BASE_ITEM_ENCHANTED_WAND";
    if (value == 77) return "All.BASE_ITEM_GEM";
    if (value == 36) return "All.BASE_ITEM_GLOVES";
    if (value == 76) return "All.BASE_ITEM_GOLD";
    if (value == 18) return "All.BASE_ITEM_GREATAXE";
    if (value == 13) return "All.BASE_ITEM_GREATSWORD";
    if (value == 81) return "All.BASE_ITEM_GRENADE";
    if (value == 10) return "All.BASE_ITEM_HALBERD";
    if (value == 38) return "All.BASE_ITEM_HANDAXE";
    if (value == 39) return "All.BASE_ITEM_HEALERSKIT";
    if (value == 6) return "All.BASE_ITEM_HEAVYCROSSBOW";
    if (value == 35) return "All.BASE_ITEM_HEAVYFLAIL";
    if (value == 17) return "All.BASE_ITEM_HELMET";
    if (value == 256) return "All.BASE_ITEM_INVALID";
    if (value == 40) return "All.BASE_ITEM_KAMA";
    if (value == 41) return "All.BASE_ITEM_KATANA";
    if (value == 65) return "All.BASE_ITEM_KEY";
    if (value == 42) return "All.BASE_ITEM_KUKRI";
    if (value == 66) return "All.BASE_ITEM_LARGEBOX";
    if (value == 56) return "All.BASE_ITEM_LARGESHIELD";
    if (value == 7) return "All.BASE_ITEM_LIGHTCROSSBOW";
    if (value == 4) return "All.BASE_ITEM_LIGHTFLAIL";
    if (value == 37) return "All.BASE_ITEM_LIGHTHAMMER";
    if (value == 9) return "All.BASE_ITEM_LIGHTMACE";
    if (value == 8) return "All.BASE_ITEM_LONGBOW";
    if (value == 1) return "All.BASE_ITEM_LONGSWORD";
    if (value == 44) return "All.BASE_ITEM_MAGICROD";
    if (value == 45) return "All.BASE_ITEM_MAGICSTAFF";
    if (value == 46) return "All.BASE_ITEM_MAGICWAND";
    if (value == 34) return "All.BASE_ITEM_MISCLARGE";
    if (value == 29) return "All.BASE_ITEM_MISCMEDIUM";
    if (value == 24) return "All.BASE_ITEM_MISCSMALL";
    if (value == 43) return "All.BASE_ITEM_MISCTALL";
    if (value == 79) return "All.BASE_ITEM_MISCTHIN";
    if (value == 68) return "All.BASE_ITEM_MISCWIDE";
    if (value == 47) return "All.BASE_ITEM_MORNINGSTAR";
    if (value == 49) return "All.BASE_ITEM_POTIONS";
    if (value == 50) return "All.BASE_ITEM_QUARTERSTAFF";
    if (value == 51) return "All.BASE_ITEM_RAPIER";
    if (value == 52) return "All.BASE_ITEM_RING";
    if (value == 53) return "All.BASE_ITEM_SCIMITAR";
    if (value == 54) return "All.BASE_ITEM_SCROLL";
    if (value == 55) return "All.BASE_ITEM_SCYTHE";
    if (value == 11) return "All.BASE_ITEM_SHORTBOW";
    if (value == 58) return "All.BASE_ITEM_SHORTSPEAR";
    if (value == 0) return "All.BASE_ITEM_SHORTSWORD";
    if (value == 59) return "All.BASE_ITEM_SHURIKEN";
    if (value == 60) return "All.BASE_ITEM_SICKLE";
    if (value == 61) return "All.BASE_ITEM_SLING";
    if (value == 14) return "All.BASE_ITEM_SMALLSHIELD";
    if (value == 75) return "All.BASE_ITEM_SPELLSCROLL";
    if (value == 62) return "All.BASE_ITEM_THIEVESTOOLS";
    if (value == 63) return "All.BASE_ITEM_THROWINGAXE";
    if (value == 15) return "All.BASE_ITEM_TORCH";
    if (value == 57) return "All.BASE_ITEM_TOWERSHIELD";
    if (value == 64) return "All.BASE_ITEM_TRAPKIT";
    if (value == 95) return "All.BASE_ITEM_TRIDENT";
    if (value == 12) return "All.BASE_ITEM_TWOBLADEDSWORD";
    if (value == 5) return "All.BASE_ITEM_WARHAMMER";
    if (value == 111) return "All.BASE_ITEM_WHIP";
    if (value == 1) return "All.BODY_NODE_CHEST";
    if (value == 0) return "All.BODY_NODE_HAND";
    if (value == 2) return "All.BODY_NODE_MONSTER_0";
    if (value == 3) return "All.BODY_NODE_MONSTER_1";
    if (value == 4) return "All.BODY_NODE_MONSTER_2";
    if (value == 5) return "All.BODY_NODE_MONSTER_3";
    if (value == 6) return "All.BODY_NODE_MONSTER_4";
    if (value == 7) return "All.BODY_NODE_MONSTER_5";
    if (value == 8) return "All.BODY_NODE_MONSTER_6";
    if (value == 9) return "All.BODY_NODE_MONSTER_7";
    if (value == 10) return "All.BODY_NODE_MONSTER_8";
    if (value == 11) return "All.BODY_NODE_MONSTER_9";
    if (value == 0) return "All.CAMERA_MODE_CHASE_CAMERA";
    if (value == 2) return "All.CAMERA_MODE_STIFF_CHASE_CAMERA";
    if (value == 1) return "All.CAMERA_MODE_TOP_DOWN";
    if (value == 2) return "All.CAMERA_TRANSITION_TYPE_CRAWL";
    if (value == 70) return "All.CAMERA_TRANSITION_TYPE_FAST";
    if (value == 40) return "All.CAMERA_TRANSITION_TYPE_MEDIUM";
    if (value == 20) return "All.CAMERA_TRANSITION_TYPE_SLOW";
    if (value == 0) return "All.CAMERA_TRANSITION_TYPE_SNAP";
    if (value == 100) return "All.CAMERA_TRANSITION_TYPE_VERY_FAST";
    if (value == 5) return "All.CAMERA_TRANSITION_TYPE_VERY_SLOW";
    if (value == 11) return "All.CLASS_TYPE_ABERRATION";
    if (value == 12) return "All.CLASS_TYPE_ANIMAL";
    if (value == 29) return "All.CLASS_TYPE_ARCANE_ARCHER";
    if (value == 30) return "All.CLASS_TYPE_ASSASSIN";
    if (value == 0) return "All.CLASS_TYPE_BARBARIAN";
    if (value == 1) return "All.CLASS_TYPE_BARD";
    if (value == 21) return "All.CLASS_TYPE_BEAST";
    if (value == 31) return "All.CLASS_TYPE_BLACKGUARD";
    if (value == 2) return "All.CLASS_TYPE_CLERIC";
    if (value == 20) return "All.CLASS_TYPE_COMMONER";
    if (value == 13) return "All.CLASS_TYPE_CONSTRUCT";
    if (value == 32) return "All.CLASS_TYPE_DIVINECHAMPION";
    if (value == 32) return "All.CLASS_TYPE_DIVINE_CHAMPION";
    if (value == 18) return "All.CLASS_TYPE_DRAGON";
    if (value == 37) return "All.CLASS_TYPE_DRAGONDISCIPLE";
    if (value == 37) return "All.CLASS_TYPE_DRAGON_DISCIPLE";
    if (value == 3) return "All.CLASS_TYPE_DRUID";
    if (value == 36) return "All.CLASS_TYPE_DWARVENDEFENDER";
    if (value == 36) return "All.CLASS_TYPE_DWARVEN_DEFENDER";
    if (value == 16) return "All.CLASS_TYPE_ELEMENTAL";
    if (value == 39) return "All.CLASS_TYPE_EYE_OF_GRUUMSH";
    if (value == 17) return "All.CLASS_TYPE_FEY";
    if (value == 4) return "All.CLASS_TYPE_FIGHTER";
    if (value == 22) return "All.CLASS_TYPE_GIANT";
    if (value == 28) return "All.CLASS_TYPE_HARPER";
    if (value == 14) return "All.CLASS_TYPE_HUMANOID";
    if (value == 255) return "All.CLASS_TYPE_INVALID";
    if (value == 23) return "All.CLASS_TYPE_MAGICAL_BEAST";
    if (value == 5) return "All.CLASS_TYPE_MONK";
    if (value == 15) return "All.CLASS_TYPE_MONSTROUS";
    if (value == 38) return "All.CLASS_TYPE_OOZE";
    if (value == 24) return "All.CLASS_TYPE_OUTSIDER";
    if (value == 6) return "All.CLASS_TYPE_PALADIN";
    if (value == 34) return "All.CLASS_TYPE_PALEMASTER";
    if (value == 34) return "All.CLASS_TYPE_PALE_MASTER";
    if (value == 41) return "All.CLASS_TYPE_PURPLE_DRAGON_KNIGHT";
    if (value == 7) return "All.CLASS_TYPE_RANGER";
    if (value == 8) return "All.CLASS_TYPE_ROGUE";
    if (value == 27) return "All.CLASS_TYPE_SHADOWDANCER";
    if (value == 25) return "All.CLASS_TYPE_SHAPECHANGER";
    if (value == 35) return "All.CLASS_TYPE_SHIFTER";
    if (value == 40) return "All.CLASS_TYPE_SHOU_DISCIPLE";
    if (value == 9) return "All.CLASS_TYPE_SORCERER";
    if (value == 19) return "All.CLASS_TYPE_UNDEAD";
    if (value == 26) return "All.CLASS_TYPE_VERMIN";
    if (value == 33) return "All.CLASS_TYPE_WEAPON_MASTER";
    if (value == 10) return "All.CLASS_TYPE_WIZARD";
    if (value == 1) return "All.COLOR_CHANNEL_HAIR";
    if (value == 0) return "All.COLOR_CHANNEL_SKIN";
    if (value == 2) return "All.COLOR_CHANNEL_TATTOO_1";
    if (value == 3) return "All.COLOR_CHANNEL_TATTOO_2";
    if (value == 8) return "All.COMBAT_MODE_DEFENSIVE_CASTING";
    if (value == 10) return "All.COMBAT_MODE_DEFENSIVE_STANCE";
    if (value == 9) return "All.COMBAT_MODE_DIRTY_FIGHTING";
    if (value == 6) return "All.COMBAT_MODE_EXPERTISE";
    if (value == 4) return "All.COMBAT_MODE_FLURRY_OF_BLOWS";
    if (value == 7) return "All.COMBAT_MODE_IMPROVED_EXPERTISE";
    if (value == 3) return "All.COMBAT_MODE_IMPROVED_POWER_ATTACK";
    if (value == 0) return "All.COMBAT_MODE_INVALID";
    if (value == 1) return "All.COMBAT_MODE_PARRY";
    if (value == 2) return "All.COMBAT_MODE_POWER_ATTACK";
    if (value == 5) return "All.COMBAT_MODE_RAPID_SHOT";
    if (value == 0) return "All.CREATURE_MODEL_TYPE_NONE";
    if (value == 1) return "All.CREATURE_MODEL_TYPE_SKIN";
    if (value == 2) return "All.CREATURE_MODEL_TYPE_TATTOO";
    if (value == 255) return "All.CREATURE_MODEL_TYPE_UNDEAD";
    if (value == 8) return "All.CREATURE_PART_BELT";
    if (value == 20) return "All.CREATURE_PART_HEAD";
    if (value == 13) return "All.CREATURE_PART_LEFT_BICEP";
    if (value == 1) return "All.CREATURE_PART_LEFT_FOOT";
    if (value == 11) return "All.CREATURE_PART_LEFT_FOREARM";
    if (value == 17) return "All.CREATURE_PART_LEFT_HAND";
    if (value == 3) return "All.CREATURE_PART_LEFT_SHIN";
    if (value == 15) return "All.CREATURE_PART_LEFT_SHOULDER";
    if (value == 4) return "All.CREATURE_PART_LEFT_THIGH";
    if (value == 9) return "All.CREATURE_PART_NECK";
    if (value == 6) return "All.CREATURE_PART_PELVIS";
    if (value == 12) return "All.CREATURE_PART_RIGHT_BICEP";
    if (value == 0) return "All.CREATURE_PART_RIGHT_FOOT";
    if (value == 10) return "All.CREATURE_PART_RIGHT_FOREARM";
    if (value == 16) return "All.CREATURE_PART_RIGHT_HAND";
    if (value == 2) return "All.CREATURE_PART_RIGHT_SHIN";
    if (value == 14) return "All.CREATURE_PART_RIGHT_SHOULDER";
    if (value == 5) return "All.CREATURE_PART_RIGHT_THIGH";
    if (value == 7) return "All.CREATURE_PART_TORSO";
    if (value == 5) return "All.CREATURE_SIZE_HUGE";
    if (value == 0) return "All.CREATURE_SIZE_INVALID";
    if (value == 4) return "All.CREATURE_SIZE_LARGE";
    if (value == 3) return "All.CREATURE_SIZE_MEDIUM";
    if (value == 2) return "All.CREATURE_SIZE_SMALL";
    if (value == 1) return "All.CREATURE_SIZE_TINY";
    if (value == 2) return "All.CREATURE_TAIL_TYPE_BONE";
    if (value == 3) return "All.CREATURE_TAIL_TYPE_DEVIL";
    if (value == 1) return "All.CREATURE_TAIL_TYPE_LIZARD";
    if (value == 0) return "All.CREATURE_TAIL_TYPE_NONE";
    if (value == 2) return "All.CREATURE_TYPE_CLASS";
    if (value == 6) return "All.CREATURE_TYPE_DOES_NOT_HAVE_SPELL_EFFECT";
    if (value == 5) return "All.CREATURE_TYPE_HAS_SPELL_EFFECT";
    if (value == 4) return "All.CREATURE_TYPE_IS_ALIVE";
    if (value == 7) return "All.CREATURE_TYPE_PERCEPTION";
    if (value == 1) return "All.CREATURE_TYPE_PLAYER_CHAR";
    if (value == 0) return "All.CREATURE_TYPE_RACIAL_TYPE";
    if (value == 3) return "All.CREATURE_TYPE_REPUTATION";
    if (value == 2) return "All.CREATURE_WING_TYPE_ANGEL";
    if (value == 3) return "All.CREATURE_WING_TYPE_BAT";
    if (value == 6) return "All.CREATURE_WING_TYPE_BIRD";
    if (value == 5) return "All.CREATURE_WING_TYPE_BUTTERFLY";
    if (value == 1) return "All.CREATURE_WING_TYPE_DEMON";
    if (value == 4) return "All.CREATURE_WING_TYPE_DRAGON";
    if (value == 0) return "All.CREATURE_WING_TYPE_NONE";
    if (value == 1) return "All.DAMAGE_BONUS_1";
    if (value == 20) return "All.DAMAGE_BONUS_10";
    if (value == 21) return "All.DAMAGE_BONUS_11";
    if (value == 22) return "All.DAMAGE_BONUS_12";
    if (value == 23) return "All.DAMAGE_BONUS_13";
    if (value == 24) return "All.DAMAGE_BONUS_14";
    if (value == 25) return "All.DAMAGE_BONUS_15";
    if (value == 26) return "All.DAMAGE_BONUS_16";
    if (value == 27) return "All.DAMAGE_BONUS_17";
    if (value == 28) return "All.DAMAGE_BONUS_18";
    if (value == 29) return "All.DAMAGE_BONUS_19";
    if (value == 2) return "All.DAMAGE_BONUS_2";
    if (value == 30) return "All.DAMAGE_BONUS_20";
    if (value == 3) return "All.DAMAGE_BONUS_3";
    if (value == 4) return "All.DAMAGE_BONUS_4";
    if (value == 5) return "All.DAMAGE_BONUS_5";
    if (value == 16) return "All.DAMAGE_BONUS_6";
    if (value == 17) return "All.DAMAGE_BONUS_7";
    if (value == 18) return "All.DAMAGE_BONUS_8";
    if (value == 19) return "All.DAMAGE_BONUS_9";
    if (value == 6) return "All.DAMAGE_POWER_ENERGY";
    if (value == 0) return "All.DAMAGE_POWER_NORMAL";
    if (value == 9) return "All.DAMAGE_POWER_PLUS_EIGHT";
    if (value == 19) return "All.DAMAGE_POWER_PLUS_EIGHTEEN";
    if (value == 12) return "All.DAMAGE_POWER_PLUS_ELEVEN";
    if (value == 16) return "All.DAMAGE_POWER_PLUS_FIFTEEN";
    if (value == 5) return "All.DAMAGE_POWER_PLUS_FIVE";
    if (value == 4) return "All.DAMAGE_POWER_PLUS_FOUR";
    if (value == 15) return "All.DAMAGE_POWER_PLUS_FOURTEEN";
    if (value == 10) return "All.DAMAGE_POWER_PLUS_NINE";
    if (value == 20) return "All.DAMAGE_POWER_PLUS_NINTEEN";
    if (value == 1) return "All.DAMAGE_POWER_PLUS_ONE";
    if (value == 8) return "All.DAMAGE_POWER_PLUS_SEVEN";
    if (value == 18) return "All.DAMAGE_POWER_PLUS_SEVENTEEN";
    if (value == 7) return "All.DAMAGE_POWER_PLUS_SIX";
    if (value == 17) return "All.DAMAGE_POWER_PLUS_SIXTEEN";
    if (value == 11) return "All.DAMAGE_POWER_PLUS_TEN";
    if (value == 14) return "All.DAMAGE_POWER_PLUS_THIRTEEN";
    if (value == 3) return "All.DAMAGE_POWER_PLUS_THREE";
    if (value == 13) return "All.DAMAGE_POWER_PLUS_TWELVE";
    if (value == 21) return "All.DAMAGE_POWER_PLUS_TWENTY";
    if (value == 2) return "All.DAMAGE_POWER_PLUS_TWO";
    if (value == 16) return "All.DAMAGE_TYPE_ACID";
    if (value == 4096) return "All.DAMAGE_TYPE_BASE_WEAPON";
    if (value == 1) return "All.DAMAGE_TYPE_BLUDGEONING";
    if (value == 32) return "All.DAMAGE_TYPE_COLD";
    if (value == 64) return "All.DAMAGE_TYPE_DIVINE";
    if (value == 128) return "All.DAMAGE_TYPE_ELECTRICAL";
    if (value == 256) return "All.DAMAGE_TYPE_FIRE";
    if (value == 8) return "All.DAMAGE_TYPE_MAGICAL";
    if (value == 512) return "All.DAMAGE_TYPE_NEGATIVE";
    if (value == 2) return "All.DAMAGE_TYPE_PIERCING";
    if (value == 1024) return "All.DAMAGE_TYPE_POSITIVE";
    if (value == 4) return "All.DAMAGE_TYPE_SLASHING";
    if (value == 2048) return "All.DAMAGE_TYPE_SONIC";
    if (value == 1) return "All.DEFENSIVE_CASTING_MODE_ACTIVATED";
    if (value == 0) return "All.DEFENSIVE_CASTING_MODE_DISABLED";
    if (value == 1) return "All.DETECT_MODE_ACTIVE";
    if (value == 0) return "All.DETECT_MODE_PASSIVE";
    if (value == 0) return "All.DISEASE_BLINDING_SICKNESS";
    if (value == 14) return "All.DISEASE_BURROW_MAGGOTS";
    if (value == 1) return "All.DISEASE_CACKLE_FEVER";
    if (value == 3) return "All.DISEASE_DEMON_FEVER";
    if (value == 2) return "All.DISEASE_DEVIL_CHILLS";
    if (value == 13) return "All.DISEASE_DREAD_BLISTERS";
    if (value == 4) return "All.DISEASE_FILTH_FEVER";
    if (value == 11) return "All.DISEASE_GHOUL_ROT";
    if (value == 5) return "All.DISEASE_MINDFIRE";
    if (value == 6) return "All.DISEASE_MUMMY_ROT";
    if (value == 7) return "All.DISEASE_RED_ACHE";
    if (value == 10) return "All.DISEASE_RED_SLAAD_EGGS";
    if (value == 8) return "All.DISEASE_SHAKES";
    if (value == 9) return "All.DISEASE_SLIMY_DOOM";
    if (value == 15) return "All.DISEASE_SOLDIER_SHAKES";
    if (value == 16) return "All.DISEASE_VERMIN_MADNESS";
    if (value == 12) return "All.DISEASE_ZOMBIE_CREEP";
    if (value == 2) return "All.DOOR_ACTION_BASH";
    if (value == 3) return "All.DOOR_ACTION_IGNORE";
    if (value == 4) return "All.DOOR_ACTION_KNOCK";
    if (value == 0) return "All.DOOR_ACTION_OPEN";
    if (value == 1) return "All.DOOR_ACTION_UNLOCK";
    if (value == 0) return "All.DURATION_TYPE_INSTANT";
    if (value == 2) return "All.DURATION_TYPE_PERMANENT";
    if (value == 1) return "All.DURATION_TYPE_TEMPORARY";
    if (value == 39) return "All.EFFECT_TYPE_ABILITY_DECREASE";
    if (value == 38) return "All.EFFECT_TYPE_ABILITY_INCREASE";
    if (value == 47) return "All.EFFECT_TYPE_AC_DECREASE";
    if (value == 46) return "All.EFFECT_TYPE_AC_INCREASE";
    if (value == 18) return "All.EFFECT_TYPE_ARCANE_SPELL_FAILURE";
    if (value == 20) return "All.EFFECT_TYPE_AREA_OF_EFFECT";
    if (value == 41) return "All.EFFECT_TYPE_ATTACK_DECREASE";
    if (value == 40) return "All.EFFECT_TYPE_ATTACK_INCREASE";
    if (value == 21) return "All.EFFECT_TYPE_BEAM";
    if (value == 67) return "All.EFFECT_TYPE_BLINDNESS";
    if (value == 23) return "All.EFFECT_TYPE_CHARMED";
    if (value == 72) return "All.EFFECT_TYPE_CONCEALMENT";
    if (value == 24) return "All.EFFECT_TYPE_CONFUSED";
    if (value == 33) return "All.EFFECT_TYPE_CURSE";
    if (value == 83) return "All.EFFECT_TYPE_CUTSCENEGHOST";
    if (value == 84) return "All.EFFECT_TYPE_CUTSCENEIMMOBILIZE";
    if (value == 80) return "All.EFFECT_TYPE_CUTSCENE_PARALYZE";
    if (value == 43) return "All.EFFECT_TYPE_DAMAGE_DECREASE";
    if (value == 45) return "All.EFFECT_TYPE_DAMAGE_IMMUNITY_DECREASE";
    if (value == 44) return "All.EFFECT_TYPE_DAMAGE_IMMUNITY_INCREASE";
    if (value == 42) return "All.EFFECT_TYPE_DAMAGE_INCREASE";
    if (value == 7) return "All.EFFECT_TYPE_DAMAGE_REDUCTION";
    if (value == 1) return "All.EFFECT_TYPE_DAMAGE_RESISTANCE";
    if (value == 58) return "All.EFFECT_TYPE_DARKNESS";
    if (value == 28) return "All.EFFECT_TYPE_DAZED";
    if (value == 13) return "All.EFFECT_TYPE_DEAF";
    if (value == 75) return "All.EFFECT_TYPE_DISAPPEARAPPEAR";
    if (value == 32) return "All.EFFECT_TYPE_DISEASE";
    if (value == 59) return "All.EFFECT_TYPE_DISPELMAGICALL";
    if (value == 69) return "All.EFFECT_TYPE_DISPELMAGICBEST";
    if (value == 26) return "All.EFFECT_TYPE_DOMINATED";
    if (value == 60) return "All.EFFECT_TYPE_ELEMENTALSHIELD";
    if (value == 17) return "All.EFFECT_TYPE_ENEMY_ATTACK_BONUS";
    if (value == 11) return "All.EFFECT_TYPE_ENTANGLE";
    if (value == 81) return "All.EFFECT_TYPE_ETHEREAL";
    if (value == 25) return "All.EFFECT_TYPE_FRIGHTENED";
    if (value == 36) return "All.EFFECT_TYPE_HASTE";
    if (value == 15) return "All.EFFECT_TYPE_IMMUNITY";
    if (value == 57) return "All.EFFECT_TYPE_IMPROVEDINVISIBILITY";
    if (value == 0) return "All.EFFECT_TYPE_INVALIDEFFECT";
    if (value == 56) return "All.EFFECT_TYPE_INVISIBILITY";
    if (value == 12) return "All.EFFECT_TYPE_INVULNERABLE";
    if (value == 71) return "All.EFFECT_TYPE_MISS_CHANCE";
    if (value == 49) return "All.EFFECT_TYPE_MOVEMENT_SPEED_DECREASE";
    if (value == 48) return "All.EFFECT_TYPE_MOVEMENT_SPEED_INCREASE";
    if (value == 61) return "All.EFFECT_TYPE_NEGATIVELEVEL";
    if (value == 27) return "All.EFFECT_TYPE_PARALYZE";
    if (value == 79) return "All.EFFECT_TYPE_PETRIFY";
    if (value == 31) return "All.EFFECT_TYPE_POISON";
    if (value == 62) return "All.EFFECT_TYPE_POLYMORPH";
    if (value == 3) return "All.EFFECT_TYPE_REGENERATE";
    if (value == 14) return "All.EFFECT_TYPE_RESURRECTION";
    if (value == 63) return "All.EFFECT_TYPE_SANCTUARY";
    if (value == 51) return "All.EFFECT_TYPE_SAVING_THROW_DECREASE";
    if (value == 50) return "All.EFFECT_TYPE_SAVING_THROW_INCREASE";
    if (value == 65) return "All.EFFECT_TYPE_SEEINVISIBLE";
    if (value == 34) return "All.EFFECT_TYPE_SILENCE";
    if (value == 55) return "All.EFFECT_TYPE_SKILL_DECREASE";
    if (value == 54) return "All.EFFECT_TYPE_SKILL_INCREASE";
    if (value == 30) return "All.EFFECT_TYPE_SLEEP";
    if (value == 37) return "All.EFFECT_TYPE_SLOW";
    if (value == 68) return "All.EFFECT_TYPE_SPELLLEVELABSORPTION";
    if (value == 82) return "All.EFFECT_TYPE_SPELL_FAILURE";
    if (value == 73) return "All.EFFECT_TYPE_SPELL_IMMUNITY";
    if (value == 53) return "All.EFFECT_TYPE_SPELL_RESISTANCE_DECREASE";
    if (value == 52) return "All.EFFECT_TYPE_SPELL_RESISTANCE_INCREASE";
    if (value == 29) return "All.EFFECT_TYPE_STUNNED";
    if (value == 76) return "All.EFFECT_TYPE_SWARM";
    if (value == 9) return "All.EFFECT_TYPE_TEMPORARY_HITPOINTS";
    if (value == 66) return "All.EFFECT_TYPE_TIMESTOP";
    if (value == 64) return "All.EFFECT_TYPE_TRUESEEING";
    if (value == 35) return "All.EFFECT_TYPE_TURNED";
    if (value == 77) return "All.EFFECT_TYPE_TURN_RESISTANCE_DECREASE";
    if (value == 78) return "All.EFFECT_TYPE_TURN_RESISTANCE_INCREASE";
    if (value == 70) return "All.EFFECT_TYPE_ULTRAVISION";
    if (value == 74) return "All.EFFECT_TYPE_VISUALEFFECT";
    if (value == 1) return "All.ENCOUNTER_DIFFICULTY_EASY";
    if (value == 3) return "All.ENCOUNTER_DIFFICULTY_HARD";
    if (value == 4) return "All.ENCOUNTER_DIFFICULTY_IMPOSSIBLE";
    if (value == 2) return "All.ENCOUNTER_DIFFICULTY_NORMAL";
    if (value == 0) return "All.ENCOUNTER_DIFFICULTY_VERY_EASY";
    if (value == 1005) return "All.EVENT_ATTACKED";
    if (value == 1006) return "All.EVENT_DAMAGED";
    if (value == 1004) return "All.EVENT_DIALOGUE";
    if (value == 1008) return "All.EVENT_DISTURBED";
    if (value == 1003) return "All.EVENT_END_COMBAT_ROUND";
    if (value == 1001) return "All.EVENT_HEARTBEAT";
    if (value == 1002) return "All.EVENT_PERCEIVE";
    if (value == 11000) return "All.EVENT_SCRIPT_AREAOFEFFECT_ON_HEARTBEAT";
    if (value == 11002) return "All.EVENT_SCRIPT_AREAOFEFFECT_ON_OBJECT_ENTER";
    if (value == 11003) return "All.EVENT_SCRIPT_AREAOFEFFECT_ON_OBJECT_EXIT";
    if (value == 11001) return "All.EVENT_SCRIPT_AREAOFEFFECT_ON_USER_DEFINED_EVENT";
    if (value == 4002) return "All.EVENT_SCRIPT_AREA_ON_ENTER";
    if (value == 4003) return "All.EVENT_SCRIPT_AREA_ON_EXIT";
    if (value == 4000) return "All.EVENT_SCRIPT_AREA_ON_HEARTBEAT";
    if (value == 4001) return "All.EVENT_SCRIPT_AREA_ON_USER_DEFINED_EVENT";
    if (value == 5012) return "All.EVENT_SCRIPT_CREATURE_ON_BLOCKED_BY_DOOR";
    if (value == 5004) return "All.EVENT_SCRIPT_CREATURE_ON_DAMAGED";
    if (value == 5010) return "All.EVENT_SCRIPT_CREATURE_ON_DEATH";
    if (value == 5007) return "All.EVENT_SCRIPT_CREATURE_ON_DIALOGUE";
    if (value == 5005) return "All.EVENT_SCRIPT_CREATURE_ON_DISTURBED";
    if (value == 5006) return "All.EVENT_SCRIPT_CREATURE_ON_END_COMBATROUND";
    if (value == 5000) return "All.EVENT_SCRIPT_CREATURE_ON_HEARTBEAT";
    if (value == 5003) return "All.EVENT_SCRIPT_CREATURE_ON_MELEE_ATTACKED";
    if (value == 5001) return "All.EVENT_SCRIPT_CREATURE_ON_NOTICE";
    if (value == 5009) return "All.EVENT_SCRIPT_CREATURE_ON_RESTED";
    if (value == 5008) return "All.EVENT_SCRIPT_CREATURE_ON_SPAWN_IN";
    if (value == 5002) return "All.EVENT_SCRIPT_CREATURE_ON_SPELLCASTAT";
    if (value == 5011) return "All.EVENT_SCRIPT_CREATURE_ON_USER_DEFINED_EVENT";
    if (value == 10012) return "All.EVENT_SCRIPT_DOOR_ON_CLICKED";
    if (value == 10001) return "All.EVENT_SCRIPT_DOOR_ON_CLOSE";
    if (value == 10002) return "All.EVENT_SCRIPT_DOOR_ON_DAMAGE";
    if (value == 10003) return "All.EVENT_SCRIPT_DOOR_ON_DEATH";
    if (value == 10013) return "All.EVENT_SCRIPT_DOOR_ON_DIALOGUE";
    if (value == 10004) return "All.EVENT_SCRIPT_DOOR_ON_DISARM";
    if (value == 10014) return "All.EVENT_SCRIPT_DOOR_ON_FAIL_TO_OPEN";
    if (value == 10005) return "All.EVENT_SCRIPT_DOOR_ON_HEARTBEAT";
    if (value == 10006) return "All.EVENT_SCRIPT_DOOR_ON_LOCK";
    if (value == 10007) return "All.EVENT_SCRIPT_DOOR_ON_MELEE_ATTACKED";
    if (value == 10000) return "All.EVENT_SCRIPT_DOOR_ON_OPEN";
    if (value == 10008) return "All.EVENT_SCRIPT_DOOR_ON_SPELLCASTAT";
    if (value == 10009) return "All.EVENT_SCRIPT_DOOR_ON_TRAPTRIGGERED";
    if (value == 10010) return "All.EVENT_SCRIPT_DOOR_ON_UNLOCK";
    if (value == 10011) return "All.EVENT_SCRIPT_DOOR_ON_USERDEFINED";
    if (value == 13003) return "All.EVENT_SCRIPT_ENCOUNTER_ON_ENCOUNTER_EXHAUSTED";
    if (value == 13002) return "All.EVENT_SCRIPT_ENCOUNTER_ON_HEARTBEAT";
    if (value == 13000) return "All.EVENT_SCRIPT_ENCOUNTER_ON_OBJECT_ENTER";
    if (value == 13001) return "All.EVENT_SCRIPT_ENCOUNTER_ON_OBJECT_EXIT";
    if (value == 13004) return "All.EVENT_SCRIPT_ENCOUNTER_ON_USER_DEFINED_EVENT";
    if (value == 3007) return "All.EVENT_SCRIPT_MODULE_ON_ACQUIRE_ITEM";
    if (value == 3006) return "All.EVENT_SCRIPT_MODULE_ON_ACTIVATE_ITEM";
    if (value == 3004) return "All.EVENT_SCRIPT_MODULE_ON_CLIENT_ENTER";
    if (value == 3005) return "All.EVENT_SCRIPT_MODULE_ON_CLIENT_EXIT";
    if (value == 3015) return "All.EVENT_SCRIPT_MODULE_ON_EQUIP_ITEM";
    if (value == 3000) return "All.EVENT_SCRIPT_MODULE_ON_HEARTBEAT";
    if (value == 3008) return "All.EVENT_SCRIPT_MODULE_ON_LOSE_ITEM";
    if (value == 3002) return "All.EVENT_SCRIPT_MODULE_ON_MODULE_LOAD";
    if (value == 3003) return "All.EVENT_SCRIPT_MODULE_ON_MODULE_START";
    if (value == 3014) return "All.EVENT_SCRIPT_MODULE_ON_PLAYER_CANCEL_CUTSCENE";
    if (value == 3017) return "All.EVENT_SCRIPT_MODULE_ON_PLAYER_CHAT";
    if (value == 3009) return "All.EVENT_SCRIPT_MODULE_ON_PLAYER_DEATH";
    if (value == 3010) return "All.EVENT_SCRIPT_MODULE_ON_PLAYER_DYING";
    if (value == 3013) return "All.EVENT_SCRIPT_MODULE_ON_PLAYER_LEVEL_UP";
    if (value == 3012) return "All.EVENT_SCRIPT_MODULE_ON_PLAYER_REST";
    if (value == 3011) return "All.EVENT_SCRIPT_MODULE_ON_RESPAWN_BUTTON_PRESSED";
    if (value == 3016) return "All.EVENT_SCRIPT_MODULE_ON_UNEQUIP_ITEM";
    if (value == 3001) return "All.EVENT_SCRIPT_MODULE_ON_USER_DEFINED_EVENT";
    if (value == 9000) return "All.EVENT_SCRIPT_PLACEABLE_ON_CLOSED";
    if (value == 9001) return "All.EVENT_SCRIPT_PLACEABLE_ON_DAMAGED";
    if (value == 9002) return "All.EVENT_SCRIPT_PLACEABLE_ON_DEATH";
    if (value == 9014) return "All.EVENT_SCRIPT_PLACEABLE_ON_DIALOGUE";
    if (value == 9003) return "All.EVENT_SCRIPT_PLACEABLE_ON_DISARM";
    if (value == 9004) return "All.EVENT_SCRIPT_PLACEABLE_ON_HEARTBEAT";
    if (value == 9005) return "All.EVENT_SCRIPT_PLACEABLE_ON_INVENTORYDISTURBED";
    if (value == 9015) return "All.EVENT_SCRIPT_PLACEABLE_ON_LEFT_CLICK";
    if (value == 9006) return "All.EVENT_SCRIPT_PLACEABLE_ON_LOCK";
    if (value == 9007) return "All.EVENT_SCRIPT_PLACEABLE_ON_MELEEATTACKED";
    if (value == 9008) return "All.EVENT_SCRIPT_PLACEABLE_ON_OPEN";
    if (value == 9009) return "All.EVENT_SCRIPT_PLACEABLE_ON_SPELLCASTAT";
    if (value == 9010) return "All.EVENT_SCRIPT_PLACEABLE_ON_TRAPTRIGGERED";
    if (value == 9011) return "All.EVENT_SCRIPT_PLACEABLE_ON_UNLOCK";
    if (value == 9012) return "All.EVENT_SCRIPT_PLACEABLE_ON_USED";
    if (value == 9013) return "All.EVENT_SCRIPT_PLACEABLE_ON_USER_DEFINED_EVENT";
    if (value == 14001) return "All.EVENT_SCRIPT_STORE_ON_CLOSE";
    if (value == 14000) return "All.EVENT_SCRIPT_STORE_ON_OPEN";
    if (value == 7006) return "All.EVENT_SCRIPT_TRIGGER_ON_CLICKED";
    if (value == 7005) return "All.EVENT_SCRIPT_TRIGGER_ON_DISARMED";
    if (value == 7000) return "All.EVENT_SCRIPT_TRIGGER_ON_HEARTBEAT";
    if (value == 7001) return "All.EVENT_SCRIPT_TRIGGER_ON_OBJECT_ENTER";
    if (value == 7002) return "All.EVENT_SCRIPT_TRIGGER_ON_OBJECT_EXIT";
    if (value == 7004) return "All.EVENT_SCRIPT_TRIGGER_ON_TRAPTRIGGERED";
    if (value == 7003) return "All.EVENT_SCRIPT_TRIGGER_ON_USER_DEFINED_EVENT";
    if (value == 1011) return "All.EVENT_SPELL_CAST_AT";
    if (value == 0) return "All.FALSE";
    if (value == 0) return "All.FAMILIAR_CREATURE_TYPE_BAT";
    if (value == 1) return "All.FAMILIAR_CREATURE_TYPE_CRAGCAT";
    if (value == 10) return "All.FAMILIAR_CREATURE_TYPE_EYEBALL";
    if (value == 8) return "All.FAMILIAR_CREATURE_TYPE_FAIRY_DRAGON";
    if (value == 4) return "All.FAMILIAR_CREATURE_TYPE_FIREMEPHIT";
    if (value == 2) return "All.FAMILIAR_CREATURE_TYPE_HELLHOUND";
    if (value == 5) return "All.FAMILIAR_CREATURE_TYPE_ICEMEPHIT";
    if (value == 3) return "All.FAMILIAR_CREATURE_TYPE_IMP";
    if (value == 255) return "All.FAMILIAR_CREATURE_TYPE_NONE";
    if (value == 6) return "All.FAMILIAR_CREATURE_TYPE_PIXIE";
    if (value == 9) return "All.FAMILIAR_CREATURE_TYPE_PSEUDO_DRAGON";
    if (value == 7) return "All.FAMILIAR_CREATURE_TYPE_RAVEN";
    if (value == 311) return "All.FEAT_AIR_DOMAIN_POWER";
    if (value == 0) return "All.FEAT_ALERTNESS";
    if (value == 1) return "All.FEAT_AMBIDEXTERITY";
    if (value == 199) return "All.FEAT_ANIMAL_COMPANION";
    if (value == 312) return "All.FEAT_ANIMAL_DOMAIN_POWER";
    if (value == 889) return "All.FEAT_ANIMATE_DEAD";
    if (value == 415) return "All.FEAT_ARCANE_DEFENSE_ABJURATION";
    if (value == 416) return "All.FEAT_ARCANE_DEFENSE_CONJURATION";
    if (value == 417) return "All.FEAT_ARCANE_DEFENSE_DIVINATION";
    if (value == 418) return "All.FEAT_ARCANE_DEFENSE_ENCHANTMENT";
    if (value == 419) return "All.FEAT_ARCANE_DEFENSE_EVOCATION";
    if (value == 420) return "All.FEAT_ARCANE_DEFENSE_ILLUSION";
    if (value == 421) return "All.FEAT_ARCANE_DEFENSE_NECROMANCY";
    if (value == 422) return "All.FEAT_ARCANE_DEFENSE_TRANSMUTATION";
    if (value == 2) return "All.FEAT_ARMOR_PROFICIENCY_HEAVY";
    if (value == 3) return "All.FEAT_ARMOR_PROFICIENCY_LIGHT";
    if (value == 4) return "All.FEAT_ARMOR_PROFICIENCY_MEDIUM";
    if (value == 378) return "All.FEAT_ARTIST";
    if (value == 300) return "All.FEAT_AURA_OF_COURAGE";
    if (value == 194) return "All.FEAT_BARBARIAN_ENDURANCE";
    if (value == 293) return "All.FEAT_BARBARIAN_RAGE";
    if (value == 197) return "All.FEAT_BARDIC_KNOWLEDGE";
    if (value == 257) return "All.FEAT_BARD_SONGS";
    if (value == 233) return "All.FEAT_BATTLE_TRAINING_VERSUS_GIANTS";
    if (value == 232) return "All.FEAT_BATTLE_TRAINING_VERSUS_GOBLINS";
    if (value == 231) return "All.FEAT_BATTLE_TRAINING_VERSUS_ORCS";
    if (value == 242) return "All.FEAT_BATTLE_TRAINING_VERSUS_REPTILIANS";
    if (value == 1013) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_10D6";
    if (value == 1014) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_11D6";
    if (value == 1015) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_12D6";
    if (value == 1016) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_13D6";
    if (value == 1017) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_14D6";
    if (value == 1018) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_15D6";
    if (value == 460) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_1D6";
    if (value == 461) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_2D6";
    if (value == 462) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_3D6";
    if (value == 1007) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_4D6";
    if (value == 1008) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_5D6";
    if (value == 1009) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_6D6";
    if (value == 1010) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_7D6";
    if (value == 1011) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_8D6";
    if (value == 1012) return "All.FEAT_BLACKGUARD_SNEAK_ATTACK_9D6";
    if (value == 486) return "All.FEAT_BLINDSIGHT_10_FEET";
    if (value == 485) return "All.FEAT_BLINDSIGHT_5_FEET";
    if (value == 488) return "All.FEAT_BLINDSIGHT_60_FEET";
    if (value == 408) return "All.FEAT_BLIND_FIGHT";
    if (value == 379) return "All.FEAT_BLOODED";
    if (value == 886) return "All.FEAT_BONE_SKIN_2";
    if (value == 887) return "All.FEAT_BONE_SKIN_4";
    if (value == 888) return "All.FEAT_BONE_SKIN_6";
    if (value == 944) return "All.FEAT_BREW_POTION";
    if (value == 380) return "All.FEAT_BULLHEADED";
    if (value == 478) return "All.FEAT_BULLS_STRENGTH";
    if (value == 5) return "All.FEAT_CALLED_SHOT";
    if (value == 409) return "All.FEAT_CIRCLE_KICK";
    if (value == 6) return "All.FEAT_CLEAVE";
    if (value == 7) return "All.FEAT_COMBAT_CASTING";
    if (value == 479) return "All.FEAT_CONTAGION";
    if (value == 381) return "All.FEAT_COURTLY_MAGOCRACY";
    if (value == 440) return "All.FEAT_CRAFT_HARPER_ITEM";
    if (value == 946) return "All.FEAT_CRAFT_WAND";
    if (value == 222) return "All.FEAT_CRIPPLING_STRIKE";
    if (value == 871) return "All.FEAT_CURSE_SONG";
    if (value == 196) return "All.FEAT_DAMAGE_REDUCTION";
    if (value == 948) return "All.FEAT_DAMAGE_REDUCTION_6";
    if (value == 228) return "All.FEAT_DARKVISION";
    if (value == 896) return "All.FEAT_DEATHLESS_MASTERY";
    if (value == 897) return "All.FEAT_DEATHLESS_MASTER_TOUCH";
    if (value == 891) return "All.FEAT_DEATHLESS_VIGOR";
    if (value == 310) return "All.FEAT_DEATH_DOMAIN_POWER";
    if (value == 223) return "All.FEAT_DEFENSIVE_ROLL";
    if (value == 8) return "All.FEAT_DEFLECT_ARROWS";
    if (value == 437) return "All.FEAT_DENEIRS_EYE";
    if (value == 313) return "All.FEAT_DESTRUCTION_DOMAIN_POWER";
    if (value == 214) return "All.FEAT_DIAMOND_BODY";
    if (value == 215) return "All.FEAT_DIAMOND_SOUL";
    if (value == 425) return "All.FEAT_DIRTY_FIGHTING";
    if (value == 9) return "All.FEAT_DISARM";
    if (value == 217) return "All.FEAT_DIVINE_GRACE";
    if (value == 219) return "All.FEAT_DIVINE_HEALTH";
    if (value == 413) return "All.FEAT_DIVINE_MIGHT";
    if (value == 414) return "All.FEAT_DIVINE_SHIELD";
    if (value == 909) return "All.FEAT_DIVINE_WRATH";
    if (value == 10) return "All.FEAT_DODGE";
    if (value == 962) return "All.FEAT_DRAGON_ABILITIES";
    if (value == 961) return "All.FEAT_DRAGON_ARMOR";
    if (value == 965) return "All.FEAT_DRAGON_DIS_BREATH";
    if (value == 1044) return "All.FEAT_DRAGON_HDINCREASE_D10";
    if (value == 1042) return "All.FEAT_DRAGON_HDINCREASE_D6";
    if (value == 1043) return "All.FEAT_DRAGON_HDINCREASE_D8";
    if (value == 964) return "All.FEAT_DRAGON_IMMUNE_FIRE";
    if (value == 963) return "All.FEAT_DRAGON_IMMUNE_PARALYSIS";
    if (value == 947) return "All.FEAT_DWARVEN_DEFENDER_DEFENSIVE_STANCE";
    if (value == 314) return "All.FEAT_EARTH_DOMAIN_POWER";
    if (value == 304) return "All.FEAT_ELEMENTAL_SHAPE";
    if (value == 11) return "All.FEAT_EMPOWER_SPELL";
    if (value == 297) return "All.FEAT_EMPTY_BODY";
    if (value == 977) return "All.FEAT_EPIC_ARCANE_ARCHER";
    if (value == 490) return "All.FEAT_EPIC_ARMOR_SKIN";
    if (value == 978) return "All.FEAT_EPIC_ASSASSIN";
    if (value == 857) return "All.FEAT_EPIC_AUTOMATIC_QUICKEN_1";
    if (value == 858) return "All.FEAT_EPIC_AUTOMATIC_QUICKEN_2";
    if (value == 859) return "All.FEAT_EPIC_AUTOMATIC_QUICKEN_3";
    if (value == 860) return "All.FEAT_EPIC_AUTOMATIC_SILENT_SPELL_1";
    if (value == 861) return "All.FEAT_EPIC_AUTOMATIC_SILENT_SPELL_2";
    if (value == 862) return "All.FEAT_EPIC_AUTOMATIC_SILENT_SPELL_3";
    if (value == 863) return "All.FEAT_EPIC_AUTOMATIC_STILL_SPELL_1";
    if (value == 864) return "All.FEAT_EPIC_AUTOMATIC_STILL_SPELL_2";
    if (value == 865) return "All.FEAT_EPIC_AUTOMATIC_STILL_SPELL_3";
    if (value == 855) return "All.FEAT_EPIC_BANE_OF_ENEMIES";
    if (value == 967) return "All.FEAT_EPIC_BARBARIAN";
    if (value == 1067) return "All.FEAT_EPIC_BARBARIAN_DAMAGE_REDUCTION";
    if (value == 968) return "All.FEAT_EPIC_BARD";
    if (value == 979) return "All.FEAT_EPIC_BLACKGUARD";
    if (value == 491) return "All.FEAT_EPIC_BLINDING_SPEED";
    if (value == 1001) return "All.FEAT_EPIC_CHARACTER";
    if (value == 969) return "All.FEAT_EPIC_CLERIC";
    if (value == 1061) return "All.FEAT_EPIC_CONSTRUCT_SHAPE";
    if (value == 492) return "All.FEAT_EPIC_DAMAGE_REDUCTION_3";
    if (value == 493) return "All.FEAT_EPIC_DAMAGE_REDUCTION_6";
    if (value == 494) return "All.FEAT_EPIC_DAMAGE_REDUCTION_9";
    if (value == 528) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_BASTARDSWORD";
    if (value == 516) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_BATTLEAXE";
    if (value == 495) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_CLUB";
    if (value == 532) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_CREATURE";
    if (value == 496) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_DAGGER";
    if (value == 497) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_DART";
    if (value == 529) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_DIREMACE";
    if (value == 530) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_DOUBLEAXE";
    if (value == 955) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_DWAXE";
    if (value == 517) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_GREATAXE";
    if (value == 513) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_GREATSWORD";
    if (value == 518) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_HALBERD";
    if (value == 514) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_HANDAXE";
    if (value == 498) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_HEAVYCROSSBOW";
    if (value == 522) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_HEAVYFLAIL";
    if (value == 523) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_KAMA";
    if (value == 527) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_KATANA";
    if (value == 524) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_KUKRI";
    if (value == 499) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTCROSSBOW";
    if (value == 520) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTFLAIL";
    if (value == 519) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTHAMMER";
    if (value == 500) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_LIGHTMACE";
    if (value == 507) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_LONGBOW";
    if (value == 512) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_LONGSWORD";
    if (value == 501) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_MORNINGSTAR";
    if (value == 502) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_QUARTERSTAFF";
    if (value == 510) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_RAPIER";
    if (value == 511) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SCIMITAR";
    if (value == 526) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SCYTHE";
    if (value == 508) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SHORTBOW";
    if (value == 503) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SHORTSPEAR";
    if (value == 509) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SHORTSWORD";
    if (value == 525) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SHURIKEN";
    if (value == 504) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SICKLE";
    if (value == 505) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_SLING";
    if (value == 515) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_THROWINGAXE";
    if (value == 1075) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_TRIDENT";
    if (value == 531) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_TWOBLADEDSWORD";
    if (value == 506) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_UNARMED";
    if (value == 521) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_WARHAMMER";
    if (value == 996) return "All.FEAT_EPIC_DEVASTATING_CRITICAL_WHIP";
    if (value == 982) return "All.FEAT_EPIC_DIVINE_CHAMPION";
    if (value == 856) return "All.FEAT_EPIC_DODGE";
    if (value == 970) return "All.FEAT_EPIC_DRUID";
    if (value == 1069) return "All.FEAT_EPIC_DRUID_INFINITE_ELEMENTAL_SHAPE";
    if (value == 1068) return "All.FEAT_EPIC_DRUID_INFINITE_WILDSHAPE";
    if (value == 985) return "All.FEAT_EPIC_DWARVEN_DEFENDER";
    if (value == 543) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_1";
    if (value == 552) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_10";
    if (value == 544) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_2";
    if (value == 545) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_3";
    if (value == 546) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_4";
    if (value == 547) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_5";
    if (value == 548) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_6";
    if (value == 549) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_7";
    if (value == 550) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_8";
    if (value == 551) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ACID_9";
    if (value == 533) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_1";
    if (value == 542) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_10";
    if (value == 534) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_2";
    if (value == 535) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_3";
    if (value == 536) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_4";
    if (value == 537) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_5";
    if (value == 538) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_6";
    if (value == 539) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_7";
    if (value == 540) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_8";
    if (value == 541) return "All.FEAT_EPIC_ENERGY_RESISTANCE_COLD_9";
    if (value == 563) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_1";
    if (value == 572) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_10";
    if (value == 564) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_2";
    if (value == 565) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_3";
    if (value == 566) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_4";
    if (value == 567) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_5";
    if (value == 568) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_6";
    if (value == 569) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_7";
    if (value == 570) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_8";
    if (value == 571) return "All.FEAT_EPIC_ENERGY_RESISTANCE_ELECTRICAL_9";
    if (value == 553) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_1";
    if (value == 562) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_10";
    if (value == 554) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_2";
    if (value == 555) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_3";
    if (value == 556) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_4";
    if (value == 557) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_5";
    if (value == 558) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_6";
    if (value == 559) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_7";
    if (value == 560) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_8";
    if (value == 561) return "All.FEAT_EPIC_ENERGY_RESISTANCE_FIRE_9";
    if (value == 573) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_1";
    if (value == 582) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_10";
    if (value == 574) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_2";
    if (value == 575) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_3";
    if (value == 576) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_4";
    if (value == 577) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_5";
    if (value == 578) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_6";
    if (value == 579) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_7";
    if (value == 580) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_8";
    if (value == 581) return "All.FEAT_EPIC_ENERGY_RESISTANCE_SONIC_9";
    if (value == 1003) return "All.FEAT_EPIC_EPIC_FIEND";
    if (value == 1002) return "All.FEAT_EPIC_EPIC_SHADOWLORD";
    if (value == 966) return "All.FEAT_EPIC_FIGHTER";
    if (value == 583) return "All.FEAT_EPIC_FORTITUDE";
    if (value == 764) return "All.FEAT_EPIC_GREAT_CHARISMA_1";
    if (value == 773) return "All.FEAT_EPIC_GREAT_CHARISMA_10";
    if (value == 765) return "All.FEAT_EPIC_GREAT_CHARISMA_2";
    if (value == 766) return "All.FEAT_EPIC_GREAT_CHARISMA_3";
    if (value == 767) return "All.FEAT_EPIC_GREAT_CHARISMA_4";
    if (value == 768) return "All.FEAT_EPIC_GREAT_CHARISMA_5";
    if (value == 769) return "All.FEAT_EPIC_GREAT_CHARISMA_6";
    if (value == 770) return "All.FEAT_EPIC_GREAT_CHARISMA_7";
    if (value == 771) return "All.FEAT_EPIC_GREAT_CHARISMA_8";
    if (value == 772) return "All.FEAT_EPIC_GREAT_CHARISMA_9";
    if (value == 774) return "All.FEAT_EPIC_GREAT_CONSTITUTION_1";
    if (value == 783) return "All.FEAT_EPIC_GREAT_CONSTITUTION_10";
    if (value == 775) return "All.FEAT_EPIC_GREAT_CONSTITUTION_2";
    if (value == 776) return "All.FEAT_EPIC_GREAT_CONSTITUTION_3";
    if (value == 777) return "All.FEAT_EPIC_GREAT_CONSTITUTION_4";
    if (value == 778) return "All.FEAT_EPIC_GREAT_CONSTITUTION_5";
    if (value == 779) return "All.FEAT_EPIC_GREAT_CONSTITUTION_6";
    if (value == 780) return "All.FEAT_EPIC_GREAT_CONSTITUTION_7";
    if (value == 781) return "All.FEAT_EPIC_GREAT_CONSTITUTION_8";
    if (value == 782) return "All.FEAT_EPIC_GREAT_CONSTITUTION_9";
    if (value == 784) return "All.FEAT_EPIC_GREAT_DEXTERITY_1";
    if (value == 793) return "All.FEAT_EPIC_GREAT_DEXTERITY_10";
    if (value == 785) return "All.FEAT_EPIC_GREAT_DEXTERITY_2";
    if (value == 786) return "All.FEAT_EPIC_GREAT_DEXTERITY_3";
    if (value == 787) return "All.FEAT_EPIC_GREAT_DEXTERITY_4";
    if (value == 788) return "All.FEAT_EPIC_GREAT_DEXTERITY_5";
    if (value == 789) return "All.FEAT_EPIC_GREAT_DEXTERITY_6";
    if (value == 790) return "All.FEAT_EPIC_GREAT_DEXTERITY_7";
    if (value == 791) return "All.FEAT_EPIC_GREAT_DEXTERITY_8";
    if (value == 792) return "All.FEAT_EPIC_GREAT_DEXTERITY_9";
    if (value == 794) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_1";
    if (value == 803) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_10";
    if (value == 795) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_2";
    if (value == 796) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_3";
    if (value == 797) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_4";
    if (value == 798) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_5";
    if (value == 799) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_6";
    if (value == 800) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_7";
    if (value == 801) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_8";
    if (value == 802) return "All.FEAT_EPIC_GREAT_INTELLIGENCE_9";
    if (value == 824) return "All.FEAT_EPIC_GREAT_SMITING_1";
    if (value == 833) return "All.FEAT_EPIC_GREAT_SMITING_10";
    if (value == 825) return "All.FEAT_EPIC_GREAT_SMITING_2";
    if (value == 826) return "All.FEAT_EPIC_GREAT_SMITING_3";
    if (value == 827) return "All.FEAT_EPIC_GREAT_SMITING_4";
    if (value == 828) return "All.FEAT_EPIC_GREAT_SMITING_5";
    if (value == 829) return "All.FEAT_EPIC_GREAT_SMITING_6";
    if (value == 830) return "All.FEAT_EPIC_GREAT_SMITING_7";
    if (value == 831) return "All.FEAT_EPIC_GREAT_SMITING_8";
    if (value == 832) return "All.FEAT_EPIC_GREAT_SMITING_9";
    if (value == 814) return "All.FEAT_EPIC_GREAT_STRENGTH_1";
    if (value == 823) return "All.FEAT_EPIC_GREAT_STRENGTH_10";
    if (value == 815) return "All.FEAT_EPIC_GREAT_STRENGTH_2";
    if (value == 816) return "All.FEAT_EPIC_GREAT_STRENGTH_3";
    if (value == 817) return "All.FEAT_EPIC_GREAT_STRENGTH_4";
    if (value == 818) return "All.FEAT_EPIC_GREAT_STRENGTH_5";
    if (value == 819) return "All.FEAT_EPIC_GREAT_STRENGTH_6";
    if (value == 820) return "All.FEAT_EPIC_GREAT_STRENGTH_7";
    if (value == 821) return "All.FEAT_EPIC_GREAT_STRENGTH_8";
    if (value == 822) return "All.FEAT_EPIC_GREAT_STRENGTH_9";
    if (value == 804) return "All.FEAT_EPIC_GREAT_WISDOM_1";
    if (value == 813) return "All.FEAT_EPIC_GREAT_WISDOM_10";
    if (value == 805) return "All.FEAT_EPIC_GREAT_WISDOM_2";
    if (value == 806) return "All.FEAT_EPIC_GREAT_WISDOM_3";
    if (value == 807) return "All.FEAT_EPIC_GREAT_WISDOM_4";
    if (value == 808) return "All.FEAT_EPIC_GREAT_WISDOM_5";
    if (value == 809) return "All.FEAT_EPIC_GREAT_WISDOM_6";
    if (value == 810) return "All.FEAT_EPIC_GREAT_WISDOM_7";
    if (value == 811) return "All.FEAT_EPIC_GREAT_WISDOM_8";
    if (value == 812) return "All.FEAT_EPIC_GREAT_WISDOM_9";
    if (value == 981) return "All.FEAT_EPIC_HARPER_SCOUT";
    if (value == 696) return "All.FEAT_EPIC_IMPROVED_COMBAT_CASTING";
    if (value == 697) return "All.FEAT_EPIC_IMPROVED_KI_STRIKE_4";
    if (value == 698) return "All.FEAT_EPIC_IMPROVED_KI_STRIKE_5";
    if (value == 834) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_1";
    if (value == 843) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_10";
    if (value == 835) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_2";
    if (value == 836) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_3";
    if (value == 837) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_4";
    if (value == 838) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_5";
    if (value == 839) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_6";
    if (value == 840) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_7";
    if (value == 841) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_8";
    if (value == 842) return "All.FEAT_EPIC_IMPROVED_SNEAK_ATTACK_9";
    if (value == 699) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_1";
    if (value == 708) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_10";
    if (value == 700) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_2";
    if (value == 701) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_3";
    if (value == 702) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_4";
    if (value == 703) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_5";
    if (value == 704) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_6";
    if (value == 705) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_7";
    if (value == 706) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_8";
    if (value == 707) return "All.FEAT_EPIC_IMPROVED_SPELL_RESISTANCE_9";
    if (value == 844) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_1";
    if (value == 853) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_10";
    if (value == 845) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_2";
    if (value == 846) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_3";
    if (value == 847) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_4";
    if (value == 848) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_5";
    if (value == 849) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_6";
    if (value == 850) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_7";
    if (value == 851) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_8";
    if (value == 852) return "All.FEAT_EPIC_IMPROVED_STUNNING_FIST_9";
    if (value == 870) return "All.FEAT_EPIC_LASTING_INSPIRATION";
    if (value == 971) return "All.FEAT_EPIC_MONK";
    if (value == 1060) return "All.FEAT_EPIC_OUTSIDER_SHAPE";
    if (value == 742) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_BASTARDSWORD";
    if (value == 730) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_BATTLEAXE";
    if (value == 709) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_CLUB";
    if (value == 746) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_CREATURE";
    if (value == 710) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_DAGGER";
    if (value == 711) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_DART";
    if (value == 743) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_DIREMACE";
    if (value == 744) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_DOUBLEAXE";
    if (value == 958) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_DWAXE";
    if (value == 731) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_GREATAXE";
    if (value == 727) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_GREATSWORD";
    if (value == 732) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_HALBERD";
    if (value == 728) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_HANDAXE";
    if (value == 712) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_HEAVYCROSSBOW";
    if (value == 736) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_HEAVYFLAIL";
    if (value == 737) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_KAMA";
    if (value == 741) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_KATANA";
    if (value == 738) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_KUKRI";
    if (value == 713) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTCROSSBOW";
    if (value == 734) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTFLAIL";
    if (value == 733) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTHAMMER";
    if (value == 714) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_LIGHTMACE";
    if (value == 721) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_LONGBOW";
    if (value == 726) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_LONGSWORD";
    if (value == 715) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_MORNINGSTAR";
    if (value == 716) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_QUARTERSTAFF";
    if (value == 724) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_RAPIER";
    if (value == 725) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SCIMITAR";
    if (value == 740) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SCYTHE";
    if (value == 722) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SHORTBOW";
    if (value == 717) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SHORTSPEAR";
    if (value == 723) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SHORTSWORD";
    if (value == 739) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SHURIKEN";
    if (value == 718) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SICKLE";
    if (value == 719) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_SLING";
    if (value == 729) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_THROWINGAXE";
    if (value == 1078) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_TRIDENT";
    if (value == 745) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_TWOBLADEDSWORD";
    if (value == 720) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_UNARMED";
    if (value == 735) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_WARHAMMER";
    if (value == 999) return "All.FEAT_EPIC_OVERWHELMING_CRITICAL_WHIP";
    if (value == 972) return "All.FEAT_EPIC_PALADIN";
    if (value == 984) return "All.FEAT_EPIC_PALE_MASTER";
    if (value == 747) return "All.FEAT_EPIC_PERFECT_HEALTH";
    if (value == 584) return "All.FEAT_EPIC_PROWESS";
    if (value == 973) return "All.FEAT_EPIC_RANGER";
    if (value == 987) return "All.FEAT_EPIC_RED_DRAGON_DISC";
    if (value == 585) return "All.FEAT_EPIC_REFLEXES";
    if (value == 586) return "All.FEAT_EPIC_REPUTATION";
    if (value == 974) return "All.FEAT_EPIC_ROGUE";
    if (value == 748) return "All.FEAT_EPIC_SELF_CONCEALMENT_10";
    if (value == 749) return "All.FEAT_EPIC_SELF_CONCEALMENT_20";
    if (value == 750) return "All.FEAT_EPIC_SELF_CONCEALMENT_30";
    if (value == 751) return "All.FEAT_EPIC_SELF_CONCEALMENT_40";
    if (value == 752) return "All.FEAT_EPIC_SELF_CONCEALMENT_50";
    if (value == 980) return "All.FEAT_EPIC_SHADOWDANCER";
    if (value == 986) return "All.FEAT_EPIC_SHIFTER";
    if (value == 1066) return "All.FEAT_EPIC_SHIFTER_INFINITE_HUMANOID_SHAPE";
    if (value == 1062) return "All.FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_1";
    if (value == 1063) return "All.FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_2";
    if (value == 1064) return "All.FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_3";
    if (value == 1065) return "All.FEAT_EPIC_SHIFTER_INFINITE_WILDSHAPE_4";
    if (value == 587) return "All.FEAT_EPIC_SKILL_FOCUS_ANIMAL_EMPATHY";
    if (value == 588) return "All.FEAT_EPIC_SKILL_FOCUS_APPRAISE";
    if (value == 917) return "All.FEAT_EPIC_SKILL_FOCUS_BLUFF";
    if (value == 589) return "All.FEAT_EPIC_SKILL_FOCUS_CONCENTRATION";
    if (value == 913) return "All.FEAT_EPIC_SKILL_FOCUS_CRAFT_ARMOR";
    if (value == 590) return "All.FEAT_EPIC_SKILL_FOCUS_CRAFT_TRAP";
    if (value == 914) return "All.FEAT_EPIC_SKILL_FOCUS_CRAFT_WEAPON";
    if (value == 591) return "All.FEAT_EPIC_SKILL_FOCUS_DISABLETRAP";
    if (value == 592) return "All.FEAT_EPIC_SKILL_FOCUS_DISCIPLINE";
    if (value == 593) return "All.FEAT_EPIC_SKILL_FOCUS_HEAL";
    if (value == 594) return "All.FEAT_EPIC_SKILL_FOCUS_HIDE";
    if (value == 918) return "All.FEAT_EPIC_SKILL_FOCUS_INTIMIDATE";
    if (value == 595) return "All.FEAT_EPIC_SKILL_FOCUS_LISTEN";
    if (value == 596) return "All.FEAT_EPIC_SKILL_FOCUS_LORE";
    if (value == 597) return "All.FEAT_EPIC_SKILL_FOCUS_MOVESILENTLY";
    if (value == 598) return "All.FEAT_EPIC_SKILL_FOCUS_OPENLOCK";
    if (value == 599) return "All.FEAT_EPIC_SKILL_FOCUS_PARRY";
    if (value == 600) return "All.FEAT_EPIC_SKILL_FOCUS_PERFORM";
    if (value == 601) return "All.FEAT_EPIC_SKILL_FOCUS_PERSUADE";
    if (value == 602) return "All.FEAT_EPIC_SKILL_FOCUS_PICKPOCKET";
    if (value == 603) return "All.FEAT_EPIC_SKILL_FOCUS_SEARCH";
    if (value == 604) return "All.FEAT_EPIC_SKILL_FOCUS_SETTRAP";
    if (value == 605) return "All.FEAT_EPIC_SKILL_FOCUS_SPELLCRAFT";
    if (value == 606) return "All.FEAT_EPIC_SKILL_FOCUS_SPOT";
    if (value == 607) return "All.FEAT_EPIC_SKILL_FOCUS_TAUNT";
    if (value == 608) return "All.FEAT_EPIC_SKILL_FOCUS_TUMBLE";
    if (value == 609) return "All.FEAT_EPIC_SKILL_FOCUS_USEMAGICDEVICE";
    if (value == 975) return "All.FEAT_EPIC_SORCERER";
    if (value == 875) return "All.FEAT_EPIC_SPELL_DRAGON_KNIGHT";
    if (value == 990) return "All.FEAT_EPIC_SPELL_EPIC_WARDING";
    if (value == 610) return "All.FEAT_EPIC_SPELL_FOCUS_ABJURATION";
    if (value == 611) return "All.FEAT_EPIC_SPELL_FOCUS_CONJURATION";
    if (value == 612) return "All.FEAT_EPIC_SPELL_FOCUS_DIVINATION";
    if (value == 613) return "All.FEAT_EPIC_SPELL_FOCUS_ENCHANTMENT";
    if (value == 614) return "All.FEAT_EPIC_SPELL_FOCUS_EVOCATION";
    if (value == 615) return "All.FEAT_EPIC_SPELL_FOCUS_ILLUSION";
    if (value == 616) return "All.FEAT_EPIC_SPELL_FOCUS_NECROMANCY";
    if (value == 617) return "All.FEAT_EPIC_SPELL_FOCUS_TRANSMUTATION";
    if (value == 876) return "All.FEAT_EPIC_SPELL_HELLBALL";
    if (value == 877) return "All.FEAT_EPIC_SPELL_MAGE_ARMOUR";
    if (value == 874) return "All.FEAT_EPIC_SPELL_MUMMY_DUST";
    if (value == 618) return "All.FEAT_EPIC_SPELL_PENETRATION";
    if (value == 878) return "All.FEAT_EPIC_SPELL_RUIN";
    if (value == 753) return "All.FEAT_EPIC_SUPERIOR_INITIATIVE";
    if (value == 1071) return "All.FEAT_EPIC_SUPERIOR_WEAPON_FOCUS";
    if (value == 989) return "All.FEAT_EPIC_TERRIFYING_RAGE";
    if (value == 988) return "All.FEAT_EPIC_THUNDERING_RAGE";
    if (value == 754) return "All.FEAT_EPIC_TOUGHNESS_1";
    if (value == 763) return "All.FEAT_EPIC_TOUGHNESS_10";
    if (value == 755) return "All.FEAT_EPIC_TOUGHNESS_2";
    if (value == 756) return "All.FEAT_EPIC_TOUGHNESS_3";
    if (value == 757) return "All.FEAT_EPIC_TOUGHNESS_4";
    if (value == 758) return "All.FEAT_EPIC_TOUGHNESS_5";
    if (value == 759) return "All.FEAT_EPIC_TOUGHNESS_6";
    if (value == 760) return "All.FEAT_EPIC_TOUGHNESS_7";
    if (value == 761) return "All.FEAT_EPIC_TOUGHNESS_8";
    if (value == 762) return "All.FEAT_EPIC_TOUGHNESS_9";
    if (value == 652) return "All.FEAT_EPIC_WEAPON_FOCUS_BASTARDSWORD";
    if (value == 640) return "All.FEAT_EPIC_WEAPON_FOCUS_BATTLEAXE";
    if (value == 619) return "All.FEAT_EPIC_WEAPON_FOCUS_CLUB";
    if (value == 656) return "All.FEAT_EPIC_WEAPON_FOCUS_CREATURE";
    if (value == 620) return "All.FEAT_EPIC_WEAPON_FOCUS_DAGGER";
    if (value == 621) return "All.FEAT_EPIC_WEAPON_FOCUS_DART";
    if (value == 653) return "All.FEAT_EPIC_WEAPON_FOCUS_DIREMACE";
    if (value == 654) return "All.FEAT_EPIC_WEAPON_FOCUS_DOUBLEAXE";
    if (value == 956) return "All.FEAT_EPIC_WEAPON_FOCUS_DWAXE";
    if (value == 641) return "All.FEAT_EPIC_WEAPON_FOCUS_GREATAXE";
    if (value == 637) return "All.FEAT_EPIC_WEAPON_FOCUS_GREATSWORD";
    if (value == 642) return "All.FEAT_EPIC_WEAPON_FOCUS_HALBERD";
    if (value == 638) return "All.FEAT_EPIC_WEAPON_FOCUS_HANDAXE";
    if (value == 622) return "All.FEAT_EPIC_WEAPON_FOCUS_HEAVYCROSSBOW";
    if (value == 646) return "All.FEAT_EPIC_WEAPON_FOCUS_HEAVYFLAIL";
    if (value == 647) return "All.FEAT_EPIC_WEAPON_FOCUS_KAMA";
    if (value == 651) return "All.FEAT_EPIC_WEAPON_FOCUS_KATANA";
    if (value == 648) return "All.FEAT_EPIC_WEAPON_FOCUS_KUKRI";
    if (value == 623) return "All.FEAT_EPIC_WEAPON_FOCUS_LIGHTCROSSBOW";
    if (value == 644) return "All.FEAT_EPIC_WEAPON_FOCUS_LIGHTFLAIL";
    if (value == 643) return "All.FEAT_EPIC_WEAPON_FOCUS_LIGHTHAMMER";
    if (value == 624) return "All.FEAT_EPIC_WEAPON_FOCUS_LIGHTMACE";
    if (value == 631) return "All.FEAT_EPIC_WEAPON_FOCUS_LONGBOW";
    if (value == 636) return "All.FEAT_EPIC_WEAPON_FOCUS_LONGSWORD";
    if (value == 625) return "All.FEAT_EPIC_WEAPON_FOCUS_MORNINGSTAR";
    if (value == 626) return "All.FEAT_EPIC_WEAPON_FOCUS_QUARTERSTAFF";
    if (value == 634) return "All.FEAT_EPIC_WEAPON_FOCUS_RAPIER";
    if (value == 635) return "All.FEAT_EPIC_WEAPON_FOCUS_SCIMITAR";
    if (value == 650) return "All.FEAT_EPIC_WEAPON_FOCUS_SCYTHE";
    if (value == 632) return "All.FEAT_EPIC_WEAPON_FOCUS_SHORTBOW";
    if (value == 627) return "All.FEAT_EPIC_WEAPON_FOCUS_SHORTSPEAR";
    if (value == 633) return "All.FEAT_EPIC_WEAPON_FOCUS_SHORTSWORD";
    if (value == 649) return "All.FEAT_EPIC_WEAPON_FOCUS_SHURIKEN";
    if (value == 628) return "All.FEAT_EPIC_WEAPON_FOCUS_SICKLE";
    if (value == 629) return "All.FEAT_EPIC_WEAPON_FOCUS_SLING";
    if (value == 639) return "All.FEAT_EPIC_WEAPON_FOCUS_THROWINGAXE";
    if (value == 1076) return "All.FEAT_EPIC_WEAPON_FOCUS_TRIDENT";
    if (value == 655) return "All.FEAT_EPIC_WEAPON_FOCUS_TWOBLADEDSWORD";
    if (value == 630) return "All.FEAT_EPIC_WEAPON_FOCUS_UNARMED";
    if (value == 645) return "All.FEAT_EPIC_WEAPON_FOCUS_WARHAMMER";
    if (value == 997) return "All.FEAT_EPIC_WEAPON_FOCUS_WHIP";
    if (value == 983) return "All.FEAT_EPIC_WEAPON_MASTER";
    if (value == 690) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_BASTARDSWORD";
    if (value == 678) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_BATTLEAXE";
    if (value == 657) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_CLUB";
    if (value == 694) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_CREATURE";
    if (value == 658) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_DAGGER";
    if (value == 659) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_DART";
    if (value == 691) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_DIREMACE";
    if (value == 692) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_DOUBLEAXE";
    if (value == 957) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_DWAXE";
    if (value == 679) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_GREATAXE";
    if (value == 675) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_GREATSWORD";
    if (value == 680) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_HALBERD";
    if (value == 676) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_HANDAXE";
    if (value == 660) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_HEAVYCROSSBOW";
    if (value == 684) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_HEAVYFLAIL";
    if (value == 685) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_KAMA";
    if (value == 689) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_KATANA";
    if (value == 686) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_KUKRI";
    if (value == 661) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTCROSSBOW";
    if (value == 682) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTFLAIL";
    if (value == 681) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTHAMMER";
    if (value == 662) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_LIGHTMACE";
    if (value == 669) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_LONGBOW";
    if (value == 674) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_LONGSWORD";
    if (value == 663) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_MORNINGSTAR";
    if (value == 664) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_QUARTERSTAFF";
    if (value == 672) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_RAPIER";
    if (value == 673) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SCIMITAR";
    if (value == 688) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SCYTHE";
    if (value == 670) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SHORTBOW";
    if (value == 665) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SHORTSPEAR";
    if (value == 671) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SHORTSWORD";
    if (value == 687) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SHURIKEN";
    if (value == 666) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SICKLE";
    if (value == 667) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_SLING";
    if (value == 677) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_THROWINGAXE";
    if (value == 1077) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_TRIDENT";
    if (value == 693) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_TWOBLADEDSWORD";
    if (value == 668) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_UNARMED";
    if (value == 683) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_WARHAMMER";
    if (value == 998) return "All.FEAT_EPIC_WEAPON_SPECIALIZATION_WHIP";
    if (value == 873) return "All.FEAT_EPIC_WILD_SHAPE_DRAGON";
    if (value == 872) return "All.FEAT_EPIC_WILD_SHAPE_UNDEAD";
    if (value == 695) return "All.FEAT_EPIC_WILL";
    if (value == 976) return "All.FEAT_EPIC_WIZARD";
    if (value == 206) return "All.FEAT_EVASION";
    if (value == 315) return "All.FEAT_EVIL_DOMAIN_POWER";
    if (value == 389) return "All.FEAT_EXPERTISE";
    if (value == 12) return "All.FEAT_EXTEND_SPELL";
    if (value == 423) return "All.FEAT_EXTRA_MUSIC";
    if (value == 910) return "All.FEAT_EXTRA_SMITING";
    if (value == 410) return "All.FEAT_EXTRA_STUNNING_ATTACK";
    if (value == 13) return "All.FEAT_EXTRA_TURNING";
    if (value == 480) return "All.FEAT_EYE_OF_GRUUMSH_BLINDING_SPITTLE";
    if (value == 481) return "All.FEAT_EYE_OF_GRUUMSH_BLINDING_SPITTLE_2";
    if (value == 482) return "All.FEAT_EYE_OF_GRUUMSH_COMMAND_THE_HORDE";
    if (value == 484) return "All.FEAT_EYE_OF_GRUUMSH_RITUAL_SCARRING";
    if (value == 487) return "All.FEAT_EYE_OF_GRUUMSH_SIGHT_OF_GRUUMSH";
    if (value == 483) return "All.FEAT_EYE_OF_GRUUMSH_SWING_BLINDLY";
    if (value == 268) return "All.FEAT_FAVORED_ENEMY_ABERRATION";
    if (value == 269) return "All.FEAT_FAVORED_ENEMY_ANIMAL";
    if (value == 270) return "All.FEAT_FAVORED_ENEMY_BEAST";
    if (value == 271) return "All.FEAT_FAVORED_ENEMY_CONSTRUCT";
    if (value == 272) return "All.FEAT_FAVORED_ENEMY_DRAGON";
    if (value == 261) return "All.FEAT_FAVORED_ENEMY_DWARF";
    if (value == 277) return "All.FEAT_FAVORED_ENEMY_ELEMENTAL";
    if (value == 262) return "All.FEAT_FAVORED_ENEMY_ELF";
    if (value == 278) return "All.FEAT_FAVORED_ENEMY_FEY";
    if (value == 279) return "All.FEAT_FAVORED_ENEMY_GIANT";
    if (value == 263) return "All.FEAT_FAVORED_ENEMY_GNOME";
    if (value == 273) return "All.FEAT_FAVORED_ENEMY_GOBLINOID";
    if (value == 265) return "All.FEAT_FAVORED_ENEMY_HALFELF";
    if (value == 264) return "All.FEAT_FAVORED_ENEMY_HALFLING";
    if (value == 266) return "All.FEAT_FAVORED_ENEMY_HALFORC";
    if (value == 267) return "All.FEAT_FAVORED_ENEMY_HUMAN";
    if (value == 280) return "All.FEAT_FAVORED_ENEMY_MAGICAL_BEAST";
    if (value == 274) return "All.FEAT_FAVORED_ENEMY_MONSTROUS";
    if (value == 275) return "All.FEAT_FAVORED_ENEMY_ORC";
    if (value == 281) return "All.FEAT_FAVORED_ENEMY_OUTSIDER";
    if (value == 276) return "All.FEAT_FAVORED_ENEMY_REPTILIAN";
    if (value == 284) return "All.FEAT_FAVORED_ENEMY_SHAPECHANGER";
    if (value == 285) return "All.FEAT_FAVORED_ENEMY_UNDEAD";
    if (value == 286) return "All.FEAT_FAVORED_ENEMY_VERMIN";
    if (value == 249) return "All.FEAT_FEARLESS";
    if (value == 316) return "All.FEAT_FIRE_DOMAIN_POWER";
    if (value == 204) return "All.FEAT_FLURRY_OF_BLOWS";
    if (value == 250) return "All.FEAT_GOOD_AIM";
    if (value == 317) return "All.FEAT_GOOD_DOMAIN_POWER";
    if (value == 393) return "All.FEAT_GREATER_SPELL_FOCUS_ABJURATION";
    if (value == 394) return "All.FEAT_GREATER_SPELL_FOCUS_CONJURATION";
    if (value == 395) return "All.FEAT_GREATER_SPELL_FOCUS_DIVINATION";
    if (value == 395) return "All.FEAT_GREATER_SPELL_FOCUS_DIVINIATION";
    if (value == 396) return "All.FEAT_GREATER_SPELL_FOCUS_ENCHANTMENT";
    if (value == 397) return "All.FEAT_GREATER_SPELL_FOCUS_EVOCATION";
    if (value == 398) return "All.FEAT_GREATER_SPELL_FOCUS_ILLUSION";
    if (value == 399) return "All.FEAT_GREATER_SPELL_FOCUS_NECROMANCY";
    if (value == 400) return "All.FEAT_GREATER_SPELL_FOCUS_TRANSMUTATION";
    if (value == 401) return "All.FEAT_GREATER_SPELL_PENETRATION";
    if (value == 898) return "All.FEAT_GREATER_WILDSHAPE_1";
    if (value == 900) return "All.FEAT_GREATER_WILDSHAPE_2";
    if (value == 901) return "All.FEAT_GREATER_WILDSHAPE_3";
    if (value == 903) return "All.FEAT_GREATER_WILDSHAPE_4";
    if (value == 391) return "All.FEAT_GREAT_CLEAVE";
    if (value == 14) return "All.FEAT_GREAT_FORTITUDE";
    if (value == 236) return "All.FEAT_HARDINESS_VERSUS_ENCHANTMENTS";
    if (value == 241) return "All.FEAT_HARDINESS_VERSUS_ILLUSIONS";
    if (value == 229) return "All.FEAT_HARDINESS_VERSUS_POISONS";
    if (value == 230) return "All.FEAT_HARDINESS_VERSUS_SPELLS";
    if (value == 442) return "All.FEAT_HARPER_CATS_GRACE";
    if (value == 443) return "All.FEAT_HARPER_EAGLES_SPLENDOR";
    if (value == 444) return "All.FEAT_HARPER_INVISIBILITY";
    if (value == 441) return "All.FEAT_HARPER_SLEEP";
    if (value == 318) return "All.FEAT_HEALING_DOMAIN_POWER";
    if (value == 433) return "All.FEAT_HIDE_IN_PLAIN_SIGHT";
    if (value == 1094) return "All.FEAT_HORSE_ASSIGN_MOUNT";
    if (value == 1091) return "All.FEAT_HORSE_DISMOUNT";
    if (value == 1089) return "All.FEAT_HORSE_MENU";
    if (value == 1090) return "All.FEAT_HORSE_MOUNT";
    if (value == 1093) return "All.FEAT_HORSE_PARTY_DISMOUNT";
    if (value == 1092) return "All.FEAT_HORSE_PARTY_MOUNT";
    if (value == 902) return "All.FEAT_HUMANOID_SHAPE";
    if (value == 235) return "All.FEAT_IMMUNITY_TO_SLEEP";
    if (value == 85) return "All.FEAT_IMPROVED_CRITICAL_BASTARD_SWORD";
    if (value == 72) return "All.FEAT_IMPROVED_CRITICAL_BATTLE_AXE";
    if (value == 15) return "All.FEAT_IMPROVED_CRITICAL_CLUB";
    if (value == 292) return "All.FEAT_IMPROVED_CRITICAL_CREATURE";
    if (value == 52) return "All.FEAT_IMPROVED_CRITICAL_DAGGER";
    if (value == 53) return "All.FEAT_IMPROVED_CRITICAL_DART";
    if (value == 87) return "All.FEAT_IMPROVED_CRITICAL_DIRE_MACE";
    if (value == 88) return "All.FEAT_IMPROVED_CRITICAL_DOUBLE_AXE";
    if (value == 954) return "All.FEAT_IMPROVED_CRITICAL_DWAXE";
    if (value == 73) return "All.FEAT_IMPROVED_CRITICAL_GREAT_AXE";
    if (value == 69) return "All.FEAT_IMPROVED_CRITICAL_GREAT_SWORD";
    if (value == 74) return "All.FEAT_IMPROVED_CRITICAL_HALBERD";
    if (value == 70) return "All.FEAT_IMPROVED_CRITICAL_HAND_AXE";
    if (value == 54) return "All.FEAT_IMPROVED_CRITICAL_HEAVY_CROSSBOW";
    if (value == 78) return "All.FEAT_IMPROVED_CRITICAL_HEAVY_FLAIL";
    if (value == 79) return "All.FEAT_IMPROVED_CRITICAL_KAMA";
    if (value == 84) return "All.FEAT_IMPROVED_CRITICAL_KATANA";
    if (value == 80) return "All.FEAT_IMPROVED_CRITICAL_KUKRI";
    if (value == 55) return "All.FEAT_IMPROVED_CRITICAL_LIGHT_CROSSBOW";
    if (value == 76) return "All.FEAT_IMPROVED_CRITICAL_LIGHT_FLAIL";
    if (value == 75) return "All.FEAT_IMPROVED_CRITICAL_LIGHT_HAMMER";
    if (value == 56) return "All.FEAT_IMPROVED_CRITICAL_LIGHT_MACE";
    if (value == 63) return "All.FEAT_IMPROVED_CRITICAL_LONGBOW";
    if (value == 68) return "All.FEAT_IMPROVED_CRITICAL_LONG_SWORD";
    if (value == 57) return "All.FEAT_IMPROVED_CRITICAL_MORNING_STAR";
    if (value == 66) return "All.FEAT_IMPROVED_CRITICAL_RAPIER";
    if (value == 67) return "All.FEAT_IMPROVED_CRITICAL_SCIMITAR";
    if (value == 83) return "All.FEAT_IMPROVED_CRITICAL_SCYTHE";
    if (value == 64) return "All.FEAT_IMPROVED_CRITICAL_SHORTBOW";
    if (value == 65) return "All.FEAT_IMPROVED_CRITICAL_SHORT_SWORD";
    if (value == 82) return "All.FEAT_IMPROVED_CRITICAL_SHURIKEN";
    if (value == 60) return "All.FEAT_IMPROVED_CRITICAL_SICKLE";
    if (value == 61) return "All.FEAT_IMPROVED_CRITICAL_SLING";
    if (value == 59) return "All.FEAT_IMPROVED_CRITICAL_SPEAR";
    if (value == 58) return "All.FEAT_IMPROVED_CRITICAL_STAFF";
    if (value == 71) return "All.FEAT_IMPROVED_CRITICAL_THROWING_AXE";
    if (value == 1074) return "All.FEAT_IMPROVED_CRITICAL_TRIDENT";
    if (value == 89) return "All.FEAT_IMPROVED_CRITICAL_TWO_BLADED_SWORD";
    if (value == 62) return "All.FEAT_IMPROVED_CRITICAL_UNARMED_STRIKE";
    if (value == 77) return "All.FEAT_IMPROVED_CRITICAL_WAR_HAMMER";
    if (value == 995) return "All.FEAT_IMPROVED_CRITICAL_WHIP";
    if (value == 16) return "All.FEAT_IMPROVED_DISARM";
    if (value == 212) return "All.FEAT_IMPROVED_EVASION";
    if (value == 390) return "All.FEAT_IMPROVED_EXPERTISE";
    if (value == 377) return "All.FEAT_IMPROVED_INITIATIVE";
    if (value == 17) return "All.FEAT_IMPROVED_KNOCKDOWN";
    if (value == 18) return "All.FEAT_IMPROVED_PARRY";
    if (value == 19) return "All.FEAT_IMPROVED_POWER_ATTACK";
    if (value == 20) return "All.FEAT_IMPROVED_TWO_WEAPON_FIGHTING";
    if (value == 21) return "All.FEAT_IMPROVED_UNARMED_STRIKE";
    if (value == 868) return "All.FEAT_IMPROVED_WHIRLWIND";
    if (value == 883) return "All.FEAT_INCREASE_MULTIPLIER";
    if (value == 477) return "All.FEAT_INFLICT_CRITICAL_WOUNDS";
    if (value == 474) return "All.FEAT_INFLICT_LIGHT_WOUNDS";
    if (value == 475) return "All.FEAT_INFLICT_MODERATE_WOUNDS";
    if (value == 476) return "All.FEAT_INFLICT_SERIOUS_WOUNDS";
    if (value == 22) return "All.FEAT_IRON_WILL";
    if (value == 240) return "All.FEAT_KEEN_SENSE";
    if (value == 885) return "All.FEAT_KI_CRITICAL";
    if (value == 882) return "All.FEAT_KI_DAMAGE";
    if (value == 213) return "All.FEAT_KI_STRIKE";
    if (value == 23) return "All.FEAT_KNOCKDOWN";
    if (value == 319) return "All.FEAT_KNOWLEDGE_DOMAIN_POWER";
    if (value == 299) return "All.FEAT_LAY_ON_HANDS";
    if (value == 24) return "All.FEAT_LIGHTNING_REFLEXES";
    if (value == 424) return "All.FEAT_LINGERING_SONG";
    if (value == 439) return "All.FEAT_LLIIRAS_HEART";
    if (value == 354) return "All.FEAT_LOWLIGHTVISION";
    if (value == 248) return "All.FEAT_LUCKY";
    if (value == 309) return "All.FEAT_LUCK_DOMAIN_POWER";
    if (value == 382) return "All.FEAT_LUCK_OF_HEROES";
    if (value == 320) return "All.FEAT_MAGIC_DOMAIN_POWER";
    if (value == 25) return "All.FEAT_MAXIMIZE_SPELL";
    if (value == 869) return "All.FEAT_MIGHTY_RAGE";
    if (value == 26) return "All.FEAT_MOBILITY";
    if (value == 260) return "All.FEAT_MONK_AC_BONUS";
    if (value == 207) return "All.FEAT_MONK_ENDURANCE";
    if (value == 1088) return "All.FEAT_MOUNTED_ARCHERY";
    if (value == 1087) return "All.FEAT_MOUNTED_COMBAT";
    if (value == 198) return "All.FEAT_NATURE_SENSE";
    if (value == 224) return "All.FEAT_OPPORTUNIST";
    if (value == 1095) return "All.FEAT_PALADIN_SUMMON_MOUNT";
    if (value == 244) return "All.FEAT_PARTIAL_SKILL_AFFINITY_LISTEN";
    if (value == 245) return "All.FEAT_PARTIAL_SKILL_AFFINITY_SEARCH";
    if (value == 246) return "All.FEAT_PARTIAL_SKILL_AFFINITY_SPOT";
    if (value == 1082) return "All.FEAT_PDK_FEAR";
    if (value == 1085) return "All.FEAT_PDK_INSPIRE_1";
    if (value == 1086) return "All.FEAT_PDK_INSPIRE_2";
    if (value == 1080) return "All.FEAT_PDK_RALLY";
    if (value == 1081) return "All.FEAT_PDK_SHIELD";
    if (value == 1084) return "All.FEAT_PDK_STAND";
    if (value == 1083) return "All.FEAT_PDK_WRATH";
    if (value == 216) return "All.FEAT_PERFECT_SELF";
    if (value == 321) return "All.FEAT_PLANT_DOMAIN_POWER";
    if (value == 1106) return "All.FEAT_PLAYER_TOOL_01";
    if (value == 1107) return "All.FEAT_PLAYER_TOOL_02";
    if (value == 1108) return "All.FEAT_PLAYER_TOOL_03";
    if (value == 1109) return "All.FEAT_PLAYER_TOOL_04";
    if (value == 1110) return "All.FEAT_PLAYER_TOOL_05";
    if (value == 1111) return "All.FEAT_PLAYER_TOOL_06";
    if (value == 1112) return "All.FEAT_PLAYER_TOOL_07";
    if (value == 1113) return "All.FEAT_PLAYER_TOOL_08";
    if (value == 1114) return "All.FEAT_PLAYER_TOOL_09";
    if (value == 1115) return "All.FEAT_PLAYER_TOOL_10";
    if (value == 27) return "All.FEAT_POINT_BLANK_SHOT";
    if (value == 28) return "All.FEAT_POWER_ATTACK";
    if (value == 454) return "All.FEAT_PRESTIGE_ARROW_OF_DEATH";
    if (value == 469) return "All.FEAT_PRESTIGE_DARKNESS";
    if (value == 473) return "All.FEAT_PRESTIGE_DARK_BLESSING";
    if (value == 455) return "All.FEAT_PRESTIGE_DEATH_ATTACK_1";
    if (value == 1020) return "All.FEAT_PRESTIGE_DEATH_ATTACK_10";
    if (value == 1021) return "All.FEAT_PRESTIGE_DEATH_ATTACK_11";
    if (value == 1022) return "All.FEAT_PRESTIGE_DEATH_ATTACK_12";
    if (value == 1023) return "All.FEAT_PRESTIGE_DEATH_ATTACK_13";
    if (value == 1024) return "All.FEAT_PRESTIGE_DEATH_ATTACK_14";
    if (value == 1025) return "All.FEAT_PRESTIGE_DEATH_ATTACK_15";
    if (value == 1026) return "All.FEAT_PRESTIGE_DEATH_ATTACK_16";
    if (value == 1027) return "All.FEAT_PRESTIGE_DEATH_ATTACK_17";
    if (value == 1028) return "All.FEAT_PRESTIGE_DEATH_ATTACK_18";
    if (value == 1029) return "All.FEAT_PRESTIGE_DEATH_ATTACK_19";
    if (value == 456) return "All.FEAT_PRESTIGE_DEATH_ATTACK_2";
    if (value == 1030) return "All.FEAT_PRESTIGE_DEATH_ATTACK_20";
    if (value == 457) return "All.FEAT_PRESTIGE_DEATH_ATTACK_3";
    if (value == 458) return "All.FEAT_PRESTIGE_DEATH_ATTACK_4";
    if (value == 459) return "All.FEAT_PRESTIGE_DEATH_ATTACK_5";
    if (value == 1004) return "All.FEAT_PRESTIGE_DEATH_ATTACK_6";
    if (value == 1005) return "All.FEAT_PRESTIGE_DEATH_ATTACK_7";
    if (value == 1006) return "All.FEAT_PRESTIGE_DEATH_ATTACK_8";
    if (value == 1019) return "All.FEAT_PRESTIGE_DEATH_ATTACK_9";
    if (value == 949) return "All.FEAT_PRESTIGE_DEFENSIVE_AWARENESS_1";
    if (value == 950) return "All.FEAT_PRESTIGE_DEFENSIVE_AWARENESS_2";
    if (value == 951) return "All.FEAT_PRESTIGE_DEFENSIVE_AWARENESS_3";
    if (value == 445) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_1";
    if (value == 1049) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_10";
    if (value == 1050) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_11";
    if (value == 1051) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_12";
    if (value == 1052) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_13";
    if (value == 1053) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_14";
    if (value == 1054) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_15";
    if (value == 1055) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_16";
    if (value == 1056) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_17";
    if (value == 1057) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_18";
    if (value == 1058) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_19";
    if (value == 446) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_2";
    if (value == 1059) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_20";
    if (value == 447) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_3";
    if (value == 448) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_4";
    if (value == 449) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_5";
    if (value == 1045) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_6";
    if (value == 1046) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_7";
    if (value == 1047) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_8";
    if (value == 1048) return "All.FEAT_PRESTIGE_ENCHANT_ARROW_9";
    if (value == 453) return "All.FEAT_PRESTIGE_HAIL_OF_ARROWS";
    if (value == 450) return "All.FEAT_PRESTIGE_IMBUE_ARROW";
    if (value == 470) return "All.FEAT_PRESTIGE_INVISIBILITY_1";
    if (value == 471) return "All.FEAT_PRESTIGE_INVISIBILITY_2";
    if (value == 463) return "All.FEAT_PRESTIGE_POISON_SAVE_1";
    if (value == 464) return "All.FEAT_PRESTIGE_POISON_SAVE_2";
    if (value == 465) return "All.FEAT_PRESTIGE_POISON_SAVE_3";
    if (value == 466) return "All.FEAT_PRESTIGE_POISON_SAVE_4";
    if (value == 467) return "All.FEAT_PRESTIGE_POISON_SAVE_5";
    if (value == 1070) return "All.FEAT_PRESTIGE_POISON_SAVE_EPIC";
    if (value == 451) return "All.FEAT_PRESTIGE_SEEKER_ARROW_1";
    if (value == 452) return "All.FEAT_PRESTIGE_SEEKER_ARROW_2";
    if (value == 468) return "All.FEAT_PRESTIGE_SPELL_GHOSTLY_VISAGE";
    if (value == 308) return "All.FEAT_PROTECTION_DOMAIN_POWER";
    if (value == 209) return "All.FEAT_PURITY_OF_BODY";
    if (value == 29) return "All.FEAT_QUICKEN_SPELL";
    if (value == 258) return "All.FEAT_QUICK_TO_MASTER";
    if (value == 296) return "All.FEAT_QUIVERING_PALM";
    if (value == 411) return "All.FEAT_RAPID_RELOAD";
    if (value == 30) return "All.FEAT_RAPID_SHOT";
    if (value == 302) return "All.FEAT_REMOVE_DISEASE";
    if (value == 426) return "All.FEAT_RESIST_DISEASE";
    if (value == 428) return "All.FEAT_RESIST_ENERGY_ACID";
    if (value == 427) return "All.FEAT_RESIST_ENERGY_COLD";
    if (value == 430) return "All.FEAT_RESIST_ENERGY_ELECTRICAL";
    if (value == 429) return "All.FEAT_RESIST_ENERGY_FIRE";
    if (value == 431) return "All.FEAT_RESIST_ENERGY_SONIC";
    if (value == 202) return "All.FEAT_RESIST_NATURES_LURE";
    if (value == 383) return "All.FEAT_RESIST_POISON";
    if (value == 904) return "All.FEAT_SACRED_DEFENSE_1";
    if (value == 905) return "All.FEAT_SACRED_DEFENSE_2";
    if (value == 906) return "All.FEAT_SACRED_DEFENSE_3";
    if (value == 907) return "All.FEAT_SACRED_DEFENSE_4";
    if (value == 908) return "All.FEAT_SACRED_DEFENSE_5";
    if (value == 31) return "All.FEAT_SAP";
    if (value == 945) return "All.FEAT_SCRIBE_SCROLL";
    if (value == 434) return "All.FEAT_SHADOW_DAZE";
    if (value == 436) return "All.FEAT_SHADOW_EVADE";
    if (value == 32) return "All.FEAT_SHIELD_PROFICIENCY";
    if (value == 489) return "All.FEAT_SHOU_DISCIPLE_DODGE_2";
    if (value == 1031) return "All.FEAT_SHOU_DISCIPLE_DODGE_3";
    if (value == 899) return "All.FEAT_SHOU_DISCIPLE_MARTIAL_FLURRY_ANY";
    if (value == 866) return "All.FEAT_SHOU_DISCIPLE_MARTIAL_FLURRY_LIGHT";
    if (value == 33) return "All.FEAT_SILENCE_SPELL";
    if (value == 384) return "All.FEAT_SILVER_PALM";
    if (value == 404) return "All.FEAT_SKILLFOCUS_APPRAISE";
    if (value == 243) return "All.FEAT_SKILL_AFFINITY_CONCENTRATION";
    if (value == 237) return "All.FEAT_SKILL_AFFINITY_LISTEN";
    if (value == 234) return "All.FEAT_SKILL_AFFINITY_LORE";
    if (value == 247) return "All.FEAT_SKILL_AFFINITY_MOVE_SILENTLY";
    if (value == 238) return "All.FEAT_SKILL_AFFINITY_SEARCH";
    if (value == 239) return "All.FEAT_SKILL_AFFINITY_SPOT";
    if (value == 34) return "All.FEAT_SKILL_FOCUS_ANIMAL_EMPATHY";
    if (value == 915) return "All.FEAT_SKILL_FOCUS_BLUFF";
    if (value == 173) return "All.FEAT_SKILL_FOCUS_CONCENTRATION";
    if (value == 911) return "All.FEAT_SKILL_FOCUS_CRAFT_ARMOR";
    if (value == 407) return "All.FEAT_SKILL_FOCUS_CRAFT_TRAP";
    if (value == 912) return "All.FEAT_SKILL_FOCUS_CRAFT_WEAPON";
    if (value == 174) return "All.FEAT_SKILL_FOCUS_DISABLE_TRAP";
    if (value == 175) return "All.FEAT_SKILL_FOCUS_DISCIPLINE";
    if (value == 177) return "All.FEAT_SKILL_FOCUS_HEAL";
    if (value == 178) return "All.FEAT_SKILL_FOCUS_HIDE";
    if (value == 916) return "All.FEAT_SKILL_FOCUS_INTIMIDATE";
    if (value == 179) return "All.FEAT_SKILL_FOCUS_LISTEN";
    if (value == 180) return "All.FEAT_SKILL_FOCUS_LORE";
    if (value == 181) return "All.FEAT_SKILL_FOCUS_MOVE_SILENTLY";
    if (value == 182) return "All.FEAT_SKILL_FOCUS_OPEN_LOCK";
    if (value == 183) return "All.FEAT_SKILL_FOCUS_PARRY";
    if (value == 184) return "All.FEAT_SKILL_FOCUS_PERFORM";
    if (value == 185) return "All.FEAT_SKILL_FOCUS_PERSUADE";
    if (value == 186) return "All.FEAT_SKILL_FOCUS_PICK_POCKET";
    if (value == 187) return "All.FEAT_SKILL_FOCUS_SEARCH";
    if (value == 188) return "All.FEAT_SKILL_FOCUS_SET_TRAP";
    if (value == 189) return "All.FEAT_SKILL_FOCUS_SPELLCRAFT";
    if (value == 190) return "All.FEAT_SKILL_FOCUS_SPOT";
    if (value == 192) return "All.FEAT_SKILL_FOCUS_TAUNT";
    if (value == 406) return "All.FEAT_SKILL_FOCUS_TUMBLE";
    if (value == 193) return "All.FEAT_SKILL_FOCUS_USE_MAGIC_DEVICE";
    if (value == 225) return "All.FEAT_SKILL_MASTERY";
    if (value == 259) return "All.FEAT_SLIPPERY_MIND";
    if (value == 301) return "All.FEAT_SMITE_EVIL";
    if (value == 472) return "All.FEAT_SMITE_GOOD";
    if (value == 386) return "All.FEAT_SNAKEBLOOD";
    if (value == 221) return "All.FEAT_SNEAK_ATTACK";
    if (value == 35) return "All.FEAT_SPELL_FOCUS_ABJURATION";
    if (value == 166) return "All.FEAT_SPELL_FOCUS_CONJURATION";
    if (value == 167) return "All.FEAT_SPELL_FOCUS_DIVINATION";
    if (value == 168) return "All.FEAT_SPELL_FOCUS_ENCHANTMENT";
    if (value == 169) return "All.FEAT_SPELL_FOCUS_EVOCATION";
    if (value == 170) return "All.FEAT_SPELL_FOCUS_ILLUSION";
    if (value == 171) return "All.FEAT_SPELL_FOCUS_NECROMANCY";
    if (value == 172) return "All.FEAT_SPELL_FOCUS_TRANSMUTATION";
    if (value == 36) return "All.FEAT_SPELL_PENETRATION";
    if (value == 392) return "All.FEAT_SPRING_ATTACK";
    if (value == 387) return "All.FEAT_STEALTHY";
    if (value == 208) return "All.FEAT_STILL_MIND";
    if (value == 37) return "All.FEAT_STILL_SPELL";
    if (value == 227) return "All.FEAT_STONECUNNING";
    if (value == 307) return "All.FEAT_STRENGTH_DOMAIN_POWER";
    if (value == 388) return "All.FEAT_STRONGSOUL";
    if (value == 39) return "All.FEAT_STUNNING_FIST";
    if (value == 303) return "All.FEAT_SUMMON_FAMILIAR";
    if (value == 895) return "All.FEAT_SUMMON_GREATER_UNDEAD";
    if (value == 435) return "All.FEAT_SUMMON_SHADOW";
    if (value == 890) return "All.FEAT_SUMMON_UNDEAD";
    if (value == 322) return "All.FEAT_SUN_DOMAIN_POWER";
    if (value == 884) return "All.FEAT_SUPERIOR_WEAPON_FOCUS";
    if (value == 402) return "All.FEAT_THUG";
    if (value == 40) return "All.FEAT_TOUGHNESS";
    if (value == 894) return "All.FEAT_TOUGH_AS_BONE";
    if (value == 201) return "All.FEAT_TRACKLESS_STEP";
    if (value == 323) return "All.FEAT_TRAVEL_DOMAIN_POWER";
    if (value == 324) return "All.FEAT_TRICKERY_DOMAIN_POWER";
    if (value == 294) return "All.FEAT_TURN_UNDEAD";
    if (value == 41) return "All.FEAT_TWO_WEAPON_FIGHTING";
    if (value == 438) return "All.FEAT_TYMORAS_SMILE";
    if (value == 195) return "All.FEAT_UNCANNY_DODGE_1";
    if (value == 251) return "All.FEAT_UNCANNY_DODGE_2";
    if (value == 252) return "All.FEAT_UNCANNY_DODGE_3";
    if (value == 253) return "All.FEAT_UNCANNY_DODGE_4";
    if (value == 254) return "All.FEAT_UNCANNY_DODGE_5";
    if (value == 255) return "All.FEAT_UNCANNY_DODGE_6";
    if (value == 226) return "All.FEAT_UNCANNY_REFLEX";
    if (value == 892) return "All.FEAT_UNDEAD_GRAFT_1";
    if (value == 893) return "All.FEAT_UNDEAD_GRAFT_2";
    if (value == 960) return "All.FEAT_USE_POISON";
    if (value == 203) return "All.FEAT_VENOM_IMMUNITY";
    if (value == 306) return "All.FEAT_WAR_DOMAIN_POWER";
    if (value == 325) return "All.FEAT_WATER_DOMAIN_POWER";
    if (value == 42) return "All.FEAT_WEAPON_FINESSE";
    if (value == 123) return "All.FEAT_WEAPON_FOCUS_BASTARD_SWORD";
    if (value == 110) return "All.FEAT_WEAPON_FOCUS_BATTLE_AXE";
    if (value == 43) return "All.FEAT_WEAPON_FOCUS_CLUB";
    if (value == 291) return "All.FEAT_WEAPON_FOCUS_CREATURE";
    if (value == 90) return "All.FEAT_WEAPON_FOCUS_DAGGER";
    if (value == 91) return "All.FEAT_WEAPON_FOCUS_DART";
    if (value == 125) return "All.FEAT_WEAPON_FOCUS_DIRE_MACE";
    if (value == 126) return "All.FEAT_WEAPON_FOCUS_DOUBLE_AXE";
    if (value == 952) return "All.FEAT_WEAPON_FOCUS_DWAXE";
    if (value == 111) return "All.FEAT_WEAPON_FOCUS_GREAT_AXE";
    if (value == 107) return "All.FEAT_WEAPON_FOCUS_GREAT_SWORD";
    if (value == 112) return "All.FEAT_WEAPON_FOCUS_HALBERD";
    if (value == 108) return "All.FEAT_WEAPON_FOCUS_HAND_AXE";
    if (value == 92) return "All.FEAT_WEAPON_FOCUS_HEAVY_CROSSBOW";
    if (value == 116) return "All.FEAT_WEAPON_FOCUS_HEAVY_FLAIL";
    if (value == 117) return "All.FEAT_WEAPON_FOCUS_KAMA";
    if (value == 122) return "All.FEAT_WEAPON_FOCUS_KATANA";
    if (value == 118) return "All.FEAT_WEAPON_FOCUS_KUKRI";
    if (value == 93) return "All.FEAT_WEAPON_FOCUS_LIGHT_CROSSBOW";
    if (value == 114) return "All.FEAT_WEAPON_FOCUS_LIGHT_FLAIL";
    if (value == 113) return "All.FEAT_WEAPON_FOCUS_LIGHT_HAMMER";
    if (value == 94) return "All.FEAT_WEAPON_FOCUS_LIGHT_MACE";
    if (value == 101) return "All.FEAT_WEAPON_FOCUS_LONGBOW";
    if (value == 106) return "All.FEAT_WEAPON_FOCUS_LONG_SWORD";
    if (value == 95) return "All.FEAT_WEAPON_FOCUS_MORNING_STAR";
    if (value == 104) return "All.FEAT_WEAPON_FOCUS_RAPIER";
    if (value == 105) return "All.FEAT_WEAPON_FOCUS_SCIMITAR";
    if (value == 121) return "All.FEAT_WEAPON_FOCUS_SCYTHE";
    if (value == 102) return "All.FEAT_WEAPON_FOCUS_SHORTBOW";
    if (value == 103) return "All.FEAT_WEAPON_FOCUS_SHORT_SWORD";
    if (value == 120) return "All.FEAT_WEAPON_FOCUS_SHURIKEN";
    if (value == 98) return "All.FEAT_WEAPON_FOCUS_SICKLE";
    if (value == 99) return "All.FEAT_WEAPON_FOCUS_SLING";
    if (value == 97) return "All.FEAT_WEAPON_FOCUS_SPEAR";
    if (value == 96) return "All.FEAT_WEAPON_FOCUS_STAFF";
    if (value == 109) return "All.FEAT_WEAPON_FOCUS_THROWING_AXE";
    if (value == 1072) return "All.FEAT_WEAPON_FOCUS_TRIDENT";
    if (value == 127) return "All.FEAT_WEAPON_FOCUS_TWO_BLADED_SWORD";
    if (value == 100) return "All.FEAT_WEAPON_FOCUS_UNARMED_STRIKE";
    if (value == 115) return "All.FEAT_WEAPON_FOCUS_WAR_HAMMER";
    if (value == 993) return "All.FEAT_WEAPON_FOCUS_WHIP";
    if (value == 940) return "All.FEAT_WEAPON_OF_CHOICE_BASTARDSWORD";
    if (value == 931) return "All.FEAT_WEAPON_OF_CHOICE_BATTLEAXE";
    if (value == 919) return "All.FEAT_WEAPON_OF_CHOICE_CLUB";
    if (value == 920) return "All.FEAT_WEAPON_OF_CHOICE_DAGGER";
    if (value == 941) return "All.FEAT_WEAPON_OF_CHOICE_DIREMACE";
    if (value == 942) return "All.FEAT_WEAPON_OF_CHOICE_DOUBLEAXE";
    if (value == 959) return "All.FEAT_WEAPON_OF_CHOICE_DWAXE";
    if (value == 932) return "All.FEAT_WEAPON_OF_CHOICE_GREATAXE";
    if (value == 929) return "All.FEAT_WEAPON_OF_CHOICE_GREATSWORD";
    if (value == 933) return "All.FEAT_WEAPON_OF_CHOICE_HALBERD";
    if (value == 930) return "All.FEAT_WEAPON_OF_CHOICE_HANDAXE";
    if (value == 937) return "All.FEAT_WEAPON_OF_CHOICE_HEAVYFLAIL";
    if (value == 880) return "All.FEAT_WEAPON_OF_CHOICE_KAMA";
    if (value == 939) return "All.FEAT_WEAPON_OF_CHOICE_KATANA";
    if (value == 881) return "All.FEAT_WEAPON_OF_CHOICE_KUKRI";
    if (value == 935) return "All.FEAT_WEAPON_OF_CHOICE_LIGHTFLAIL";
    if (value == 934) return "All.FEAT_WEAPON_OF_CHOICE_LIGHTHAMMER";
    if (value == 921) return "All.FEAT_WEAPON_OF_CHOICE_LIGHTMACE";
    if (value == 928) return "All.FEAT_WEAPON_OF_CHOICE_LONGSWORD";
    if (value == 922) return "All.FEAT_WEAPON_OF_CHOICE_MORNINGSTAR";
    if (value == 923) return "All.FEAT_WEAPON_OF_CHOICE_QUARTERSTAFF";
    if (value == 926) return "All.FEAT_WEAPON_OF_CHOICE_RAPIER";
    if (value == 927) return "All.FEAT_WEAPON_OF_CHOICE_SCIMITAR";
    if (value == 938) return "All.FEAT_WEAPON_OF_CHOICE_SCYTHE";
    if (value == 924) return "All.FEAT_WEAPON_OF_CHOICE_SHORTSPEAR";
    if (value == 925) return "All.FEAT_WEAPON_OF_CHOICE_SHORTSWORD";
    if (value == 879) return "All.FEAT_WEAPON_OF_CHOICE_SICKLE";
    if (value == 1079) return "All.FEAT_WEAPON_OF_CHOICE_TRIDENT";
    if (value == 943) return "All.FEAT_WEAPON_OF_CHOICE_TWOBLADEDSWORD";
    if (value == 936) return "All.FEAT_WEAPON_OF_CHOICE_WARHAMMER";
    if (value == 1000) return "All.FEAT_WEAPON_OF_CHOICE_WHIP";
    if (value == 289) return "All.FEAT_WEAPON_PROFICIENCY_CREATURE";
    if (value == 48) return "All.FEAT_WEAPON_PROFICIENCY_DRUID";
    if (value == 256) return "All.FEAT_WEAPON_PROFICIENCY_ELF";
    if (value == 44) return "All.FEAT_WEAPON_PROFICIENCY_EXOTIC";
    if (value == 45) return "All.FEAT_WEAPON_PROFICIENCY_MARTIAL";
    if (value == 49) return "All.FEAT_WEAPON_PROFICIENCY_MONK";
    if (value == 50) return "All.FEAT_WEAPON_PROFICIENCY_ROGUE";
    if (value == 46) return "All.FEAT_WEAPON_PROFICIENCY_SIMPLE";
    if (value == 51) return "All.FEAT_WEAPON_PROFICIENCY_WIZARD";
    if (value == 161) return "All.FEAT_WEAPON_SPECIALIZATION_BASTARD_SWORD";
    if (value == 148) return "All.FEAT_WEAPON_SPECIALIZATION_BATTLE_AXE";
    if (value == 47) return "All.FEAT_WEAPON_SPECIALIZATION_CLUB";
    if (value == 290) return "All.FEAT_WEAPON_SPECIALIZATION_CREATURE";
    if (value == 128) return "All.FEAT_WEAPON_SPECIALIZATION_DAGGER";
    if (value == 129) return "All.FEAT_WEAPON_SPECIALIZATION_DART";
    if (value == 163) return "All.FEAT_WEAPON_SPECIALIZATION_DIRE_MACE";
    if (value == 164) return "All.FEAT_WEAPON_SPECIALIZATION_DOUBLE_AXE";
    if (value == 953) return "All.FEAT_WEAPON_SPECIALIZATION_DWAXE";
    if (value == 149) return "All.FEAT_WEAPON_SPECIALIZATION_GREAT_AXE";
    if (value == 145) return "All.FEAT_WEAPON_SPECIALIZATION_GREAT_SWORD";
    if (value == 150) return "All.FEAT_WEAPON_SPECIALIZATION_HALBERD";
    if (value == 146) return "All.FEAT_WEAPON_SPECIALIZATION_HAND_AXE";
    if (value == 130) return "All.FEAT_WEAPON_SPECIALIZATION_HEAVY_CROSSBOW";
    if (value == 154) return "All.FEAT_WEAPON_SPECIALIZATION_HEAVY_FLAIL";
    if (value == 155) return "All.FEAT_WEAPON_SPECIALIZATION_KAMA";
    if (value == 160) return "All.FEAT_WEAPON_SPECIALIZATION_KATANA";
    if (value == 156) return "All.FEAT_WEAPON_SPECIALIZATION_KUKRI";
    if (value == 131) return "All.FEAT_WEAPON_SPECIALIZATION_LIGHT_CROSSBOW";
    if (value == 152) return "All.FEAT_WEAPON_SPECIALIZATION_LIGHT_FLAIL";
    if (value == 151) return "All.FEAT_WEAPON_SPECIALIZATION_LIGHT_HAMMER";
    if (value == 132) return "All.FEAT_WEAPON_SPECIALIZATION_LIGHT_MACE";
    if (value == 139) return "All.FEAT_WEAPON_SPECIALIZATION_LONGBOW";
    if (value == 144) return "All.FEAT_WEAPON_SPECIALIZATION_LONG_SWORD";
    if (value == 133) return "All.FEAT_WEAPON_SPECIALIZATION_MORNING_STAR";
    if (value == 142) return "All.FEAT_WEAPON_SPECIALIZATION_RAPIER";
    if (value == 143) return "All.FEAT_WEAPON_SPECIALIZATION_SCIMITAR";
    if (value == 159) return "All.FEAT_WEAPON_SPECIALIZATION_SCYTHE";
    if (value == 140) return "All.FEAT_WEAPON_SPECIALIZATION_SHORTBOW";
    if (value == 141) return "All.FEAT_WEAPON_SPECIALIZATION_SHORT_SWORD";
    if (value == 158) return "All.FEAT_WEAPON_SPECIALIZATION_SHURIKEN";
    if (value == 136) return "All.FEAT_WEAPON_SPECIALIZATION_SICKLE";
    if (value == 137) return "All.FEAT_WEAPON_SPECIALIZATION_SLING";
    if (value == 135) return "All.FEAT_WEAPON_SPECIALIZATION_SPEAR";
    if (value == 134) return "All.FEAT_WEAPON_SPECIALIZATION_STAFF";
    if (value == 147) return "All.FEAT_WEAPON_SPECIALIZATION_THROWING_AXE";
    if (value == 1073) return "All.FEAT_WEAPON_SPECIALIZATION_TRIDENT";
    if (value == 165) return "All.FEAT_WEAPON_SPECIALIZATION_TWO_BLADED_SWORD";
    if (value == 138) return "All.FEAT_WEAPON_SPECIALIZATION_UNARMED_STRIKE";
    if (value == 153) return "All.FEAT_WEAPON_SPECIALIZATION_WAR_HAMMER";
    if (value == 994) return "All.FEAT_WEAPON_SPECIALIZATION_WHIP";
    if (value == 867) return "All.FEAT_WHIRLWIND_ATTACK";
    if (value == 211) return "All.FEAT_WHOLENESS_OF_BODY";
    if (value == 305) return "All.FEAT_WILD_SHAPE";
    if (value == 200) return "All.FEAT_WOODLAND_STRIDE";
    if (value == 412) return "All.FEAT_ZEN_ARCHERY";
    if (value == 0) return "All.FOG_COLOR_BLACK";
    if (value == 255) return "All.FOG_COLOR_BLUE";
    if (value == 102) return "All.FOG_COLOR_BLUE_DARK";
    if (value == 10053120) return "All.FOG_COLOR_BROWN";
    if (value == 6697728) return "All.FOG_COLOR_BROWN_DARK";
    if (value == 65535) return "All.FOG_COLOR_CYAN";
    if (value == 65280) return "All.FOG_COLOR_GREEN";
    if (value == 23112) return "All.FOG_COLOR_GREEN_DARK";
    if (value == 10066329) return "All.FOG_COLOR_GREY";
    if (value == 16711935) return "All.FOG_COLOR_MAGENTA";
    if (value == 16750848) return "All.FOG_COLOR_ORANGE";
    if (value == 13395456) return "All.FOG_COLOR_ORANGE_DARK";
    if (value == 16711680) return "All.FOG_COLOR_RED";
    if (value == 6684672) return "All.FOG_COLOR_RED_DARK";
    if (value == 16777215) return "All.FOG_COLOR_WHITE";
    if (value == 16776960) return "All.FOG_COLOR_YELLOW";
    if (value == 11184640) return "All.FOG_COLOR_YELLOW_DARK";
    if (value == 0) return "All.FOG_TYPE_ALL";
    if (value == 2) return "All.FOG_TYPE_MOON";
    if (value == 1) return "All.FOG_TYPE_SUN";
    if (value == 6) return "All.FOOTSTEP_TYPE_BEETLE";
    if (value == 65535) return "All.FOOTSTEP_TYPE_DEFAULT";
    if (value == 2) return "All.FOOTSTEP_TYPE_DRAGON";
    if (value == 10) return "All.FOOTSTEP_TYPE_FEATHER_WING";
    if (value == 4) return "All.FOOTSTEP_TYPE_HOOF";
    if (value == 5) return "All.FOOTSTEP_TYPE_HOOF_LARGE";
    if (value == 17) return "All.FOOTSTEP_TYPE_HORSE";
    if (value == -1) return "All.FOOTSTEP_TYPE_INVALID";
    if (value == 1) return "All.FOOTSTEP_TYPE_LARGE";
    if (value == 9) return "All.FOOTSTEP_TYPE_LEATHER_WING";
    if (value == 12) return "All.FOOTSTEP_TYPE_NONE";
    if (value == 0) return "All.FOOTSTEP_TYPE_NORMAL";
    if (value == 13) return "All.FOOTSTEP_TYPE_SEAGULL";
    if (value == 14) return "All.FOOTSTEP_TYPE_SHARK";
    if (value == 8) return "All.FOOTSTEP_TYPE_SKELETON";
    if (value == 3) return "All.FOOTSTEP_TYPE_SOFT";
    if (value == 7) return "All.FOOTSTEP_TYPE_SPIDER";
    if (value == 16) return "All.FOOTSTEP_TYPE_WATER_LARGE";
    if (value == 15) return "All.FOOTSTEP_TYPE_WATER_NORMAL";
    if (value == 3) return "All.GAME_DIFFICULTY_CORE_RULES";
    if (value == 4) return "All.GAME_DIFFICULTY_DIFFICULT";
    if (value == 1) return "All.GAME_DIFFICULTY_EASY";
    if (value == 2) return "All.GAME_DIFFICULTY_NORMAL";
    if (value == 0) return "All.GAME_DIFFICULTY_VERY_EASY";
    if (value == 2) return "All.GENDER_BOTH";
    if (value == 1) return "All.GENDER_FEMALE";
    if (value == 0) return "All.GENDER_MALE";
    if (value == 4) return "All.GENDER_NONE";
    if (value == 3) return "All.GENDER_OTHER";
    if (value == 0) return "All.GUI_PANEL_PLAYER_DEATH";
    if (value == 19) return "All.IMMUNITY_TYPE_ABILITY_DECREASE";
    if (value == 23) return "All.IMMUNITY_TYPE_AC_DECREASE";
    if (value == 20) return "All.IMMUNITY_TYPE_ATTACK_DECREASE";
    if (value == 7) return "All.IMMUNITY_TYPE_BLINDNESS";
    if (value == 14) return "All.IMMUNITY_TYPE_CHARM";
    if (value == 16) return "All.IMMUNITY_TYPE_CONFUSED";
    if (value == 31) return "All.IMMUNITY_TYPE_CRITICAL_HIT";
    if (value == 17) return "All.IMMUNITY_TYPE_CURSED";
    if (value == 21) return "All.IMMUNITY_TYPE_DAMAGE_DECREASE";
    if (value == 22) return "All.IMMUNITY_TYPE_DAMAGE_IMMUNITY_DECREASE";
    if (value == 18) return "All.IMMUNITY_TYPE_DAZED";
    if (value == 8) return "All.IMMUNITY_TYPE_DEAFNESS";
    if (value == 32) return "All.IMMUNITY_TYPE_DEATH";
    if (value == 3) return "All.IMMUNITY_TYPE_DISEASE";
    if (value == 15) return "All.IMMUNITY_TYPE_DOMINATE";
    if (value == 10) return "All.IMMUNITY_TYPE_ENTANGLE";
    if (value == 4) return "All.IMMUNITY_TYPE_FEAR";
    if (value == 28) return "All.IMMUNITY_TYPE_KNOCKDOWN";
    if (value == 1) return "All.IMMUNITY_TYPE_MIND_SPELLS";
    if (value == 24) return "All.IMMUNITY_TYPE_MOVEMENT_SPEED_DECREASE";
    if (value == 29) return "All.IMMUNITY_TYPE_NEGATIVE_LEVEL";
    if (value == 0) return "All.IMMUNITY_TYPE_NONE";
    if (value == 6) return "All.IMMUNITY_TYPE_PARALYSIS";
    if (value == 2) return "All.IMMUNITY_TYPE_POISON";
    if (value == 25) return "All.IMMUNITY_TYPE_SAVING_THROW_DECREASE";
    if (value == 11) return "All.IMMUNITY_TYPE_SILENCE";
    if (value == 27) return "All.IMMUNITY_TYPE_SKILL_DECREASE";
    if (value == 13) return "All.IMMUNITY_TYPE_SLEEP";
    if (value == 9) return "All.IMMUNITY_TYPE_SLOW";
    if (value == 30) return "All.IMMUNITY_TYPE_SNEAK_ATTACK";
    if (value == 26) return "All.IMMUNITY_TYPE_SPELL_RESISTANCE_DECREASE";
    if (value == 12) return "All.IMMUNITY_TYPE_STUN";
    if (value == 5) return "All.IMMUNITY_TYPE_TRAP";
    if (value == 0) return "All.INVENTORY_DISTURB_TYPE_ADDED";
    if (value == 1) return "All.INVENTORY_DISTURB_TYPE_REMOVED";
    if (value == 2) return "All.INVENTORY_DISTURB_TYPE_STOLEN";
    if (value == 3) return "All.INVENTORY_SLOT_ARMS";
    if (value == 11) return "All.INVENTORY_SLOT_ARROWS";
    if (value == 10) return "All.INVENTORY_SLOT_BELT";
    if (value == 13) return "All.INVENTORY_SLOT_BOLTS";
    if (value == 2) return "All.INVENTORY_SLOT_BOOTS";
    if (value == 12) return "All.INVENTORY_SLOT_BULLETS";
    if (value == 17) return "All.INVENTORY_SLOT_CARMOUR";
    if (value == 1) return "All.INVENTORY_SLOT_CHEST";
    if (value == 6) return "All.INVENTORY_SLOT_CLOAK";
    if (value == 16) return "All.INVENTORY_SLOT_CWEAPON_B";
    if (value == 14) return "All.INVENTORY_SLOT_CWEAPON_L";
    if (value == 15) return "All.INVENTORY_SLOT_CWEAPON_R";
    if (value == 0) return "All.INVENTORY_SLOT_HEAD";
    if (value == 5) return "All.INVENTORY_SLOT_LEFTHAND";
    if (value == 7) return "All.INVENTORY_SLOT_LEFTRING";
    if (value == 9) return "All.INVENTORY_SLOT_NECK";
    if (value == 4) return "All.INVENTORY_SLOT_RIGHTHAND";
    if (value == 8) return "All.INVENTORY_SLOT_RIGHTRING";
    if (value == 2) return "All.INVISIBILITY_TYPE_DARKNESS";
    if (value == 4) return "All.INVISIBILITY_TYPE_IMPROVED";
    if (value == 1) return "All.INVISIBILITY_TYPE_NORMAL";
    if (value == 5) return "All.IP_CONST_ABILITY_CHA";
    if (value == 2) return "All.IP_CONST_ABILITY_CON";
    if (value == 1) return "All.IP_CONST_ABILITY_DEX";
    if (value == 3) return "All.IP_CONST_ABILITY_INT";
    if (value == 0) return "All.IP_CONST_ABILITY_STR";
    if (value == 4) return "All.IP_CONST_ABILITY_WIS";
    if (value == 2) return "All.IP_CONST_ACMODIFIERTYPE_ARMOR";
    if (value == 4) return "All.IP_CONST_ACMODIFIERTYPE_DEFLECTION";
    if (value == 0) return "All.IP_CONST_ACMODIFIERTYPE_DODGE";
    if (value == 1) return "All.IP_CONST_ACMODIFIERTYPE_NATURAL";
    if (value == 3) return "All.IP_CONST_ACMODIFIERTYPE_SHIELD";
    if (value == 1) return "All.IP_CONST_ADDITIONAL_CURSED";
    if (value == 0) return "All.IP_CONST_ADDITIONAL_UNKNOWN";
    if (value == 0) return "All.IP_CONST_ALIGNMENTGROUP_ALL";
    if (value == 3) return "All.IP_CONST_ALIGNMENTGROUP_CHAOTIC";
    if (value == 5) return "All.IP_CONST_ALIGNMENTGROUP_EVIL";
    if (value == 4) return "All.IP_CONST_ALIGNMENTGROUP_GOOD";
    if (value == 2) return "All.IP_CONST_ALIGNMENTGROUP_LAWFUL";
    if (value == 1) return "All.IP_CONST_ALIGNMENTGROUP_NEUTRAL";
    if (value == 8) return "All.IP_CONST_ALIGNMENT_CE";
    if (value == 6) return "All.IP_CONST_ALIGNMENT_CG";
    if (value == 7) return "All.IP_CONST_ALIGNMENT_CN";
    if (value == 2) return "All.IP_CONST_ALIGNMENT_LE";
    if (value == 0) return "All.IP_CONST_ALIGNMENT_LG";
    if (value == 1) return "All.IP_CONST_ALIGNMENT_LN";
    if (value == 5) return "All.IP_CONST_ALIGNMENT_NE";
    if (value == 3) return "All.IP_CONST_ALIGNMENT_NG";
    if (value == 4) return "All.IP_CONST_ALIGNMENT_TN";
    if (value == 0) return "All.IP_CONST_AMMOTYPE_ARROW";
    if (value == 1) return "All.IP_CONST_AMMOTYPE_BOLT";
    if (value == 2) return "All.IP_CONST_AMMOTYPE_BULLET";
    if (value == 8) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_10_PERCENT";
    if (value == 7) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_15_PERCENT";
    if (value == 6) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_20_PERCENT";
    if (value == 5) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_25_PERCENT";
    if (value == 4) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_30_PERCENT";
    if (value == 3) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_35_PERCENT";
    if (value == 2) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_40_PERCENT";
    if (value == 1) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_45_PERCENT";
    if (value == 0) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_50_PERCENT";
    if (value == 9) return "All.IP_CONST_ARCANE_SPELL_FAILURE_MINUS_5_PERCENT";
    if (value == 11) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_10_PERCENT";
    if (value == 12) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_15_PERCENT";
    if (value == 13) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_20_PERCENT";
    if (value == 14) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_25_PERCENT";
    if (value == 15) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_30_PERCENT";
    if (value == 16) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_35_PERCENT";
    if (value == 17) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_40_PERCENT";
    if (value == 18) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_45_PERCENT";
    if (value == 19) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_50_PERCENT";
    if (value == 10) return "All.IP_CONST_ARCANE_SPELL_FAILURE_PLUS_5_PERCENT";
    if (value == 0) return "All.IP_CONST_CASTSPELL_ACID_FOG_11";
    if (value == 355) return "All.IP_CONST_CASTSPELL_ACID_SPLASH_1";
    if (value == 359) return "All.IP_CONST_CASTSPELL_ACTIVATE_ITEM";
    if (value == 1) return "All.IP_CONST_CASTSPELL_AID_3";
    if (value == 373) return "All.IP_CONST_CASTSPELL_AMPLIFY_5";
    if (value == 3) return "All.IP_CONST_CASTSPELL_ANIMATE_DEAD_10";
    if (value == 4) return "All.IP_CONST_CASTSPELL_ANIMATE_DEAD_15";
    if (value == 2) return "All.IP_CONST_CASTSPELL_ANIMATE_DEAD_5";
    if (value == 360) return "All.IP_CONST_CASTSPELL_AURAOFGLORY_7";
    if (value == 321) return "All.IP_CONST_CASTSPELL_AURA_OF_VITALITY_13";
    if (value == 287) return "All.IP_CONST_CASTSPELL_AURA_VERSUS_ALIGNMENT_15";
    if (value == 303) return "All.IP_CONST_CASTSPELL_AWAKEN_9";
    if (value == 367) return "All.IP_CONST_CASTSPELL_BALAGARNSIRONHORN_7";
    if (value == 380) return "All.IP_CONST_CASTSPELL_BANE_5";
    if (value == 361) return "All.IP_CONST_CASTSPELL_BANISHMENT_15";
    if (value == 7) return "All.IP_CONST_CASTSPELL_BARKSKIN_12";
    if (value == 5) return "All.IP_CONST_CASTSPELL_BARKSKIN_3";
    if (value == 6) return "All.IP_CONST_CASTSPELL_BARKSKIN_6";
    if (value == 8) return "All.IP_CONST_CASTSPELL_BESTOW_CURSE_5";
    if (value == 393) return "All.IP_CONST_CASTSPELL_BIGBYS_CLENCHED_FIST_20";
    if (value == 394) return "All.IP_CONST_CASTSPELL_BIGBYS_CRUSHING_HAND_20";
    if (value == 391) return "All.IP_CONST_CASTSPELL_BIGBYS_FORCEFUL_HAND_15";
    if (value == 392) return "All.IP_CONST_CASTSPELL_BIGBYS_GRASPING_HAND_17";
    if (value == 390) return "All.IP_CONST_CASTSPELL_BIGBYS_INTERPOSING_HAND_15";
    if (value == 9) return "All.IP_CONST_CASTSPELL_BLADE_BARRIER_11";
    if (value == 10) return "All.IP_CONST_CASTSPELL_BLADE_BARRIER_15";
    if (value == 11) return "All.IP_CONST_CASTSPELL_BLESS_2";
    if (value == 14) return "All.IP_CONST_CASTSPELL_BLINDNESS_DEAFNESS_3";
    if (value == 353) return "All.IP_CONST_CASTSPELL_BLOOD_FRENZY_7";
    if (value == 354) return "All.IP_CONST_CASTSPELL_BOMBARDMENT_20";
    if (value == 16) return "All.IP_CONST_CASTSPELL_BULLS_STRENGTH_10";
    if (value == 17) return "All.IP_CONST_CASTSPELL_BULLS_STRENGTH_15";
    if (value == 15) return "All.IP_CONST_CASTSPELL_BULLS_STRENGTH_3";
    if (value == 18) return "All.IP_CONST_CASTSPELL_BURNING_HANDS_2";
    if (value == 19) return "All.IP_CONST_CASTSPELL_BURNING_HANDS_5";
    if (value == 21) return "All.IP_CONST_CASTSPELL_CALL_LIGHTNING_10";
    if (value == 20) return "All.IP_CONST_CASTSPELL_CALL_LIGHTNING_5";
    if (value == 352) return "All.IP_CONST_CASTSPELL_CAMOFLAGE_5";
    if (value == 26) return "All.IP_CONST_CASTSPELL_CATS_GRACE_10";
    if (value == 27) return "All.IP_CONST_CASTSPELL_CATS_GRACE_15";
    if (value == 25) return "All.IP_CONST_CASTSPELL_CATS_GRACE_3";
    if (value == 28) return "All.IP_CONST_CASTSPELL_CHAIN_LIGHTNING_11";
    if (value == 29) return "All.IP_CONST_CASTSPELL_CHAIN_LIGHTNING_15";
    if (value == 30) return "All.IP_CONST_CASTSPELL_CHAIN_LIGHTNING_20";
    if (value == 32) return "All.IP_CONST_CASTSPELL_CHARM_MONSTER_10";
    if (value == 31) return "All.IP_CONST_CASTSPELL_CHARM_MONSTER_5";
    if (value == 34) return "All.IP_CONST_CASTSPELL_CHARM_PERSON_10";
    if (value == 33) return "All.IP_CONST_CASTSPELL_CHARM_PERSON_2";
    if (value == 36) return "All.IP_CONST_CASTSPELL_CHARM_PERSON_OR_ANIMAL_10";
    if (value == 35) return "All.IP_CONST_CASTSPELL_CHARM_PERSON_OR_ANIMAL_3";
    if (value == 37) return "All.IP_CONST_CASTSPELL_CIRCLE_OF_DEATH_11";
    if (value == 38) return "All.IP_CONST_CASTSPELL_CIRCLE_OF_DEATH_15";
    if (value == 39) return "All.IP_CONST_CASTSPELL_CIRCLE_OF_DEATH_20";
    if (value == 41) return "All.IP_CONST_CASTSPELL_CIRCLE_OF_DOOM_15";
    if (value == 42) return "All.IP_CONST_CASTSPELL_CIRCLE_OF_DOOM_20";
    if (value == 40) return "All.IP_CONST_CASTSPELL_CIRCLE_OF_DOOM_9";
    if (value == 44) return "All.IP_CONST_CASTSPELL_CLAIRAUDIENCE_CLAIRVOYANCE_10";
    if (value == 45) return "All.IP_CONST_CASTSPELL_CLAIRAUDIENCE_CLAIRVOYANCE_15";
    if (value == 43) return "All.IP_CONST_CASTSPELL_CLAIRAUDIENCE_CLAIRVOYANCE_5";
    if (value == 46) return "All.IP_CONST_CASTSPELL_CLARITY_3";
    if (value == 48) return "All.IP_CONST_CASTSPELL_CLOUDKILL_9";
    if (value == 49) return "All.IP_CONST_CASTSPELL_COLOR_SPRAY_2";
    if (value == 51) return "All.IP_CONST_CASTSPELL_CONE_OF_COLD_15";
    if (value == 50) return "All.IP_CONST_CASTSPELL_CONE_OF_COLD_9";
    if (value == 53) return "All.IP_CONST_CASTSPELL_CONFUSION_10";
    if (value == 52) return "All.IP_CONST_CASTSPELL_CONFUSION_5";
    if (value == 54) return "All.IP_CONST_CASTSPELL_CONTAGION_5";
    if (value == 350) return "All.IP_CONST_CASTSPELL_CONTINUAL_FLAME_7";
    if (value == 55) return "All.IP_CONST_CASTSPELL_CONTROL_UNDEAD_13";
    if (value == 56) return "All.IP_CONST_CASTSPELL_CONTROL_UNDEAD_20";
    if (value == 57) return "All.IP_CONST_CASTSPELL_CREATE_GREATER_UNDEAD_15";
    if (value == 58) return "All.IP_CONST_CASTSPELL_CREATE_GREATER_UNDEAD_16";
    if (value == 59) return "All.IP_CONST_CASTSPELL_CREATE_GREATER_UNDEAD_18";
    if (value == 60) return "All.IP_CONST_CASTSPELL_CREATE_UNDEAD_11";
    if (value == 61) return "All.IP_CONST_CASTSPELL_CREATE_UNDEAD_14";
    if (value == 62) return "All.IP_CONST_CASTSPELL_CREATE_UNDEAD_16";
    if (value == 304) return "All.IP_CONST_CASTSPELL_CREEPING_DOOM_13";
    if (value == 64) return "All.IP_CONST_CASTSPELL_CURE_CRITICAL_WOUNDS_12";
    if (value == 65) return "All.IP_CONST_CASTSPELL_CURE_CRITICAL_WOUNDS_15";
    if (value == 63) return "All.IP_CONST_CASTSPELL_CURE_CRITICAL_WOUNDS_7";
    if (value == 66) return "All.IP_CONST_CASTSPELL_CURE_LIGHT_WOUNDS_2";
    if (value == 67) return "All.IP_CONST_CASTSPELL_CURE_LIGHT_WOUNDS_5";
    if (value == 68) return "All.IP_CONST_CASTSPELL_CURE_MINOR_WOUNDS_1";
    if (value == 71) return "All.IP_CONST_CASTSPELL_CURE_MODERATE_WOUNDS_10";
    if (value == 69) return "All.IP_CONST_CASTSPELL_CURE_MODERATE_WOUNDS_3";
    if (value == 70) return "All.IP_CONST_CASTSPELL_CURE_MODERATE_WOUNDS_6";
    if (value == 73) return "All.IP_CONST_CASTSPELL_CURE_SERIOUS_WOUNDS_10";
    if (value == 72) return "All.IP_CONST_CASTSPELL_CURE_SERIOUS_WOUNDS_5";
    if (value == 75) return "All.IP_CONST_CASTSPELL_DARKNESS_3";
    if (value == 305) return "All.IP_CONST_CASTSPELL_DARKVISION_3";
    if (value == 306) return "All.IP_CONST_CASTSPELL_DARKVISION_6";
    if (value == 76) return "All.IP_CONST_CASTSPELL_DAZE_1";
    if (value == 77) return "All.IP_CONST_CASTSPELL_DEATH_WARD_7";
    if (value == 78) return "All.IP_CONST_CASTSPELL_DELAYED_BLAST_FIREBALL_13";
    if (value == 79) return "All.IP_CONST_CASTSPELL_DELAYED_BLAST_FIREBALL_15";
    if (value == 80) return "All.IP_CONST_CASTSPELL_DELAYED_BLAST_FIREBALL_20";
    if (value == 307) return "All.IP_CONST_CASTSPELL_DESTRUCTION_13";
    if (value == 376) return "All.IP_CONST_CASTSPELL_DIRGE_15";
    if (value == 82) return "All.IP_CONST_CASTSPELL_DISMISSAL_12";
    if (value == 83) return "All.IP_CONST_CASTSPELL_DISMISSAL_18";
    if (value == 81) return "All.IP_CONST_CASTSPELL_DISMISSAL_7";
    if (value == 85) return "All.IP_CONST_CASTSPELL_DISPEL_MAGIC_10";
    if (value == 84) return "All.IP_CONST_CASTSPELL_DISPEL_MAGIC_5";
    if (value == 389) return "All.IP_CONST_CASTSPELL_DISPLACEMENT_9";
    if (value == 345) return "All.IP_CONST_CASTSPELL_DIVINE_FAVOR_5";
    if (value == 395) return "All.IP_CONST_CASTSPELL_DIVINE_MIGHT_5";
    if (value == 86) return "All.IP_CONST_CASTSPELL_DIVINE_POWER_7";
    if (value == 396) return "All.IP_CONST_CASTSPELL_DIVINE_SHIELD_5";
    if (value == 87) return "All.IP_CONST_CASTSPELL_DOMINATE_ANIMAL_5";
    if (value == 88) return "All.IP_CONST_CASTSPELL_DOMINATE_MONSTER_17";
    if (value == 89) return "All.IP_CONST_CASTSPELL_DOMINATE_PERSON_7";
    if (value == 90) return "All.IP_CONST_CASTSPELL_DOOM_2";
    if (value == 91) return "All.IP_CONST_CASTSPELL_DOOM_5";
    if (value == 400) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_ACID_10";
    if (value == 401) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_COLD_10";
    if (value == 402) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_FEAR_10";
    if (value == 403) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_FIRE_10";
    if (value == 404) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_GAS_10";
    if (value == 405) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_LIGHTNING_10";
    if (value == 406) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_PARALYZE_10";
    if (value == 407) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_SLEEP_10";
    if (value == 408) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_SLOW_10";
    if (value == 409) return "All.IP_CONST_CASTSPELL_DRAGON_BREATH_WEAKEN_10";
    if (value == 368) return "All.IP_CONST_CASTSPELL_DROWN_15";
    if (value == 289) return "All.IP_CONST_CASTSPELL_EAGLE_SPLEDOR_10";
    if (value == 290) return "All.IP_CONST_CASTSPELL_EAGLE_SPLEDOR_15";
    if (value == 288) return "All.IP_CONST_CASTSPELL_EAGLE_SPLEDOR_3";
    if (value == 357) return "All.IP_CONST_CASTSPELL_EARTHQUAKE_20";
    if (value == 370) return "All.IP_CONST_CASTSPELL_ELECTRIC_JOLT_1";
    if (value == 93) return "All.IP_CONST_CASTSPELL_ELEMENTAL_SHIELD_12";
    if (value == 92) return "All.IP_CONST_CASTSPELL_ELEMENTAL_SHIELD_7";
    if (value == 94) return "All.IP_CONST_CASTSPELL_ELEMENTAL_SWARM_17";
    if (value == 96) return "All.IP_CONST_CASTSPELL_ENDURANCE_10";
    if (value == 97) return "All.IP_CONST_CASTSPELL_ENDURANCE_15";
    if (value == 95) return "All.IP_CONST_CASTSPELL_ENDURANCE_3";
    if (value == 98) return "All.IP_CONST_CASTSPELL_ENDURE_ELEMENTS_2";
    if (value == 311) return "All.IP_CONST_CASTSPELL_ENERGY_BUFFER_11";
    if (value == 312) return "All.IP_CONST_CASTSPELL_ENERGY_BUFFER_15";
    if (value == 313) return "All.IP_CONST_CASTSPELL_ENERGY_BUFFER_20";
    if (value == 99) return "All.IP_CONST_CASTSPELL_ENERGY_DRAIN_17";
    if (value == 100) return "All.IP_CONST_CASTSPELL_ENERVATION_7";
    if (value == 101) return "All.IP_CONST_CASTSPELL_ENTANGLE_2";
    if (value == 102) return "All.IP_CONST_CASTSPELL_ENTANGLE_5";
    if (value == 349) return "All.IP_CONST_CASTSPELL_ENTROPIC_SHIELD_5";
    if (value == 374) return "All.IP_CONST_CASTSPELL_ETHEREALNESS_18";
    if (value == 196) return "All.IP_CONST_CASTSPELL_ETHEREAL_VISAGE_15";
    if (value == 195) return "All.IP_CONST_CASTSPELL_ETHEREAL_VISAGE_9";
    if (value == 325) return "All.IP_CONST_CASTSPELL_EVARDS_BLACK_TENTACLES_15";
    if (value == 324) return "All.IP_CONST_CASTSPELL_EVARDS_BLACK_TENTACLES_7";
    if (value == 387) return "All.IP_CONST_CASTSPELL_EXPEDITIOUS_RETREAT_5";
    if (value == 103) return "All.IP_CONST_CASTSPELL_FEAR_5";
    if (value == 104) return "All.IP_CONST_CASTSPELL_FEEBLEMIND_9";
    if (value == 327) return "All.IP_CONST_CASTSPELL_FIND_TRAPS_3";
    if (value == 105) return "All.IP_CONST_CASTSPELL_FINGER_OF_DEATH_13";
    if (value == 109) return "All.IP_CONST_CASTSPELL_FIREBALL_10";
    if (value == 108) return "All.IP_CONST_CASTSPELL_FIREBALL_5";
    if (value == 371) return "All.IP_CONST_CASTSPELL_FIREBRAND_15";
    if (value == 106) return "All.IP_CONST_CASTSPELL_FIRE_STORM_13";
    if (value == 107) return "All.IP_CONST_CASTSPELL_FIRE_STORM_18";
    if (value == 111) return "All.IP_CONST_CASTSPELL_FLAME_ARROW_12";
    if (value == 112) return "All.IP_CONST_CASTSPELL_FLAME_ARROW_18";
    if (value == 110) return "All.IP_CONST_CASTSPELL_FLAME_ARROW_5";
    if (value == 114) return "All.IP_CONST_CASTSPELL_FLAME_LASH_10";
    if (value == 113) return "All.IP_CONST_CASTSPELL_FLAME_LASH_3";
    if (value == 116) return "All.IP_CONST_CASTSPELL_FLAME_STRIKE_12";
    if (value == 117) return "All.IP_CONST_CASTSPELL_FLAME_STRIKE_18";
    if (value == 115) return "All.IP_CONST_CASTSPELL_FLAME_STRIKE_7";
    if (value == 347) return "All.IP_CONST_CASTSPELL_FLARE_1";
    if (value == 398) return "All.IP_CONST_CASTSPELL_FLESH_TO_STONE_5";
    if (value == 295) return "All.IP_CONST_CASTSPELL_FOXS_CUNNING_10";
    if (value == 296) return "All.IP_CONST_CASTSPELL_FOXS_CUNNING_15";
    if (value == 294) return "All.IP_CONST_CASTSPELL_FOXS_CUNNING_3";
    if (value == 118) return "All.IP_CONST_CASTSPELL_FREEDOM_OF_MOVEMENT_7";
    if (value == 119) return "All.IP_CONST_CASTSPELL_GATE_17";
    if (value == 194) return "All.IP_CONST_CASTSPELL_GHOSTLY_VISAGE_15";
    if (value == 192) return "All.IP_CONST_CASTSPELL_GHOSTLY_VISAGE_3";
    if (value == 193) return "All.IP_CONST_CASTSPELL_GHOSTLY_VISAGE_9";
    if (value == 120) return "All.IP_CONST_CASTSPELL_GHOUL_TOUCH_3";
    if (value == 121) return "All.IP_CONST_CASTSPELL_GLOBE_OF_INVULNERABILITY_11";
    if (value == 122) return "All.IP_CONST_CASTSPELL_GREASE_2";
    if (value == 300) return "All.IP_CONST_CASTSPELL_GREATER_BULLS_STRENGTH_11";
    if (value == 301) return "All.IP_CONST_CASTSPELL_GREATER_CATS_GRACE_11";
    if (value == 124) return "All.IP_CONST_CASTSPELL_GREATER_DISPELLING_15";
    if (value == 123) return "All.IP_CONST_CASTSPELL_GREATER_DISPELLING_7";
    if (value == 297) return "All.IP_CONST_CASTSPELL_GREATER_EAGLES_SPLENDOR_11";
    if (value == 302) return "All.IP_CONST_CASTSPELL_GREATER_ENDURANCE_11";
    if (value == 299) return "All.IP_CONST_CASTSPELL_GREATER_FOXS_CUNNING_11";
    if (value == 384) return "All.IP_CONST_CASTSPELL_GREATER_MAGIC_FANG_9";
    if (value == 298) return "All.IP_CONST_CASTSPELL_GREATER_OWLS_WISDOM_11";
    if (value == 126) return "All.IP_CONST_CASTSPELL_GREATER_PLANAR_BINDING_15";
    if (value == 127) return "All.IP_CONST_CASTSPELL_GREATER_RESTORATION_13";
    if (value == 128) return "All.IP_CONST_CASTSPELL_GREATER_SHADOW_CONJURATION_9";
    if (value == 129) return "All.IP_CONST_CASTSPELL_GREATER_SPELL_BREACH_11";
    if (value == 130) return "All.IP_CONST_CASTSPELL_GREATER_SPELL_MANTLE_17";
    if (value == 131) return "All.IP_CONST_CASTSPELL_GREATER_STONESKIN_11";
    if (value == 341) return "All.IP_CONST_CASTSPELL_GRENADE_ACID_1";
    if (value == 343) return "All.IP_CONST_CASTSPELL_GRENADE_CALTROPS_1";
    if (value == 342) return "All.IP_CONST_CASTSPELL_GRENADE_CHICKEN_1";
    if (value == 339) return "All.IP_CONST_CASTSPELL_GRENADE_CHOKING_1";
    if (value == 336) return "All.IP_CONST_CASTSPELL_GRENADE_FIRE_1";
    if (value == 338) return "All.IP_CONST_CASTSPELL_GRENADE_HOLY_1";
    if (value == 337) return "All.IP_CONST_CASTSPELL_GRENADE_TANGLE_1";
    if (value == 340) return "All.IP_CONST_CASTSPELL_GRENADE_THUNDERSTONE_1";
    if (value == 410) return "All.IP_CONST_CASTSPELL_GUST_OF_WIND_10";
    if (value == 134) return "All.IP_CONST_CASTSPELL_HAMMER_OF_THE_GODS_12";
    if (value == 133) return "All.IP_CONST_CASTSPELL_HAMMER_OF_THE_GODS_7";
    if (value == 136) return "All.IP_CONST_CASTSPELL_HARM_11";
    if (value == 138) return "All.IP_CONST_CASTSPELL_HASTE_10";
    if (value == 137) return "All.IP_CONST_CASTSPELL_HASTE_5";
    if (value == 141) return "All.IP_CONST_CASTSPELL_HEALING_CIRCLE_16";
    if (value == 140) return "All.IP_CONST_CASTSPELL_HEALING_CIRCLE_9";
    if (value == 139) return "All.IP_CONST_CASTSPELL_HEAL_11";
    if (value == 142) return "All.IP_CONST_CASTSPELL_HOLD_ANIMAL_3";
    if (value == 143) return "All.IP_CONST_CASTSPELL_HOLD_MONSTER_7";
    if (value == 144) return "All.IP_CONST_CASTSPELL_HOLD_PERSON_3";
    if (value == 308) return "All.IP_CONST_CASTSPELL_HORRID_WILTING_15";
    if (value == 309) return "All.IP_CONST_CASTSPELL_HORRID_WILTING_20";
    if (value == 310) return "All.IP_CONST_CASTSPELL_ICE_STORM_9";
    if (value == 147) return "All.IP_CONST_CASTSPELL_IDENTIFY_3";
    if (value == 148) return "All.IP_CONST_CASTSPELL_IMPLOSION_17";
    if (value == 149) return "All.IP_CONST_CASTSPELL_IMPROVED_INVISIBILITY_7";
    if (value == 150) return "All.IP_CONST_CASTSPELL_INCENDIARY_CLOUD_15";
    if (value == 377) return "All.IP_CONST_CASTSPELL_INFERNO_15";
    if (value == 366) return "All.IP_CONST_CASTSPELL_INFLICT_CRITICAL_WOUNDS_12";
    if (value == 363) return "All.IP_CONST_CASTSPELL_INFLICT_LIGHT_WOUNDS_5";
    if (value == 362) return "All.IP_CONST_CASTSPELL_INFLICT_MINOR_WOUNDS_1";
    if (value == 364) return "All.IP_CONST_CASTSPELL_INFLICT_MODERATE_WOUNDS_7";
    if (value == 365) return "All.IP_CONST_CASTSPELL_INFLICT_SERIOUS_WOUNDS_9";
    if (value == 151) return "All.IP_CONST_CASTSPELL_INVISIBILITY_3";
    if (value == 152) return "All.IP_CONST_CASTSPELL_INVISIBILITY_PURGE_5";
    if (value == 153) return "All.IP_CONST_CASTSPELL_INVISIBILITY_SPHERE_5";
    if (value == 379) return "All.IP_CONST_CASTSPELL_ISAACS_GREATER_MISSILE_STORM_15";
    if (value == 378) return "All.IP_CONST_CASTSPELL_ISAACS_LESSER_MISSILE_STORM_13";
    if (value == 154) return "All.IP_CONST_CASTSPELL_KNOCK_3";
    if (value == 326) return "All.IP_CONST_CASTSPELL_LEGEND_LORE_5";
    if (value == 155) return "All.IP_CONST_CASTSPELL_LESSER_DISPEL_3";
    if (value == 156) return "All.IP_CONST_CASTSPELL_LESSER_DISPEL_5";
    if (value == 157) return "All.IP_CONST_CASTSPELL_LESSER_MIND_BLANK_9";
    if (value == 158) return "All.IP_CONST_CASTSPELL_LESSER_PLANAR_BINDING_9";
    if (value == 159) return "All.IP_CONST_CASTSPELL_LESSER_RESTORATION_3";
    if (value == 160) return "All.IP_CONST_CASTSPELL_LESSER_SPELL_BREACH_7";
    if (value == 161) return "All.IP_CONST_CASTSPELL_LESSER_SPELL_MANTLE_9";
    if (value == 165) return "All.IP_CONST_CASTSPELL_LIGHTNING_BOLT_10";
    if (value == 164) return "All.IP_CONST_CASTSPELL_LIGHTNING_BOLT_5";
    if (value == 162) return "All.IP_CONST_CASTSPELL_LIGHT_1";
    if (value == 163) return "All.IP_CONST_CASTSPELL_LIGHT_5";
    if (value == 167) return "All.IP_CONST_CASTSPELL_MAGE_ARMOR_2";
    if (value == 286) return "All.IP_CONST_CASTSPELL_MAGIC_CIRCLE_AGAINST_ALIGNMENT_5";
    if (value == 383) return "All.IP_CONST_CASTSPELL_MAGIC_FANG_5";
    if (value == 172) return "All.IP_CONST_CASTSPELL_MAGIC_MISSILE_3";
    if (value == 173) return "All.IP_CONST_CASTSPELL_MAGIC_MISSILE_5";
    if (value == 174) return "All.IP_CONST_CASTSPELL_MAGIC_MISSILE_9";
    if (value == 344) return "All.IP_CONST_CASTSPELL_MANIPULATE_PORTAL_STONE";
    if (value == 179) return "All.IP_CONST_CASTSPELL_MASS_BLINDNESS_DEAFNESS_15";
    if (value == 386) return "All.IP_CONST_CASTSPELL_MASS_CAMOFLAGE_13";
    if (value == 180) return "All.IP_CONST_CASTSPELL_MASS_CHARM_15";
    if (value == 182) return "All.IP_CONST_CASTSPELL_MASS_HASTE_11";
    if (value == 183) return "All.IP_CONST_CASTSPELL_MASS_HEAL_15";
    if (value == 184) return "All.IP_CONST_CASTSPELL_MELFS_ACID_ARROW_3";
    if (value == 185) return "All.IP_CONST_CASTSPELL_MELFS_ACID_ARROW_6";
    if (value == 186) return "All.IP_CONST_CASTSPELL_MELFS_ACID_ARROW_9";
    if (value == 187) return "All.IP_CONST_CASTSPELL_METEOR_SWARM_17";
    if (value == 188) return "All.IP_CONST_CASTSPELL_MIND_BLANK_15";
    if (value == 189) return "All.IP_CONST_CASTSPELL_MIND_FOG_9";
    if (value == 191) return "All.IP_CONST_CASTSPELL_MINOR_GLOBE_OF_INVULNERABILITY_15";
    if (value == 190) return "All.IP_CONST_CASTSPELL_MINOR_GLOBE_OF_INVULNERABILITY_7";
    if (value == 197) return "All.IP_CONST_CASTSPELL_MORDENKAINENS_DISJUNCTION_17";
    if (value == 198) return "All.IP_CONST_CASTSPELL_MORDENKAINENS_SWORD_13";
    if (value == 199) return "All.IP_CONST_CASTSPELL_MORDENKAINENS_SWORD_18";
    if (value == 200) return "All.IP_CONST_CASTSPELL_NATURES_BALANCE_15";
    if (value == 315) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_BURST_10";
    if (value == 314) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_BURST_5";
    if (value == 202) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_PROTECTION_10";
    if (value == 203) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_PROTECTION_15";
    if (value == 201) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_PROTECTION_5";
    if (value == 316) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_1";
    if (value == 317) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_3";
    if (value == 318) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_5";
    if (value == 319) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_7";
    if (value == 320) return "All.IP_CONST_CASTSPELL_NEGATIVE_ENERGY_RAY_9";
    if (value == 204) return "All.IP_CONST_CASTSPELL_NEUTRALIZE_POISON_5";
    if (value == 7) return "All.IP_CONST_CASTSPELL_NUMUSES_0_CHARGES_PER_USE";
    if (value == 6) return "All.IP_CONST_CASTSPELL_NUMUSES_1_CHARGE_PER_USE";
    if (value == 8) return "All.IP_CONST_CASTSPELL_NUMUSES_1_USE_PER_DAY";
    if (value == 5) return "All.IP_CONST_CASTSPELL_NUMUSES_2_CHARGES_PER_USE";
    if (value == 9) return "All.IP_CONST_CASTSPELL_NUMUSES_2_USES_PER_DAY";
    if (value == 4) return "All.IP_CONST_CASTSPELL_NUMUSES_3_CHARGES_PER_USE";
    if (value == 10) return "All.IP_CONST_CASTSPELL_NUMUSES_3_USES_PER_DAY";
    if (value == 3) return "All.IP_CONST_CASTSPELL_NUMUSES_4_CHARGES_PER_USE";
    if (value == 11) return "All.IP_CONST_CASTSPELL_NUMUSES_4_USES_PER_DAY";
    if (value == 2) return "All.IP_CONST_CASTSPELL_NUMUSES_5_CHARGES_PER_USE";
    if (value == 12) return "All.IP_CONST_CASTSPELL_NUMUSES_5_USES_PER_DAY";
    if (value == 1) return "All.IP_CONST_CASTSPELL_NUMUSES_SINGLE_USE";
    if (value == 13) return "All.IP_CONST_CASTSPELL_NUMUSES_UNLIMITED_USE";
    if (value == 351) return "All.IP_CONST_CASTSPELL_ONE_WITH_THE_LAND_7";
    if (value == 369) return "All.IP_CONST_CASTSPELL_OWLS_INSIGHT_15";
    if (value == 292) return "All.IP_CONST_CASTSPELL_OWLS_WISDOM_10";
    if (value == 293) return "All.IP_CONST_CASTSPELL_OWLS_WISDOM_15";
    if (value == 291) return "All.IP_CONST_CASTSPELL_OWLS_WISDOM_3";
    if (value == 205) return "All.IP_CONST_CASTSPELL_PHANTASMAL_KILLER_7";
    if (value == 382) return "All.IP_CONST_CASTSPELL_PLANAR_ALLY_15";
    if (value == 206) return "All.IP_CONST_CASTSPELL_PLANAR_BINDING_11";
    if (value == 207) return "All.IP_CONST_CASTSPELL_POISON_5";
    if (value == 208) return "All.IP_CONST_CASTSPELL_POLYMORPH_SELF_7";
    if (value == 209) return "All.IP_CONST_CASTSPELL_POWER_WORD_KILL_17";
    if (value == 210) return "All.IP_CONST_CASTSPELL_POWER_WORD_STUN_13";
    if (value == 211) return "All.IP_CONST_CASTSPELL_PRAYER_5";
    if (value == 212) return "All.IP_CONST_CASTSPELL_PREMONITION_15";
    if (value == 213) return "All.IP_CONST_CASTSPELL_PRISMATIC_SPRAY_13";
    if (value == 284) return "All.IP_CONST_CASTSPELL_PROTECTION_FROM_ALIGNMENT_2";
    if (value == 285) return "All.IP_CONST_CASTSPELL_PROTECTION_FROM_ALIGNMENT_5";
    if (value == 217) return "All.IP_CONST_CASTSPELL_PROTECTION_FROM_ELEMENTS_10";
    if (value == 216) return "All.IP_CONST_CASTSPELL_PROTECTION_FROM_ELEMENTS_3";
    if (value == 224) return "All.IP_CONST_CASTSPELL_PROTECTION_FROM_SPELLS_13";
    if (value == 225) return "All.IP_CONST_CASTSPELL_PROTECTION_FROM_SPELLS_20";
    if (value == 356) return "All.IP_CONST_CASTSPELL_QUILLFIRE_8";
    if (value == 226) return "All.IP_CONST_CASTSPELL_RAISE_DEAD_9";
    if (value == 227) return "All.IP_CONST_CASTSPELL_RAY_OF_ENFEEBLEMENT_2";
    if (value == 228) return "All.IP_CONST_CASTSPELL_RAY_OF_FROST_1";
    if (value == 323) return "All.IP_CONST_CASTSPELL_REGENERATE_13";
    if (value == 229) return "All.IP_CONST_CASTSPELL_REMOVE_BLINDNESS_DEAFNESS_5";
    if (value == 230) return "All.IP_CONST_CASTSPELL_REMOVE_CURSE_5";
    if (value == 231) return "All.IP_CONST_CASTSPELL_REMOVE_DISEASE_5";
    if (value == 232) return "All.IP_CONST_CASTSPELL_REMOVE_FEAR_2";
    if (value == 233) return "All.IP_CONST_CASTSPELL_REMOVE_PARALYSIS_3";
    if (value == 236) return "All.IP_CONST_CASTSPELL_RESISTANCE_2";
    if (value == 237) return "All.IP_CONST_CASTSPELL_RESISTANCE_5";
    if (value == 235) return "All.IP_CONST_CASTSPELL_RESIST_ELEMENTS_10";
    if (value == 234) return "All.IP_CONST_CASTSPELL_RESIST_ELEMENTS_3";
    if (value == 238) return "All.IP_CONST_CASTSPELL_RESTORATION_7";
    if (value == 239) return "All.IP_CONST_CASTSPELL_RESURRECTION_13";
    if (value == 328) return "All.IP_CONST_CASTSPELL_ROGUES_CUNNING_3";
    if (value == 240) return "All.IP_CONST_CASTSPELL_SANCTUARY_2";
    if (value == 241) return "All.IP_CONST_CASTSPELL_SCARE_2";
    if (value == 242) return "All.IP_CONST_CASTSPELL_SEARING_LIGHT_5";
    if (value == 243) return "All.IP_CONST_CASTSPELL_SEE_INVISIBILITY_3";
    if (value == 244) return "All.IP_CONST_CASTSPELL_SHADES_11";
    if (value == 245) return "All.IP_CONST_CASTSPELL_SHADOW_CONJURATION_7";
    if (value == 246) return "All.IP_CONST_CASTSPELL_SHADOW_SHIELD_13";
    if (value == 247) return "All.IP_CONST_CASTSPELL_SHAPECHANGE_17";
    if (value == 348) return "All.IP_CONST_CASTSPELL_SHIELD_5";
    if (value == 381) return "All.IP_CONST_CASTSPELL_SHIELD_OF_FAITH_5";
    if (value == 249) return "All.IP_CONST_CASTSPELL_SILENCE_3";
    if (value == 250) return "All.IP_CONST_CASTSPELL_SLAY_LIVING_9";
    if (value == 251) return "All.IP_CONST_CASTSPELL_SLEEP_2";
    if (value == 252) return "All.IP_CONST_CASTSPELL_SLEEP_5";
    if (value == 253) return "All.IP_CONST_CASTSPELL_SLOW_5";
    if (value == 254) return "All.IP_CONST_CASTSPELL_SOUND_BURST_3";
    if (value == 330) return "All.IP_CONST_CASTSPELL_SPECIAL_ALCOHOL_BEER";
    if (value == 332) return "All.IP_CONST_CASTSPELL_SPECIAL_ALCOHOL_SPIRITS";
    if (value == 331) return "All.IP_CONST_CASTSPELL_SPECIAL_ALCOHOL_WINE";
    if (value == 333) return "All.IP_CONST_CASTSPELL_SPECIAL_HERB_BELLADONNA";
    if (value == 334) return "All.IP_CONST_CASTSPELL_SPECIAL_HERB_GARLIC";
    if (value == 257) return "All.IP_CONST_CASTSPELL_SPELL_MANTLE_13";
    if (value == 256) return "All.IP_CONST_CASTSPELL_SPELL_RESISTANCE_15";
    if (value == 255) return "All.IP_CONST_CASTSPELL_SPELL_RESISTANCE_9";
    if (value == 385) return "All.IP_CONST_CASTSPELL_SPIKE_GROWTH_9";
    if (value == 259) return "All.IP_CONST_CASTSPELL_STINKING_CLOUD_5";
    if (value == 260) return "All.IP_CONST_CASTSPELL_STONESKIN_7";
    if (value == 399) return "All.IP_CONST_CASTSPELL_STONE_TO_FLESH_5";
    if (value == 261) return "All.IP_CONST_CASTSPELL_STORM_OF_VENGEANCE_17";
    if (value == 265) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_III_5";
    if (value == 264) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_II_3";
    if (value == 266) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_IV_7";
    if (value == 267) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_IX_17";
    if (value == 262) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_I_2";
    if (value == 263) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_I_5";
    if (value == 271) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_VIII_15";
    if (value == 270) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_VII_13";
    if (value == 269) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_VI_11";
    if (value == 268) return "All.IP_CONST_CASTSPELL_SUMMON_CREATURE_V_9";
    if (value == 272) return "All.IP_CONST_CASTSPELL_SUNBEAM_13";
    if (value == 358) return "All.IP_CONST_CASTSPELL_SUNBURST_20";
    if (value == 388) return "All.IP_CONST_CASTSPELL_TASHAS_HIDEOUS_LAUGHTER_7";
    if (value == 273) return "All.IP_CONST_CASTSPELL_TENSERS_TRANSFORMATION_11";
    if (value == 274) return "All.IP_CONST_CASTSPELL_TIME_STOP_17";
    if (value == 275) return "All.IP_CONST_CASTSPELL_TRUE_SEEING_9";
    if (value == 346) return "All.IP_CONST_CASTSPELL_TRUE_STRIKE_5";
    if (value == 375) return "All.IP_CONST_CASTSPELL_UNDEATHS_ETERNAL_FOE_20";
    if (value == 329) return "All.IP_CONST_CASTSPELL_UNIQUE_POWER";
    if (value == 335) return "All.IP_CONST_CASTSPELL_UNIQUE_POWER_SELF_ONLY";
    if (value == 277) return "All.IP_CONST_CASTSPELL_VAMPIRIC_TOUCH_5";
    if (value == 278) return "All.IP_CONST_CASTSPELL_VIRTUE_1";
    if (value == 279) return "All.IP_CONST_CASTSPELL_WAIL_OF_THE_BANSHEE_17";
    if (value == 280) return "All.IP_CONST_CASTSPELL_WALL_OF_FIRE_9";
    if (value == 322) return "All.IP_CONST_CASTSPELL_WAR_CRY_7";
    if (value == 281) return "All.IP_CONST_CASTSPELL_WEB_3";
    if (value == 282) return "All.IP_CONST_CASTSPELL_WEIRD_17";
    if (value == 283) return "All.IP_CONST_CASTSPELL_WORD_OF_FAITH_13";
    if (value == 372) return "All.IP_CONST_CASTSPELL_WOUNDING_WHISPERS_9";
    if (value == 0) return "All.IP_CONST_CLASS_BARBARIAN";
    if (value == 1) return "All.IP_CONST_CLASS_BARD";
    if (value == 2) return "All.IP_CONST_CLASS_CLERIC";
    if (value == 3) return "All.IP_CONST_CLASS_DRUID";
    if (value == 4) return "All.IP_CONST_CLASS_FIGHTER";
    if (value == 5) return "All.IP_CONST_CLASS_MONK";
    if (value == 6) return "All.IP_CONST_CLASS_PALADIN";
    if (value == 7) return "All.IP_CONST_CLASS_RANGER";
    if (value == 8) return "All.IP_CONST_CLASS_ROGUE";
    if (value == 9) return "All.IP_CONST_CLASS_SORCERER";
    if (value == 10) return "All.IP_CONST_CLASS_WIZARD";
    if (value == 5) return "All.IP_CONST_CONTAINERWEIGHTRED_100_PERCENT";
    if (value == 1) return "All.IP_CONST_CONTAINERWEIGHTRED_20_PERCENT";
    if (value == 2) return "All.IP_CONST_CONTAINERWEIGHTRED_40_PERCENT";
    if (value == 3) return "All.IP_CONST_CONTAINERWEIGHTRED_60_PERCENT";
    if (value == 4) return "All.IP_CONST_CONTAINERWEIGHTRED_80_PERCENT";
    if (value == 1) return "All.IP_CONST_DAMAGEBONUS_1";
    if (value == 20) return "All.IP_CONST_DAMAGEBONUS_10";
    if (value == 2) return "All.IP_CONST_DAMAGEBONUS_2";
    if (value == 3) return "All.IP_CONST_DAMAGEBONUS_3";
    if (value == 4) return "All.IP_CONST_DAMAGEBONUS_4";
    if (value == 5) return "All.IP_CONST_DAMAGEBONUS_5";
    if (value == 16) return "All.IP_CONST_DAMAGEBONUS_6";
    if (value == 17) return "All.IP_CONST_DAMAGEBONUS_7";
    if (value == 18) return "All.IP_CONST_DAMAGEBONUS_8";
    if (value == 19) return "All.IP_CONST_DAMAGEBONUS_9";
    if (value == 7) return "All.IP_CONST_DAMAGEIMMUNITY_100_PERCENT";
    if (value == 2) return "All.IP_CONST_DAMAGEIMMUNITY_10_PERCENT";
    if (value == 3) return "All.IP_CONST_DAMAGEIMMUNITY_25_PERCENT";
    if (value == 4) return "All.IP_CONST_DAMAGEIMMUNITY_50_PERCENT";
    if (value == 1) return "All.IP_CONST_DAMAGEIMMUNITY_5_PERCENT";
    if (value == 5) return "All.IP_CONST_DAMAGEIMMUNITY_75_PERCENT";
    if (value == 6) return "All.IP_CONST_DAMAGEIMMUNITY_90_PERCENT";
    if (value == 0) return "All.IP_CONST_DAMAGEREDUCTION_1";
    if (value == 9) return "All.IP_CONST_DAMAGEREDUCTION_10";
    if (value == 10) return "All.IP_CONST_DAMAGEREDUCTION_11";
    if (value == 11) return "All.IP_CONST_DAMAGEREDUCTION_12";
    if (value == 12) return "All.IP_CONST_DAMAGEREDUCTION_13";
    if (value == 13) return "All.IP_CONST_DAMAGEREDUCTION_14";
    if (value == 14) return "All.IP_CONST_DAMAGEREDUCTION_15";
    if (value == 15) return "All.IP_CONST_DAMAGEREDUCTION_16";
    if (value == 16) return "All.IP_CONST_DAMAGEREDUCTION_17";
    if (value == 17) return "All.IP_CONST_DAMAGEREDUCTION_18";
    if (value == 18) return "All.IP_CONST_DAMAGEREDUCTION_19";
    if (value == 1) return "All.IP_CONST_DAMAGEREDUCTION_2";
    if (value == 19) return "All.IP_CONST_DAMAGEREDUCTION_20";
    if (value == 2) return "All.IP_CONST_DAMAGEREDUCTION_3";
    if (value == 3) return "All.IP_CONST_DAMAGEREDUCTION_4";
    if (value == 4) return "All.IP_CONST_DAMAGEREDUCTION_5";
    if (value == 5) return "All.IP_CONST_DAMAGEREDUCTION_6";
    if (value == 6) return "All.IP_CONST_DAMAGEREDUCTION_7";
    if (value == 7) return "All.IP_CONST_DAMAGEREDUCTION_8";
    if (value == 8) return "All.IP_CONST_DAMAGEREDUCTION_9";
    if (value == 2) return "All.IP_CONST_DAMAGERESIST_10";
    if (value == 3) return "All.IP_CONST_DAMAGERESIST_15";
    if (value == 4) return "All.IP_CONST_DAMAGERESIST_20";
    if (value == 5) return "All.IP_CONST_DAMAGERESIST_25";
    if (value == 6) return "All.IP_CONST_DAMAGERESIST_30";
    if (value == 7) return "All.IP_CONST_DAMAGERESIST_35";
    if (value == 8) return "All.IP_CONST_DAMAGERESIST_40";
    if (value == 9) return "All.IP_CONST_DAMAGERESIST_45";
    if (value == 1) return "All.IP_CONST_DAMAGERESIST_5";
    if (value == 10) return "All.IP_CONST_DAMAGERESIST_50";
    if (value == 2) return "All.IP_CONST_DAMAGESOAK_10_HP";
    if (value == 3) return "All.IP_CONST_DAMAGESOAK_15_HP";
    if (value == 4) return "All.IP_CONST_DAMAGESOAK_20_HP";
    if (value == 5) return "All.IP_CONST_DAMAGESOAK_25_HP";
    if (value == 6) return "All.IP_CONST_DAMAGESOAK_30_HP";
    if (value == 7) return "All.IP_CONST_DAMAGESOAK_35_HP";
    if (value == 8) return "All.IP_CONST_DAMAGESOAK_40_HP";
    if (value == 9) return "All.IP_CONST_DAMAGESOAK_45_HP";
    if (value == 10) return "All.IP_CONST_DAMAGESOAK_50_HP";
    if (value == 1) return "All.IP_CONST_DAMAGESOAK_5_HP";
    if (value == 6) return "All.IP_CONST_DAMAGETYPE_ACID";
    if (value == 0) return "All.IP_CONST_DAMAGETYPE_BLUDGEONING";
    if (value == 7) return "All.IP_CONST_DAMAGETYPE_COLD";
    if (value == 8) return "All.IP_CONST_DAMAGETYPE_DIVINE";
    if (value == 9) return "All.IP_CONST_DAMAGETYPE_ELECTRICAL";
    if (value == 10) return "All.IP_CONST_DAMAGETYPE_FIRE";
    if (value == 5) return "All.IP_CONST_DAMAGETYPE_MAGICAL";
    if (value == 11) return "All.IP_CONST_DAMAGETYPE_NEGATIVE";
    if (value == 4) return "All.IP_CONST_DAMAGETYPE_PHYSICAL";
    if (value == 1) return "All.IP_CONST_DAMAGETYPE_PIERCING";
    if (value == 12) return "All.IP_CONST_DAMAGETYPE_POSITIVE";
    if (value == 2) return "All.IP_CONST_DAMAGETYPE_SLASHING";
    if (value == 13) return "All.IP_CONST_DAMAGETYPE_SONIC";
    if (value == 3) return "All.IP_CONST_DAMAGETYPE_SUBDUAL";
    if (value == 7) return "All.IP_CONST_DAMAGEVULNERABILITY_100_PERCENT";
    if (value == 2) return "All.IP_CONST_DAMAGEVULNERABILITY_10_PERCENT";
    if (value == 3) return "All.IP_CONST_DAMAGEVULNERABILITY_25_PERCENT";
    if (value == 4) return "All.IP_CONST_DAMAGEVULNERABILITY_50_PERCENT";
    if (value == 1) return "All.IP_CONST_DAMAGEVULNERABILITY_5_PERCENT";
    if (value == 5) return "All.IP_CONST_DAMAGEVULNERABILITY_75_PERCENT";
    if (value == 6) return "All.IP_CONST_DAMAGEVULNERABILITY_90_PERCENT";
    if (value == 0) return "All.IP_CONST_FEAT_ALERTNESS";
    if (value == 1) return "All.IP_CONST_FEAT_AMBIDEXTROUS";
    if (value == 24) return "All.IP_CONST_FEAT_ARMOR_PROF_HEAVY";
    if (value == 25) return "All.IP_CONST_FEAT_ARMOR_PROF_LIGHT";
    if (value == 26) return "All.IP_CONST_FEAT_ARMOR_PROF_MEDIUM";
    if (value == 2) return "All.IP_CONST_FEAT_CLEAVE";
    if (value == 3) return "All.IP_CONST_FEAT_COMBAT_CASTING";
    if (value == 28) return "All.IP_CONST_FEAT_DISARM";
    if (value == 37) return "All.IP_CONST_FEAT_DISARM_WHIP";
    if (value == 4) return "All.IP_CONST_FEAT_DODGE";
    if (value == 5) return "All.IP_CONST_FEAT_EXTRA_TURNING";
    if (value == 31) return "All.IP_CONST_FEAT_HIDE_IN_PLAIN_SIGHT";
    if (value == 20) return "All.IP_CONST_FEAT_IMPCRITUNARM";
    if (value == 6) return "All.IP_CONST_FEAT_KNOCKDOWN";
    if (value == 27) return "All.IP_CONST_FEAT_MOBILITY";
    if (value == 53) return "All.IP_CONST_FEAT_PLAYER_TOOL_01";
    if (value == 54) return "All.IP_CONST_FEAT_PLAYER_TOOL_02";
    if (value == 55) return "All.IP_CONST_FEAT_PLAYER_TOOL_03";
    if (value == 56) return "All.IP_CONST_FEAT_PLAYER_TOOL_04";
    if (value == 57) return "All.IP_CONST_FEAT_PLAYER_TOOL_05";
    if (value == 58) return "All.IP_CONST_FEAT_PLAYER_TOOL_06";
    if (value == 59) return "All.IP_CONST_FEAT_PLAYER_TOOL_07";
    if (value == 60) return "All.IP_CONST_FEAT_PLAYER_TOOL_08";
    if (value == 61) return "All.IP_CONST_FEAT_PLAYER_TOOL_09";
    if (value == 62) return "All.IP_CONST_FEAT_PLAYER_TOOL_10";
    if (value == 7) return "All.IP_CONST_FEAT_POINTBLANK";
    if (value == 16) return "All.IP_CONST_FEAT_POWERATTACK";
    if (value == 30) return "All.IP_CONST_FEAT_RAPID_SHOT";
    if (value == 35) return "All.IP_CONST_FEAT_SHIELD_PROFICIENCY";
    if (value == 32) return "All.IP_CONST_FEAT_SNEAK_ATTACK_1D6";
    if (value == 33) return "All.IP_CONST_FEAT_SNEAK_ATTACK_2D6";
    if (value == 34) return "All.IP_CONST_FEAT_SNEAK_ATTACK_3D6";
    if (value == 39) return "All.IP_CONST_FEAT_SNEAK_ATTACK_5D6";
    if (value == 8) return "All.IP_CONST_FEAT_SPELLFOCUSABJ";
    if (value == 9) return "All.IP_CONST_FEAT_SPELLFOCUSCON";
    if (value == 10) return "All.IP_CONST_FEAT_SPELLFOCUSDIV";
    if (value == 11) return "All.IP_CONST_FEAT_SPELLFOCUSENC";
    if (value == 12) return "All.IP_CONST_FEAT_SPELLFOCUSEVO";
    if (value == 13) return "All.IP_CONST_FEAT_SPELLFOCUSILL";
    if (value == 14) return "All.IP_CONST_FEAT_SPELLFOCUSNEC";
    if (value == 15) return "All.IP_CONST_FEAT_SPELLPENETRATION";
    if (value == 17) return "All.IP_CONST_FEAT_TWO_WEAPON_FIGHTING";
    if (value == 36) return "All.IP_CONST_FEAT_USE_POISON";
    if (value == 19) return "All.IP_CONST_FEAT_WEAPFINESSE";
    if (value == 38) return "All.IP_CONST_FEAT_WEAPON_PROF_CREATURE";
    if (value == 21) return "All.IP_CONST_FEAT_WEAPON_PROF_EXOTIC";
    if (value == 22) return "All.IP_CONST_FEAT_WEAPON_PROF_MARTIAL";
    if (value == 23) return "All.IP_CONST_FEAT_WEAPON_PROF_SIMPLE";
    if (value == 18) return "All.IP_CONST_FEAT_WEAPSPEUNARM";
    if (value == 29) return "All.IP_CONST_FEAT_WHIRLWIND";
    if (value == 0) return "All.IP_CONST_IMMUNITYMISC_BACKSTAB";
    if (value == 8) return "All.IP_CONST_IMMUNITYMISC_CRITICAL_HITS";
    if (value == 9) return "All.IP_CONST_IMMUNITYMISC_DEATH_MAGIC";
    if (value == 4) return "All.IP_CONST_IMMUNITYMISC_DISEASE";
    if (value == 5) return "All.IP_CONST_IMMUNITYMISC_FEAR";
    if (value == 6) return "All.IP_CONST_IMMUNITYMISC_KNOCKDOWN";
    if (value == 1) return "All.IP_CONST_IMMUNITYMISC_LEVEL_ABIL_DRAIN";
    if (value == 2) return "All.IP_CONST_IMMUNITYMISC_MINDSPELLS";
    if (value == 7) return "All.IP_CONST_IMMUNITYMISC_PARALYSIS";
    if (value == 3) return "All.IP_CONST_IMMUNITYMISC_POISON";
    if (value == 0) return "All.IP_CONST_IMMUNITYSPELL_ACID_FOG";
    if (value == 1) return "All.IP_CONST_IMMUNITYSPELL_AID";
    if (value == 182) return "All.IP_CONST_IMMUNITYSPELL_AURA_OF_VITALITY";
    if (value == 2) return "All.IP_CONST_IMMUNITYSPELL_BARKSKIN";
    if (value == 3) return "All.IP_CONST_IMMUNITYSPELL_BESTOW_CURSE";
    if (value == 6) return "All.IP_CONST_IMMUNITYSPELL_BLINDNESS_AND_DEAFNESS";
    if (value == 8) return "All.IP_CONST_IMMUNITYSPELL_BURNING_HANDS";
    if (value == 9) return "All.IP_CONST_IMMUNITYSPELL_CALL_LIGHTNING";
    if (value == 12) return "All.IP_CONST_IMMUNITYSPELL_CHAIN_LIGHTNING";
    if (value == 13) return "All.IP_CONST_IMMUNITYSPELL_CHARM_MONSTER";
    if (value == 14) return "All.IP_CONST_IMMUNITYSPELL_CHARM_PERSON";
    if (value == 15) return "All.IP_CONST_IMMUNITYSPELL_CHARM_PERSON_OR_ANIMAL";
    if (value == 16) return "All.IP_CONST_IMMUNITYSPELL_CIRCLE_OF_DEATH";
    if (value == 17) return "All.IP_CONST_IMMUNITYSPELL_CIRCLE_OF_DOOM";
    if (value == 21) return "All.IP_CONST_IMMUNITYSPELL_CLOUDKILL";
    if (value == 22) return "All.IP_CONST_IMMUNITYSPELL_COLOR_SPRAY";
    if (value == 23) return "All.IP_CONST_IMMUNITYSPELL_CONE_OF_COLD";
    if (value == 24) return "All.IP_CONST_IMMUNITYSPELL_CONFUSION";
    if (value == 25) return "All.IP_CONST_IMMUNITYSPELL_CONTAGION";
    if (value == 26) return "All.IP_CONST_IMMUNITYSPELL_CONTROL_UNDEAD";
    if (value == 27) return "All.IP_CONST_IMMUNITYSPELL_CURE_CRITICAL_WOUNDS";
    if (value == 28) return "All.IP_CONST_IMMUNITYSPELL_CURE_LIGHT_WOUNDS";
    if (value == 29) return "All.IP_CONST_IMMUNITYSPELL_CURE_MINOR_WOUNDS";
    if (value == 30) return "All.IP_CONST_IMMUNITYSPELL_CURE_MODERATE_WOUNDS";
    if (value == 31) return "All.IP_CONST_IMMUNITYSPELL_CURE_SERIOUS_WOUNDS";
    if (value == 32) return "All.IP_CONST_IMMUNITYSPELL_DARKNESS";
    if (value == 33) return "All.IP_CONST_IMMUNITYSPELL_DAZE";
    if (value == 34) return "All.IP_CONST_IMMUNITYSPELL_DEATH_WARD";
    if (value == 35) return "All.IP_CONST_IMMUNITYSPELL_DELAYED_BLAST_FIREBALL";
    if (value == 36) return "All.IP_CONST_IMMUNITYSPELL_DISMISSAL";
    if (value == 37) return "All.IP_CONST_IMMUNITYSPELL_DISPEL_MAGIC";
    if (value == 39) return "All.IP_CONST_IMMUNITYSPELL_DOMINATE_ANIMAL";
    if (value == 40) return "All.IP_CONST_IMMUNITYSPELL_DOMINATE_MONSTER";
    if (value == 41) return "All.IP_CONST_IMMUNITYSPELL_DOMINATE_PERSON";
    if (value == 42) return "All.IP_CONST_IMMUNITYSPELL_DOOM";
    if (value == 173) return "All.IP_CONST_IMMUNITYSPELL_EAGLE_SPLEDOR";
    if (value == 46) return "All.IP_CONST_IMMUNITYSPELL_ENERGY_DRAIN";
    if (value == 47) return "All.IP_CONST_IMMUNITYSPELL_ENERVATION";
    if (value == 48) return "All.IP_CONST_IMMUNITYSPELL_ENTANGLE";
    if (value == 185) return "All.IP_CONST_IMMUNITYSPELL_EVARDS_BLACK_TENTACLES";
    if (value == 49) return "All.IP_CONST_IMMUNITYSPELL_FEAR";
    if (value == 50) return "All.IP_CONST_IMMUNITYSPELL_FEEBLEMIND";
    if (value == 187) return "All.IP_CONST_IMMUNITYSPELL_FIND_TRAPS";
    if (value == 51) return "All.IP_CONST_IMMUNITYSPELL_FINGER_OF_DEATH";
    if (value == 53) return "All.IP_CONST_IMMUNITYSPELL_FIREBALL";
    if (value == 52) return "All.IP_CONST_IMMUNITYSPELL_FIRE_STORM";
    if (value == 54) return "All.IP_CONST_IMMUNITYSPELL_FLAME_ARROW";
    if (value == 55) return "All.IP_CONST_IMMUNITYSPELL_FLAME_LASH";
    if (value == 56) return "All.IP_CONST_IMMUNITYSPELL_FLAME_STRIKE";
    if (value == 175) return "All.IP_CONST_IMMUNITYSPELL_FOXS_CUNNING";
    if (value == 57) return "All.IP_CONST_IMMUNITYSPELL_FREEDOM_OF_MOVEMENT";
    if (value == 59) return "All.IP_CONST_IMMUNITYSPELL_GREASE";
    if (value == 179) return "All.IP_CONST_IMMUNITYSPELL_GREATER_BULLS_STRENGTH";
    if (value == 180) return "All.IP_CONST_IMMUNITYSPELL_GREATER_CATS_GRACE";
    if (value == 60) return "All.IP_CONST_IMMUNITYSPELL_GREATER_DISPELLING";
    if (value == 176) return "All.IP_CONST_IMMUNITYSPELL_GREATER_EAGLES_SPLENDOR";
    if (value == 181) return "All.IP_CONST_IMMUNITYSPELL_GREATER_ENDURANCE";
    if (value == 178) return "All.IP_CONST_IMMUNITYSPELL_GREATER_FOXS_CUNNING";
    if (value == 177) return "All.IP_CONST_IMMUNITYSPELL_GREATER_OWLS_WISDOM";
    if (value == 62) return "All.IP_CONST_IMMUNITYSPELL_GREATER_PLANAR_BINDING";
    if (value == 64) return "All.IP_CONST_IMMUNITYSPELL_GREATER_SHADOW_CONJURATION";
    if (value == 65) return "All.IP_CONST_IMMUNITYSPELL_GREATER_SPELL_BREACH";
    if (value == 68) return "All.IP_CONST_IMMUNITYSPELL_HAMMER_OF_THE_GODS";
    if (value == 69) return "All.IP_CONST_IMMUNITYSPELL_HARM";
    if (value == 71) return "All.IP_CONST_IMMUNITYSPELL_HEAL";
    if (value == 72) return "All.IP_CONST_IMMUNITYSPELL_HEALING_CIRCLE";
    if (value == 73) return "All.IP_CONST_IMMUNITYSPELL_HOLD_ANIMAL";
    if (value == 74) return "All.IP_CONST_IMMUNITYSPELL_HOLD_MONSTER";
    if (value == 75) return "All.IP_CONST_IMMUNITYSPELL_HOLD_PERSON";
    if (value == 78) return "All.IP_CONST_IMMUNITYSPELL_IMPLOSION";
    if (value == 79) return "All.IP_CONST_IMMUNITYSPELL_IMPROVED_INVISIBILITY";
    if (value == 80) return "All.IP_CONST_IMMUNITYSPELL_INCENDIARY_CLOUD";
    if (value == 82) return "All.IP_CONST_IMMUNITYSPELL_INVISIBILITY_PURGE";
    if (value == 186) return "All.IP_CONST_IMMUNITYSPELL_LEGEND_LORE";
    if (value == 84) return "All.IP_CONST_IMMUNITYSPELL_LESSER_DISPEL";
    if (value == 86) return "All.IP_CONST_IMMUNITYSPELL_LESSER_PLANAR_BINDING";
    if (value == 88) return "All.IP_CONST_IMMUNITYSPELL_LESSER_SPELL_BREACH";
    if (value == 91) return "All.IP_CONST_IMMUNITYSPELL_LIGHTNING_BOLT";
    if (value == 171) return "All.IP_CONST_IMMUNITYSPELL_MAGIC_CIRCLE_AGAINST_ALIGNMENT";
    if (value == 97) return "All.IP_CONST_IMMUNITYSPELL_MAGIC_MISSILE";
    if (value == 100) return "All.IP_CONST_IMMUNITYSPELL_MASS_BLINDNESS_AND_DEAFNESS";
    if (value == 101) return "All.IP_CONST_IMMUNITYSPELL_MASS_CHARM";
    if (value == 104) return "All.IP_CONST_IMMUNITYSPELL_MASS_HEAL";
    if (value == 105) return "All.IP_CONST_IMMUNITYSPELL_MELFS_ACID_ARROW";
    if (value == 106) return "All.IP_CONST_IMMUNITYSPELL_METEOR_SWARM";
    if (value == 108) return "All.IP_CONST_IMMUNITYSPELL_MIND_FOG";
    if (value == 112) return "All.IP_CONST_IMMUNITYSPELL_MORDENKAINENS_DISJUNCTION";
    if (value == 174) return "All.IP_CONST_IMMUNITYSPELL_OWLS_WISDOM";
    if (value == 116) return "All.IP_CONST_IMMUNITYSPELL_PHANTASMAL_KILLER";
    if (value == 117) return "All.IP_CONST_IMMUNITYSPELL_PLANAR_BINDING";
    if (value == 118) return "All.IP_CONST_IMMUNITYSPELL_POISON";
    if (value == 120) return "All.IP_CONST_IMMUNITYSPELL_POWER_WORD_KILL";
    if (value == 121) return "All.IP_CONST_IMMUNITYSPELL_POWER_WORD_STUN";
    if (value == 124) return "All.IP_CONST_IMMUNITYSPELL_PRISMATIC_SPRAY";
    if (value == 131) return "All.IP_CONST_IMMUNITYSPELL_RAY_OF_ENFEEBLEMENT";
    if (value == 132) return "All.IP_CONST_IMMUNITYSPELL_RAY_OF_FROST";
    if (value == 184) return "All.IP_CONST_IMMUNITYSPELL_REGENERATE";
    if (value == 142) return "All.IP_CONST_IMMUNITYSPELL_SCARE";
    if (value == 143) return "All.IP_CONST_IMMUNITYSPELL_SEARING_LIGHT";
    if (value == 145) return "All.IP_CONST_IMMUNITYSPELL_SHADES";
    if (value == 146) return "All.IP_CONST_IMMUNITYSPELL_SHADOW_CONJURATION";
    if (value == 150) return "All.IP_CONST_IMMUNITYSPELL_SILENCE";
    if (value == 151) return "All.IP_CONST_IMMUNITYSPELL_SLAY_LIVING";
    if (value == 152) return "All.IP_CONST_IMMUNITYSPELL_SLEEP";
    if (value == 153) return "All.IP_CONST_IMMUNITYSPELL_SLOW";
    if (value == 154) return "All.IP_CONST_IMMUNITYSPELL_SOUND_BURST";
    if (value == 158) return "All.IP_CONST_IMMUNITYSPELL_STINKING_CLOUD";
    if (value == 159) return "All.IP_CONST_IMMUNITYSPELL_STONESKIN";
    if (value == 160) return "All.IP_CONST_IMMUNITYSPELL_STORM_OF_VENGEANCE";
    if (value == 161) return "All.IP_CONST_IMMUNITYSPELL_SUNBEAM";
    if (value == 165) return "All.IP_CONST_IMMUNITYSPELL_VIRTUE";
    if (value == 166) return "All.IP_CONST_IMMUNITYSPELL_WAIL_OF_THE_BANSHEE";
    if (value == 183) return "All.IP_CONST_IMMUNITYSPELL_WAR_CRY";
    if (value == 167) return "All.IP_CONST_IMMUNITYSPELL_WEB";
    if (value == 168) return "All.IP_CONST_IMMUNITYSPELL_WEIRD";
    if (value == 169) return "All.IP_CONST_IMMUNITYSPELL_WORD_OF_FAITH";
    if (value == 4) return "All.IP_CONST_LIGHTBRIGHTNESS_BRIGHT";
    if (value == 1) return "All.IP_CONST_LIGHTBRIGHTNESS_DIM";
    if (value == 2) return "All.IP_CONST_LIGHTBRIGHTNESS_LOW";
    if (value == 3) return "All.IP_CONST_LIGHTBRIGHTNESS_NORMAL";
    if (value == 0) return "All.IP_CONST_LIGHTCOLOR_BLUE";
    if (value == 4) return "All.IP_CONST_LIGHTCOLOR_GREEN";
    if (value == 5) return "All.IP_CONST_LIGHTCOLOR_ORANGE";
    if (value == 2) return "All.IP_CONST_LIGHTCOLOR_PURPLE";
    if (value == 3) return "All.IP_CONST_LIGHTCOLOR_RED";
    if (value == 6) return "All.IP_CONST_LIGHTCOLOR_WHITE";
    if (value == 1) return "All.IP_CONST_LIGHTCOLOR_YELLOW";
    if (value == 18) return "All.IP_CONST_ONHIT_ABILITYDRAIN";
    if (value == 16) return "All.IP_CONST_ONHIT_BLINDNESS";
    if (value == 0) return "All.IP_CONST_ONHIT_CASTSPELL_ACID_FOG";
    if (value == 81) return "All.IP_CONST_ONHIT_CASTSPELL_ACID_SPLASH";
    if (value == 78) return "All.IP_CONST_ONHIT_CASTSPELL_ACTIVATE_ITEM";
    if (value == 91) return "All.IP_CONST_ONHIT_CASTSPELL_BALAGARNSIRONHORN";
    if (value == 113) return "All.IP_CONST_ONHIT_CASTSPELL_BALL_LIGHTNING";
    if (value == 100) return "All.IP_CONST_ONHIT_CASTSPELL_BANE";
    if (value == 85) return "All.IP_CONST_ONHIT_CASTSPELL_BANISHMENT";
    if (value == 1) return "All.IP_CONST_ONHIT_CASTSPELL_BESTOW_CURSE";
    if (value == 106) return "All.IP_CONST_ONHIT_CASTSPELL_BIGBYS_CLENCHED_FIST";
    if (value == 107) return "All.IP_CONST_ONHIT_CASTSPELL_BIGBYS_CRUSHING_HAND";
    if (value == 104) return "All.IP_CONST_ONHIT_CASTSPELL_BIGBYS_FORCEFUL_HAND";
    if (value == 105) return "All.IP_CONST_ONHIT_CASTSPELL_BIGBYS_GRASPING_HAND";
    if (value == 103) return "All.IP_CONST_ONHIT_CASTSPELL_BIGBYS_INTERPOSING_HAND";
    if (value == 2) return "All.IP_CONST_ONHIT_CASTSPELL_BLADE_BARRIER";
    if (value == 3) return "All.IP_CONST_ONHIT_CASTSPELL_BLINDNESS_AND_DEAFNESS";
    if (value == 80) return "All.IP_CONST_ONHIT_CASTSPELL_BOMBARDMENT";
    if (value == 4) return "All.IP_CONST_ONHIT_CASTSPELL_CALL_LIGHTNING";
    if (value == 5) return "All.IP_CONST_ONHIT_CASTSPELL_CHAIN_LIGHTNING";
    if (value == 6) return "All.IP_CONST_ONHIT_CASTSPELL_CLOUDKILL";
    if (value == 140) return "All.IP_CONST_ONHIT_CASTSPELL_COMBUST";
    if (value == 7) return "All.IP_CONST_ONHIT_CASTSPELL_CONFUSION";
    if (value == 8) return "All.IP_CONST_ONHIT_CASTSPELL_CONTAGION";
    if (value == 72) return "All.IP_CONST_ONHIT_CASTSPELL_CREEPING_DOOM";
    if (value == 110) return "All.IP_CONST_ONHIT_CASTSPELL_CRUMBLE";
    if (value == 9) return "All.IP_CONST_ONHIT_CASTSPELL_DARKNESS";
    if (value == 10) return "All.IP_CONST_ONHIT_CASTSPELL_DAZE";
    if (value == 137) return "All.IP_CONST_ONHIT_CASTSPELL_DEAFENING_CLNG";
    if (value == 11) return "All.IP_CONST_ONHIT_CASTSPELL_DELAYED_BLAST_FIREBALL";
    if (value == 73) return "All.IP_CONST_ONHIT_CASTSPELL_DESTRUCTION";
    if (value == 12) return "All.IP_CONST_ONHIT_CASTSPELL_DISMISSAL";
    if (value == 13) return "All.IP_CONST_ONHIT_CASTSPELL_DISPEL_MAGIC";
    if (value == 14) return "All.IP_CONST_ONHIT_CASTSPELL_DOOM";
    if (value == 92) return "All.IP_CONST_ONHIT_CASTSPELL_DROWN";
    if (value == 83) return "All.IP_CONST_ONHIT_CASTSPELL_EARTHQUAKE";
    if (value == 93) return "All.IP_CONST_ONHIT_CASTSPELL_ELECTRIC_JOLT";
    if (value == 15) return "All.IP_CONST_ONHIT_CASTSPELL_ENERGY_DRAIN";
    if (value == 16) return "All.IP_CONST_ONHIT_CASTSPELL_ENERVATION";
    if (value == 17) return "All.IP_CONST_ONHIT_CASTSPELL_ENTANGLE";
    if (value == 77) return "All.IP_CONST_ONHIT_CASTSPELL_EVARDS_BLACK_TENTACLES";
    if (value == 121) return "All.IP_CONST_ONHIT_CASTSPELL_EVIL_BLIGHT";
    if (value == 18) return "All.IP_CONST_ONHIT_CASTSPELL_FEAR";
    if (value == 19) return "All.IP_CONST_ONHIT_CASTSPELL_FEEBLEMIND";
    if (value == 21) return "All.IP_CONST_ONHIT_CASTSPELL_FIREBALL";
    if (value == 94) return "All.IP_CONST_ONHIT_CASTSPELL_FIREBRAND";
    if (value == 20) return "All.IP_CONST_ONHIT_CASTSPELL_FIRE_STORM";
    if (value == 22) return "All.IP_CONST_ONHIT_CASTSPELL_FLAME_LASH";
    if (value == 23) return "All.IP_CONST_ONHIT_CASTSPELL_FLAME_STRIKE";
    if (value == 79) return "All.IP_CONST_ONHIT_CASTSPELL_FLARE";
    if (value == 108) return "All.IP_CONST_ONHIT_CASTSPELL_FLESH_TO_STONE";
    if (value == 139) return "All.IP_CONST_ONHIT_CASTSPELL_FREEZE";
    if (value == 114) return "All.IP_CONST_ONHIT_CASTSPELL_GEDLEES_ELECTRIC_LOOP";
    if (value == 24) return "All.IP_CONST_ONHIT_CASTSPELL_GHOUL_TOUCH";
    if (value == 25) return "All.IP_CONST_ONHIT_CASTSPELL_GREASE";
    if (value == 26) return "All.IP_CONST_ONHIT_CASTSPELL_GREATER_DISPELLING";
    if (value == 27) return "All.IP_CONST_ONHIT_CASTSPELL_GREATER_SPELL_BREACH";
    if (value == 112) return "All.IP_CONST_ONHIT_CASTSPELL_GREAT_THUNDERCLAP";
    if (value == 28) return "All.IP_CONST_ONHIT_CASTSPELL_GUST_OF_WIND";
    if (value == 29) return "All.IP_CONST_ONHIT_CASTSPELL_HAMMER_OF_THE_GODS";
    if (value == 30) return "All.IP_CONST_ONHIT_CASTSPELL_HARM";
    if (value == 31) return "All.IP_CONST_ONHIT_CASTSPELL_HOLD_ANIMAL";
    if (value == 32) return "All.IP_CONST_ONHIT_CASTSPELL_HOLD_MONSTER";
    if (value == 33) return "All.IP_CONST_ONHIT_CASTSPELL_HOLD_PERSON";
    if (value == 115) return "All.IP_CONST_ONHIT_CASTSPELL_HORIZIKAULS_BOOM";
    if (value == 74) return "All.IP_CONST_ONHIT_CASTSPELL_HORRID_WILTING";
    if (value == 75) return "All.IP_CONST_ONHIT_CASTSPELL_ICE_STORM";
    if (value == 34) return "All.IP_CONST_ONHIT_CASTSPELL_IMPLOSION";
    if (value == 35) return "All.IP_CONST_ONHIT_CASTSPELL_INCENDIARY_CLOUD";
    if (value == 97) return "All.IP_CONST_ONHIT_CASTSPELL_INFERNO";
    if (value == 111) return "All.IP_CONST_ONHIT_CASTSPELL_INFESTATION_OF_MAGGOTS";
    if (value == 90) return "All.IP_CONST_ONHIT_CASTSPELL_INFLICT_CRITICAL_WOUNDS";
    if (value == 87) return "All.IP_CONST_ONHIT_CASTSPELL_INFLICT_LIGHT_WOUNDS";
    if (value == 86) return "All.IP_CONST_ONHIT_CASTSPELL_INFLICT_MINOR_WOUNDS";
    if (value == 88) return "All.IP_CONST_ONHIT_CASTSPELL_INFLICT_MODERATE_WOUNDS";
    if (value == 89) return "All.IP_CONST_ONHIT_CASTSPELL_INFLICT_SERIOUS_WOUNDS";
    if (value == 135) return "All.IP_CONST_ONHIT_CASTSPELL_INTELLIGENT_WEAPON_ONHIT";
    if (value == 99) return "All.IP_CONST_ONHIT_CASTSPELL_ISAACS_GREATER_MISSILE_STORM";
    if (value == 98) return "All.IP_CONST_ONHIT_CASTSPELL_ISAACS_LESSER_MISSILE_STORM";
    if (value == 138) return "All.IP_CONST_ONHIT_CASTSPELL_KNOCKDOWN";
    if (value == 36) return "All.IP_CONST_ONHIT_CASTSPELL_LESSER_DISPEL";
    if (value == 38) return "All.IP_CONST_ONHIT_CASTSPELL_LESSER_SPELL_BREACH";
    if (value == 40) return "All.IP_CONST_ONHIT_CASTSPELL_LIGHT";
    if (value == 41) return "All.IP_CONST_ONHIT_CASTSPELL_LIGHTNING_BOLT";
    if (value == 42) return "All.IP_CONST_ONHIT_CASTSPELL_MAGIC_MISSILE";
    if (value == 43) return "All.IP_CONST_ONHIT_CASTSPELL_MASS_BLINDNESS_AND_DEAFNESS";
    if (value == 44) return "All.IP_CONST_ONHIT_CASTSPELL_MASS_CHARM";
    if (value == 45) return "All.IP_CONST_ONHIT_CASTSPELL_MELFS_ACID_ARROW";
    if (value == 116) return "All.IP_CONST_ONHIT_CASTSPELL_MESTILS_ACID_BREATH";
    if (value == 46) return "All.IP_CONST_ONHIT_CASTSPELL_METEOR_SWARM";
    if (value == 47) return "All.IP_CONST_ONHIT_CASTSPELL_MIND_FOG";
    if (value == 76) return "All.IP_CONST_ONHIT_CASTSPELL_NEGATIVE_ENERGY_BURST";
    if (value == 133) return "All.IP_CONST_ONHIT_CASTSPELL_ONHITDEMILICHTOUCH";
    if (value == 134) return "All.IP_CONST_ONHIT_CASTSPELL_ONHITDRACOLICHTOUCH";
    if (value == 129) return "All.IP_CONST_ONHIT_CASTSPELL_ONHITFLAMINGSKIN";
    if (value == 132) return "All.IP_CONST_ONHIT_CASTSPELL_ONHITRUINARMORBEBILITH";
    if (value == 130) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_CHAOSSHIELD";
    if (value == 131) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_CONSTRICTWEAPON";
    if (value == 127) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_DARKFIRE";
    if (value == 128) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_EXTRACTBRAIN";
    if (value == 124) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_FIREDAMAGE";
    if (value == 126) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_PLANARRIFT";
    if (value == 123) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_SLAYRAKSHASA";
    if (value == 122) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_TELEPORT";
    if (value == 125) return "All.IP_CONST_ONHIT_CASTSPELL_ONHIT_UNIQUEPOWER";
    if (value == 136) return "All.IP_CONST_ONHIT_CASTSPELL_PARALYZE_2";
    if (value == 49) return "All.IP_CONST_ONHIT_CASTSPELL_PHANTASMAL_KILLER";
    if (value == 50) return "All.IP_CONST_ONHIT_CASTSPELL_POISON";
    if (value == 51) return "All.IP_CONST_ONHIT_CASTSPELL_POWER_WORD_KILL";
    if (value == 52) return "All.IP_CONST_ONHIT_CASTSPELL_POWER_WORD_STUN";
    if (value == 82) return "All.IP_CONST_ONHIT_CASTSPELL_QUILLFIRE";
    if (value == 54) return "All.IP_CONST_ONHIT_CASTSPELL_SCARE";
    if (value == 117) return "All.IP_CONST_ONHIT_CASTSPELL_SCINTILLATING_SPHERE";
    if (value == 55) return "All.IP_CONST_ONHIT_CASTSPELL_SEARING_LIGHT";
    if (value == 56) return "All.IP_CONST_ONHIT_CASTSPELL_SILENCE";
    if (value == 57) return "All.IP_CONST_ONHIT_CASTSPELL_SLAY_LIVING";
    if (value == 58) return "All.IP_CONST_ONHIT_CASTSPELL_SLEEP";
    if (value == 59) return "All.IP_CONST_ONHIT_CASTSPELL_SLOW";
    if (value == 60) return "All.IP_CONST_ONHIT_CASTSPELL_SOUND_BURST";
    if (value == 101) return "All.IP_CONST_ONHIT_CASTSPELL_SPIKE_GROWTH";
    if (value == 61) return "All.IP_CONST_ONHIT_CASTSPELL_STINKING_CLOUD";
    if (value == 119) return "All.IP_CONST_ONHIT_CASTSPELL_STONEHOLD";
    if (value == 109) return "All.IP_CONST_ONHIT_CASTSPELL_STONE_TO_FLESH";
    if (value == 63) return "All.IP_CONST_ONHIT_CASTSPELL_STORM_OF_VENGEANCE";
    if (value == 64) return "All.IP_CONST_ONHIT_CASTSPELL_SUNBEAM";
    if (value == 84) return "All.IP_CONST_ONHIT_CASTSPELL_SUNBURST";
    if (value == 102) return "All.IP_CONST_ONHIT_CASTSPELL_TASHAS_HIDEOUS_LAUGHTER";
    if (value == 96) return "All.IP_CONST_ONHIT_CASTSPELL_UNDEATHS_ETERNAL_FOE";
    if (value == 118) return "All.IP_CONST_ONHIT_CASTSPELL_UNDEATH_TO_DEATH";
    if (value == 65) return "All.IP_CONST_ONHIT_CASTSPELL_VAMPIRIC_TOUCH";
    if (value == 66) return "All.IP_CONST_ONHIT_CASTSPELL_WAIL_OF_THE_BANSHEE";
    if (value == 67) return "All.IP_CONST_ONHIT_CASTSPELL_WALL_OF_FIRE";
    if (value == 68) return "All.IP_CONST_ONHIT_CASTSPELL_WEB";
    if (value == 69) return "All.IP_CONST_ONHIT_CASTSPELL_WEIRD";
    if (value == 70) return "All.IP_CONST_ONHIT_CASTSPELL_WORD_OF_FAITH";
    if (value == 95) return "All.IP_CONST_ONHIT_CASTSPELL_WOUNDING_WHISPERS";
    if (value == 3) return "All.IP_CONST_ONHIT_CONFUSION";
    if (value == 5) return "All.IP_CONST_ONHIT_DAZE";
    if (value == 15) return "All.IP_CONST_ONHIT_DEAFNESS";
    if (value == 20) return "All.IP_CONST_ONHIT_DISEASE";
    if (value == 11) return "All.IP_CONST_ONHIT_DISPELMAGIC";
    if (value == 6) return "All.IP_CONST_ONHIT_DOOM";
    if (value == 1) return "All.IP_CONST_ONHIT_DURATION_10_PERCENT_4_ROUNDS";
    if (value == 2) return "All.IP_CONST_ONHIT_DURATION_25_PERCENT_3_ROUNDS";
    if (value == 3) return "All.IP_CONST_ONHIT_DURATION_50_PERCENT_2_ROUNDS";
    if (value == 0) return "All.IP_CONST_ONHIT_DURATION_5_PERCENT_5_ROUNDS";
    if (value == 4) return "All.IP_CONST_ONHIT_DURATION_75_PERCENT_1_ROUND";
    if (value == 7) return "All.IP_CONST_ONHIT_FEAR";
    if (value == 12) return "All.IP_CONST_ONHIT_GREATERDISPEL";
    if (value == 2) return "All.IP_CONST_ONHIT_HOLD";
    if (value == 19) return "All.IP_CONST_ONHIT_ITEMPOISON";
    if (value == 8) return "All.IP_CONST_ONHIT_KNOCK";
    if (value == 10) return "All.IP_CONST_ONHIT_LESSERDISPEL";
    if (value == 17) return "All.IP_CONST_ONHIT_LEVELDRAIN";
    if (value == 13) return "All.IP_CONST_ONHIT_MORDSDISJUNCTION";
    if (value == 0) return "All.IP_CONST_ONHIT_SAVEDC_14";
    if (value == 1) return "All.IP_CONST_ONHIT_SAVEDC_16";
    if (value == 2) return "All.IP_CONST_ONHIT_SAVEDC_18";
    if (value == 3) return "All.IP_CONST_ONHIT_SAVEDC_20";
    if (value == 4) return "All.IP_CONST_ONHIT_SAVEDC_22";
    if (value == 5) return "All.IP_CONST_ONHIT_SAVEDC_24";
    if (value == 6) return "All.IP_CONST_ONHIT_SAVEDC_26";
    if (value == 14) return "All.IP_CONST_ONHIT_SILENCE";
    if (value == 23) return "All.IP_CONST_ONHIT_SLAYALIGNMENT";
    if (value == 22) return "All.IP_CONST_ONHIT_SLAYALIGNMENTGROUP";
    if (value == 21) return "All.IP_CONST_ONHIT_SLAYRACE";
    if (value == 0) return "All.IP_CONST_ONHIT_SLEEP";
    if (value == 9) return "All.IP_CONST_ONHIT_SLOW";
    if (value == 1) return "All.IP_CONST_ONHIT_STUN";
    if (value == 24) return "All.IP_CONST_ONHIT_VORPAL";
    if (value == 25) return "All.IP_CONST_ONHIT_WOUNDING";
    if (value == 0) return "All.IP_CONST_ONMONSTERHIT_ABILITYDRAIN";
    if (value == 1) return "All.IP_CONST_ONMONSTERHIT_CONFUSION";
    if (value == 2) return "All.IP_CONST_ONMONSTERHIT_DISEASE";
    if (value == 3) return "All.IP_CONST_ONMONSTERHIT_DOOM";
    if (value == 4) return "All.IP_CONST_ONMONSTERHIT_FEAR";
    if (value == 5) return "All.IP_CONST_ONMONSTERHIT_LEVELDRAIN";
    if (value == 6) return "All.IP_CONST_ONMONSTERHIT_POISON";
    if (value == 7) return "All.IP_CONST_ONMONSTERHIT_SLOW";
    if (value == 8) return "All.IP_CONST_ONMONSTERHIT_STUN";
    if (value == 9) return "All.IP_CONST_ONMONSTERHIT_WOUNDING";
    if (value == 5) return "All.IP_CONST_POISON_1D2_CHADAMAGE";
    if (value == 2) return "All.IP_CONST_POISON_1D2_CONDAMAGE";
    if (value == 1) return "All.IP_CONST_POISON_1D2_DEXDAMAGE";
    if (value == 3) return "All.IP_CONST_POISON_1D2_INTDAMAGE";
    if (value == 0) return "All.IP_CONST_POISON_1D2_STRDAMAGE";
    if (value == 4) return "All.IP_CONST_POISON_1D2_WISDAMAGE";
    if (value == 7) return "All.IP_CONST_QUALITY_ABOVE_AVERAGE";
    if (value == 6) return "All.IP_CONST_QUALITY_AVERAGE";
    if (value == 5) return "All.IP_CONST_QUALITY_BELOW_AVERAGE";
    if (value == 14) return "All.IP_CONST_QUALITY_CUT";
    if (value == 1) return "All.IP_CONST_QUALITY_DESTROYED";
    if (value == 10) return "All.IP_CONST_QUALITY_EXCELLENT";
    if (value == 12) return "All.IP_CONST_QUALITY_GOD_LIKE";
    if (value == 8) return "All.IP_CONST_QUALITY_GOOD";
    if (value == 11) return "All.IP_CONST_QUALITY_MASTERWORK";
    if (value == 15) return "All.IP_CONST_QUALITY_POLISHED";
    if (value == 4) return "All.IP_CONST_QUALITY_POOR";
    if (value == 13) return "All.IP_CONST_QUALITY_RAW";
    if (value == 2) return "All.IP_CONST_QUALITY_RUINED";
    if (value == 0) return "All.IP_CONST_QUALITY_UNKOWN";
    if (value == 9) return "All.IP_CONST_QUALITY_VERY_GOOD";
    if (value == 3) return "All.IP_CONST_QUALITY_VERY_POOR";
    if (value == 7) return "All.IP_CONST_RACIALTYPE_ABERRATION";
    if (value == 8) return "All.IP_CONST_RACIALTYPE_ANIMAL";
    if (value == 9) return "All.IP_CONST_RACIALTYPE_BEAST";
    if (value == 10) return "All.IP_CONST_RACIALTYPE_CONSTRUCT";
    if (value == 11) return "All.IP_CONST_RACIALTYPE_DRAGON";
    if (value == 0) return "All.IP_CONST_RACIALTYPE_DWARF";
    if (value == 16) return "All.IP_CONST_RACIALTYPE_ELEMENTAL";
    if (value == 1) return "All.IP_CONST_RACIALTYPE_ELF";
    if (value == 17) return "All.IP_CONST_RACIALTYPE_FEY";
    if (value == 18) return "All.IP_CONST_RACIALTYPE_GIANT";
    if (value == 2) return "All.IP_CONST_RACIALTYPE_GNOME";
    if (value == 4) return "All.IP_CONST_RACIALTYPE_HALFELF";
    if (value == 3) return "All.IP_CONST_RACIALTYPE_HALFLING";
    if (value == 5) return "All.IP_CONST_RACIALTYPE_HALFORC";
    if (value == 6) return "All.IP_CONST_RACIALTYPE_HUMAN";
    if (value == 12) return "All.IP_CONST_RACIALTYPE_HUMANOID_GOBLINOID";
    if (value == 13) return "All.IP_CONST_RACIALTYPE_HUMANOID_MONSTROUS";
    if (value == 14) return "All.IP_CONST_RACIALTYPE_HUMANOID_ORC";
    if (value == 15) return "All.IP_CONST_RACIALTYPE_HUMANOID_REPTILIAN";
    if (value == 19) return "All.IP_CONST_RACIALTYPE_MAGICAL_BEAST";
    if (value == 20) return "All.IP_CONST_RACIALTYPE_OUTSIDER";
    if (value == 23) return "All.IP_CONST_RACIALTYPE_SHAPECHANGER";
    if (value == 24) return "All.IP_CONST_RACIALTYPE_UNDEAD";
    if (value == 25) return "All.IP_CONST_RACIALTYPE_VERMIN";
    if (value == 5) return "All.IP_CONST_REDUCEDWEIGHT_10_PERCENT";
    if (value == 4) return "All.IP_CONST_REDUCEDWEIGHT_20_PERCENT";
    if (value == 3) return "All.IP_CONST_REDUCEDWEIGHT_40_PERCENT";
    if (value == 2) return "All.IP_CONST_REDUCEDWEIGHT_60_PERCENT";
    if (value == 1) return "All.IP_CONST_REDUCEDWEIGHT_80_PERCENT";
    if (value == 1) return "All.IP_CONST_SAVEBASETYPE_FORTITUDE";
    if (value == 3) return "All.IP_CONST_SAVEBASETYPE_REFLEX";
    if (value == 2) return "All.IP_CONST_SAVEBASETYPE_WILL";
    if (value == 1) return "All.IP_CONST_SAVEVS_ACID";
    if (value == 3) return "All.IP_CONST_SAVEVS_COLD";
    if (value == 4) return "All.IP_CONST_SAVEVS_DEATH";
    if (value == 5) return "All.IP_CONST_SAVEVS_DISEASE";
    if (value == 6) return "All.IP_CONST_SAVEVS_DIVINE";
    if (value == 7) return "All.IP_CONST_SAVEVS_ELECTRICAL";
    if (value == 8) return "All.IP_CONST_SAVEVS_FEAR";
    if (value == 9) return "All.IP_CONST_SAVEVS_FIRE";
    if (value == 11) return "All.IP_CONST_SAVEVS_MINDAFFECTING";
    if (value == 12) return "All.IP_CONST_SAVEVS_NEGATIVE";
    if (value == 13) return "All.IP_CONST_SAVEVS_POISON";
    if (value == 14) return "All.IP_CONST_SAVEVS_POSITIVE";
    if (value == 15) return "All.IP_CONST_SAVEVS_SONIC";
    if (value == 0) return "All.IP_CONST_SAVEVS_UNIVERSAL";
    if (value == 0) return "All.IP_CONST_SPELLLEVEL_0";
    if (value == 1) return "All.IP_CONST_SPELLLEVEL_1";
    if (value == 2) return "All.IP_CONST_SPELLLEVEL_2";
    if (value == 3) return "All.IP_CONST_SPELLLEVEL_3";
    if (value == 4) return "All.IP_CONST_SPELLLEVEL_4";
    if (value == 5) return "All.IP_CONST_SPELLLEVEL_5";
    if (value == 6) return "All.IP_CONST_SPELLLEVEL_6";
    if (value == 7) return "All.IP_CONST_SPELLLEVEL_7";
    if (value == 8) return "All.IP_CONST_SPELLLEVEL_8";
    if (value == 9) return "All.IP_CONST_SPELLLEVEL_9";
    if (value == 0) return "All.IP_CONST_SPELLRESISTANCEBONUS_10";
    if (value == 1) return "All.IP_CONST_SPELLRESISTANCEBONUS_12";
    if (value == 2) return "All.IP_CONST_SPELLRESISTANCEBONUS_14";
    if (value == 3) return "All.IP_CONST_SPELLRESISTANCEBONUS_16";
    if (value == 4) return "All.IP_CONST_SPELLRESISTANCEBONUS_18";
    if (value == 5) return "All.IP_CONST_SPELLRESISTANCEBONUS_20";
    if (value == 6) return "All.IP_CONST_SPELLRESISTANCEBONUS_22";
    if (value == 7) return "All.IP_CONST_SPELLRESISTANCEBONUS_24";
    if (value == 8) return "All.IP_CONST_SPELLRESISTANCEBONUS_26";
    if (value == 9) return "All.IP_CONST_SPELLRESISTANCEBONUS_28";
    if (value == 10) return "All.IP_CONST_SPELLRESISTANCEBONUS_30";
    if (value == 11) return "All.IP_CONST_SPELLRESISTANCEBONUS_32";
    if (value == 0) return "All.IP_CONST_SPELLSCHOOL_ABJURATION";
    if (value == 1) return "All.IP_CONST_SPELLSCHOOL_CONJURATION";
    if (value == 2) return "All.IP_CONST_SPELLSCHOOL_DIVINATION";
    if (value == 3) return "All.IP_CONST_SPELLSCHOOL_ENCHANTMENT";
    if (value == 4) return "All.IP_CONST_SPELLSCHOOL_EVOCATION";
    if (value == 5) return "All.IP_CONST_SPELLSCHOOL_ILLUSION";
    if (value == 6) return "All.IP_CONST_SPELLSCHOOL_NECROMANCY";
    if (value == 7) return "All.IP_CONST_SPELLSCHOOL_TRANSMUTATION";
    if (value == 1) return "All.IP_CONST_TRAPSTRENGTH_AVERAGE";
    if (value == 3) return "All.IP_CONST_TRAPSTRENGTH_DEADLY";
    if (value == 0) return "All.IP_CONST_TRAPSTRENGTH_MINOR";
    if (value == 2) return "All.IP_CONST_TRAPSTRENGTH_STRONG";
    if (value == 9) return "All.IP_CONST_TRAPTYPE_ACID_SPLASH";
    if (value == 4) return "All.IP_CONST_TRAPTYPE_BLOBOFACID";
    if (value == 6) return "All.IP_CONST_TRAPTYPE_ELECTRICAL";
    if (value == 5) return "All.IP_CONST_TRAPTYPE_FIRE";
    if (value == 8) return "All.IP_CONST_TRAPTYPE_FROST";
    if (value == 7) return "All.IP_CONST_TRAPTYPE_GAS";
    if (value == 2) return "All.IP_CONST_TRAPTYPE_HOLY";
    if (value == 11) return "All.IP_CONST_TRAPTYPE_NEGATIVE";
    if (value == 10) return "All.IP_CONST_TRAPTYPE_SONIC";
    if (value == 1) return "All.IP_CONST_TRAPTYPE_SPIKE";
    if (value == 3) return "All.IP_CONST_TRAPTYPE_TANGLE";
    if (value == 3) return "All.IP_CONST_UNLIMITEDAMMO_1D6COLD";
    if (value == 2) return "All.IP_CONST_UNLIMITEDAMMO_1D6FIRE";
    if (value == 4) return "All.IP_CONST_UNLIMITEDAMMO_1D6LIGHT";
    if (value == 1) return "All.IP_CONST_UNLIMITEDAMMO_BASIC";
    if (value == 11) return "All.IP_CONST_UNLIMITEDAMMO_PLUS1";
    if (value == 12) return "All.IP_CONST_UNLIMITEDAMMO_PLUS2";
    if (value == 13) return "All.IP_CONST_UNLIMITEDAMMO_PLUS3";
    if (value == 14) return "All.IP_CONST_UNLIMITEDAMMO_PLUS4";
    if (value == 15) return "All.IP_CONST_UNLIMITEDAMMO_PLUS5";
    if (value == 5) return "All.IP_CONST_WEIGHTINCREASE_100_LBS";
    if (value == 1) return "All.IP_CONST_WEIGHTINCREASE_10_LBS";
    if (value == 2) return "All.IP_CONST_WEIGHTINCREASE_15_LBS";
    if (value == 3) return "All.IP_CONST_WEIGHTINCREASE_30_LBS";
    if (value == 4) return "All.IP_CONST_WEIGHTINCREASE_50_LBS";
    if (value == 0) return "All.IP_CONST_WEIGHTINCREASE_5_LBS";
    if (value == 2) return "All.ITEM_APPR_ARMOR_COLOR_CLOTH1";
    if (value == 3) return "All.ITEM_APPR_ARMOR_COLOR_CLOTH2";
    if (value == 0) return "All.ITEM_APPR_ARMOR_COLOR_LEATHER1";
    if (value == 1) return "All.ITEM_APPR_ARMOR_COLOR_LEATHER2";
    if (value == 4) return "All.ITEM_APPR_ARMOR_COLOR_METAL1";
    if (value == 5) return "All.ITEM_APPR_ARMOR_COLOR_METAL2";
    if (value == 8) return "All.ITEM_APPR_ARMOR_MODEL_BELT";
    if (value == 13) return "All.ITEM_APPR_ARMOR_MODEL_LBICEP";
    if (value == 1) return "All.ITEM_APPR_ARMOR_MODEL_LFOOT";
    if (value == 11) return "All.ITEM_APPR_ARMOR_MODEL_LFOREARM";
    if (value == 17) return "All.ITEM_APPR_ARMOR_MODEL_LHAND";
    if (value == 3) return "All.ITEM_APPR_ARMOR_MODEL_LSHIN";
    if (value == 15) return "All.ITEM_APPR_ARMOR_MODEL_LSHOULDER";
    if (value == 4) return "All.ITEM_APPR_ARMOR_MODEL_LTHIGH";
    if (value == 9) return "All.ITEM_APPR_ARMOR_MODEL_NECK";
    if (value == 6) return "All.ITEM_APPR_ARMOR_MODEL_PELVIS";
    if (value == 12) return "All.ITEM_APPR_ARMOR_MODEL_RBICEP";
    if (value == 0) return "All.ITEM_APPR_ARMOR_MODEL_RFOOT";
    if (value == 10) return "All.ITEM_APPR_ARMOR_MODEL_RFOREARM";
    if (value == 16) return "All.ITEM_APPR_ARMOR_MODEL_RHAND";
    if (value == 18) return "All.ITEM_APPR_ARMOR_MODEL_ROBE";
    if (value == 2) return "All.ITEM_APPR_ARMOR_MODEL_RSHIN";
    if (value == 14) return "All.ITEM_APPR_ARMOR_MODEL_RSHOULDER";
    if (value == 5) return "All.ITEM_APPR_ARMOR_MODEL_RTHIGH";
    if (value == 7) return "All.ITEM_APPR_ARMOR_MODEL_TORSO";
    if (value == 6) return "All.ITEM_APPR_ARMOR_NUM_COLORS";
    if (value == 19) return "All.ITEM_APPR_ARMOR_NUM_MODELS";
    if (value == 5) return "All.ITEM_APPR_NUM_TYPES";
    if (value == 4) return "All.ITEM_APPR_TYPE_ARMOR_COLOR";
    if (value == 3) return "All.ITEM_APPR_TYPE_ARMOR_MODEL";
    if (value == 0) return "All.ITEM_APPR_TYPE_SIMPLE_MODEL";
    if (value == 1) return "All.ITEM_APPR_TYPE_WEAPON_COLOR";
    if (value == 2) return "All.ITEM_APPR_TYPE_WEAPON_MODEL";
    if (value == 0) return "All.ITEM_APPR_WEAPON_COLOR_BOTTOM";
    if (value == 1) return "All.ITEM_APPR_WEAPON_COLOR_MIDDLE";
    if (value == 2) return "All.ITEM_APPR_WEAPON_COLOR_TOP";
    if (value == 0) return "All.ITEM_APPR_WEAPON_MODEL_BOTTOM";
    if (value == 1) return "All.ITEM_APPR_WEAPON_MODEL_MIDDLE";
    if (value == 2) return "All.ITEM_APPR_WEAPON_MODEL_TOP";
    if (value == 0 ) return "All.ITEM_PROPERTY_ABILITY_BONUS";
    if (value == 1 ) return "All.ITEM_PROPERTY_AC_BONUS";
    if (value == 2 ) return "All.ITEM_PROPERTY_AC_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 3 ) return "All.ITEM_PROPERTY_AC_BONUS_VS_DAMAGE_TYPE";
    if (value == 4 ) return "All.ITEM_PROPERTY_AC_BONUS_VS_RACIAL_GROUP";
    if (value == 5 ) return "All.ITEM_PROPERTY_AC_BONUS_VS_SPECIFIC_ALIGNMENT";
    if (value == 87) return "All.ITEM_PROPERTY_ADDITIONAL";
    if (value == 84) return "All.ITEM_PROPERTY_ARCANE_SPELL_FAILURE";
    if (value == 56 ) return "All.ITEM_PROPERTY_ATTACK_BONUS";
    if (value == 57 ) return "All.ITEM_PROPERTY_ATTACK_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 58 ) return "All.ITEM_PROPERTY_ATTACK_BONUS_VS_RACIAL_GROUP";
    if (value == 59 ) return "All.ITEM_PROPERTY_ATTACK_BONUS_VS_SPECIFIC_ALIGNMENT";
    if (value == 11 ) return "All.ITEM_PROPERTY_BASE_ITEM_WEIGHT_REDUCTION";
    if (value == 12 ) return "All.ITEM_PROPERTY_BONUS_FEAT";
    if (value == 13 ) return "All.ITEM_PROPERTY_BONUS_SPELL_SLOT_OF_LEVEL_N";
    if (value == 15 ) return "All.ITEM_PROPERTY_CAST_SPELL";
    if (value == 16 ) return "All.ITEM_PROPERTY_DAMAGE_BONUS";
    if (value == 17 ) return "All.ITEM_PROPERTY_DAMAGE_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 18 ) return "All.ITEM_PROPERTY_DAMAGE_BONUS_VS_RACIAL_GROUP";
    if (value == 19 ) return "All.ITEM_PROPERTY_DAMAGE_BONUS_VS_SPECIFIC_ALIGNMENT";
    if (value == 22 ) return "All.ITEM_PROPERTY_DAMAGE_REDUCTION";
    if (value == 23 ) return "All.ITEM_PROPERTY_DAMAGE_RESISTANCE";
    if (value == 24 ) return "All.ITEM_PROPERTY_DAMAGE_VULNERABILITY";
    if (value == 26 ) return "All.ITEM_PROPERTY_DARKVISION";
    if (value == 27 ) return "All.ITEM_PROPERTY_DECREASED_ABILITY_SCORE";
    if (value == 28 ) return "All.ITEM_PROPERTY_DECREASED_AC";
    if (value == 60 ) return "All.ITEM_PROPERTY_DECREASED_ATTACK_MODIFIER";
    if (value == 21 ) return "All.ITEM_PROPERTY_DECREASED_DAMAGE";
    if (value == 10 ) return "All.ITEM_PROPERTY_DECREASED_ENHANCEMENT_MODIFIER";
    if (value == 49 ) return "All.ITEM_PROPERTY_DECREASED_SAVING_THROWS";
    if (value == 50 ) return "All.ITEM_PROPERTY_DECREASED_SAVING_THROWS_SPECIFIC";
    if (value == 29 ) return "All.ITEM_PROPERTY_DECREASED_SKILL_MODIFIER";
    if (value == 32 ) return "All.ITEM_PROPERTY_ENHANCED_CONTAINER_REDUCED_WEIGHT";
    if (value == 6 ) return "All.ITEM_PROPERTY_ENHANCEMENT_BONUS";
    if (value == 7 ) return "All.ITEM_PROPERTY_ENHANCEMENT_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 8 ) return "All.ITEM_PROPERTY_ENHANCEMENT_BONUS_VS_RACIAL_GROUP";
    if (value == 9 ) return "All.ITEM_PROPERTY_ENHANCEMENT_BONUS_VS_SPECIFIC_ALIGNEMENT";
    if (value == 33 ) return "All.ITEM_PROPERTY_EXTRA_MELEE_DAMAGE_TYPE";
    if (value == 34 ) return "All.ITEM_PROPERTY_EXTRA_RANGED_DAMAGE_TYPE";
    if (value == 75 ) return "All.ITEM_PROPERTY_FREEDOM_OF_MOVEMENT";
    if (value == 35 ) return "All.ITEM_PROPERTY_HASTE";
    if (value == 80) return "All.ITEM_PROPERTY_HEALERS_KIT";
    if (value == 36 ) return "All.ITEM_PROPERTY_HOLY_AVENGER";
    if (value == 20 ) return "All.ITEM_PROPERTY_IMMUNITY_DAMAGE_TYPE";
    if (value == 37 ) return "All.ITEM_PROPERTY_IMMUNITY_MISCELLANEOUS";
    if (value == 53 ) return "All.ITEM_PROPERTY_IMMUNITY_SPECIFIC_SPELL";
    if (value == 78 ) return "All.ITEM_PROPERTY_IMMUNITY_SPELLS_BY_LEVEL";
    if (value == 54 ) return "All.ITEM_PROPERTY_IMMUNITY_SPELL_SCHOOL";
    if (value == 38 ) return "All.ITEM_PROPERTY_IMPROVED_EVASION";
    if (value == 43 ) return "All.ITEM_PROPERTY_KEEN";
    if (value == 44 ) return "All.ITEM_PROPERTY_LIGHT";
    if (value == 74 ) return "All.ITEM_PROPERTY_MASSIVE_CRITICALS";
    if (value == 85) return "All.ITEM_PROPERTY_MATERIAL";
    if (value == 45 ) return "All.ITEM_PROPERTY_MIGHTY";
    if (value == 46 ) return "All.ITEM_PROPERTY_MIND_BLANK";
    if (value == 77 ) return "All.ITEM_PROPERTY_MONSTER_DAMAGE";
    if (value == 47 ) return "All.ITEM_PROPERTY_NO_DAMAGE";
    if (value == 82) return "All.ITEM_PROPERTY_ONHITCASTSPELL";
    if (value == 48 ) return "All.ITEM_PROPERTY_ON_HIT_PROPERTIES";
    if (value == 72 ) return "All.ITEM_PROPERTY_ON_MONSTER_HIT";
    if (value == 76 ) return "All.ITEM_PROPERTY_POISON";
    if (value == 86) return "All.ITEM_PROPERTY_QUALITY";
    if (value == 51 ) return "All.ITEM_PROPERTY_REGENERATION";
    if (value == 67 ) return "All.ITEM_PROPERTY_REGENERATION_VAMPIRIC";
    if (value == 40 ) return "All.ITEM_PROPERTY_SAVING_THROW_BONUS";
    if (value == 41 ) return "All.ITEM_PROPERTY_SAVING_THROW_BONUS_SPECIFIC";
    if (value == 52 ) return "All.ITEM_PROPERTY_SKILL_BONUS";
    if (value == 79) return "All.ITEM_PROPERTY_SPECIAL_WALK";
    if (value == 39 ) return "All.ITEM_PROPERTY_SPELL_RESISTANCE";
    if (value == 55 ) return "All.ITEM_PROPERTY_THIEVES_TOOLS";
    if (value == 70 ) return "All.ITEM_PROPERTY_TRAP";
    if (value == 71 ) return "All.ITEM_PROPERTY_TRUE_SEEING";
    if (value == 73 ) return "All.ITEM_PROPERTY_TURN_RESISTANCE";
    if (value == 61 ) return "All.ITEM_PROPERTY_UNLIMITED_AMMUNITION";
    if (value == 62 ) return "All.ITEM_PROPERTY_USE_LIMITATION_ALIGNMENT_GROUP";
    if (value == 63 ) return "All.ITEM_PROPERTY_USE_LIMITATION_CLASS";
    if (value == 64 ) return "All.ITEM_PROPERTY_USE_LIMITATION_RACIAL_TYPE";
    if (value == 65 ) return "All.ITEM_PROPERTY_USE_LIMITATION_SPECIFIC_ALIGNMENT";
    if (value == 66 ) return "All.ITEM_PROPERTY_USE_LIMITATION_TILESET";
    if (value == 83) return "All.ITEM_PROPERTY_VISUALEFFECT";
    if (value == 81) return "All.ITEM_PROPERTY_WEIGHT_INCREASE";
    if (value == 0) return "All.ITEM_VISUAL_ACID";
    if (value == 1) return "All.ITEM_VISUAL_COLD";
    if (value == 2) return "All.ITEM_VISUAL_ELECTRICAL";
    if (value == 6) return "All.ITEM_VISUAL_EVIL";
    if (value == 3) return "All.ITEM_VISUAL_FIRE";
    if (value == 5) return "All.ITEM_VISUAL_HOLY";
    if (value == 4) return "All.ITEM_VISUAL_SONIC";
    if (value == 255) return "All.METAMAGIC_ANY";
    if (value == 1) return "All.METAMAGIC_EMPOWER";
    if (value == 2) return "All.METAMAGIC_EXTEND";
    if (value == 4) return "All.METAMAGIC_MAXIMIZE";
    if (value == 0) return "All.METAMAGIC_NONE";
    if (value == 8) return "All.METAMAGIC_QUICKEN";
    if (value == 16) return "All.METAMAGIC_SILENT";
    if (value == 32) return "All.METAMAGIC_STILL";
    if (value == 0) return "All.MISS_CHANCE_TYPE_NORMAL";
    if (value == 2) return "All.MISS_CHANCE_TYPE_VS_MELEE";
    if (value == 1) return "All.MISS_CHANCE_TYPE_VS_RANGED";
    if (value == 0) return "All.NAME_ANIMAL";
    if (value == 1) return "All.NAME_FAMILIAR";
    if (value == 3) return "All.NAME_FIRST_DWARF_FEMALE";
    if (value == 2) return "All.NAME_FIRST_DWARF_MALE";
    if (value == 6) return "All.NAME_FIRST_ELF_FEMALE";
    if (value == 5) return "All.NAME_FIRST_ELF_MALE";
    if (value == -1) return "All.NAME_FIRST_GENERIC_MALE";
    if (value == 9) return "All.NAME_FIRST_GNOME_FEMALE";
    if (value == 8) return "All.NAME_FIRST_GNOME_MALE";
    if (value == 12) return "All.NAME_FIRST_HALFELF_FEMALE";
    if (value == 11) return "All.NAME_FIRST_HALFELF_MALE";
    if (value == 15) return "All.NAME_FIRST_HALFLING_FEMALE";
    if (value == 14) return "All.NAME_FIRST_HALFLING_MALE";
    if (value == 18) return "All.NAME_FIRST_HALFORC_FEMALE";
    if (value == 17) return "All.NAME_FIRST_HALFORC_MALE";
    if (value == 21) return "All.NAME_FIRST_HUMAN_FEMALE";
    if (value == 20) return "All.NAME_FIRST_HUMAN_MALE";
    if (value == 4) return "All.NAME_LAST_DWARF";
    if (value == 7) return "All.NAME_LAST_ELF";
    if (value == 10) return "All.NAME_LAST_GNOME";
    if (value == 13) return "All.NAME_LAST_HALFELF";
    if (value == 16) return "All.NAME_LAST_HALFLING";
    if (value == 19) return "All.NAME_LAST_HALFORC";
    if (value == 22) return "All.NAME_LAST_HUMAN";
    if (value == 18) return "All.NUM_INVENTORY_SLOTS";
    if (value == 32767) return "All.OBJECT_TYPE_ALL";
    if (value == 16) return "All.OBJECT_TYPE_AREA_OF_EFFECT";
    if (value == 1) return "All.OBJECT_TYPE_CREATURE";
    if (value == 8) return "All.OBJECT_TYPE_DOOR";
    if (value == 256) return "All.OBJECT_TYPE_ENCOUNTER";
    if (value == 32767) return "All.OBJECT_TYPE_INVALID";
    if (value == 2) return "All.OBJECT_TYPE_ITEM";
    if (value == 64) return "All.OBJECT_TYPE_PLACEABLE";
    if (value == 128) return "All.OBJECT_TYPE_STORE";
    if (value == 4) return "All.OBJECT_TYPE_TRIGGER";
    if (value == 32) return "All.OBJECT_TYPE_WAYPOINT";
    if (value == 73) return "All.PACKAGE_ABERRATION";
    if (value == 74) return "All.PACKAGE_ANIMAL";
    if (value == 65) return "All.PACKAGE_ARCANE_ARCHER";
    if (value == 66) return "All.PACKAGE_ASSASSIN";
    if (value == 0) return "All.PACKAGE_BARBARIAN";
    if (value == 90) return "All.PACKAGE_BARBARIAN_BLACKGUARD";
    if (value == 118) return "All.PACKAGE_BARBARIAN_BLACKGUARD_2NDCLASS";
    if (value == 15) return "All.PACKAGE_BARBARIAN_BRUTE";
    if (value == 18) return "All.PACKAGE_BARBARIAN_ORCBLOOD";
    if (value == 17) return "All.PACKAGE_BARBARIAN_SAVAGE";
    if (value == 16) return "All.PACKAGE_BARBARIAN_SLAYER";
    if (value == 1) return "All.PACKAGE_BARD";
    if (value == 43) return "All.PACKAGE_BARD_BLADE";
    if (value == 44) return "All.PACKAGE_BARD_GALLANT";
    if (value == 91) return "All.PACKAGE_BARD_HARPER";
    if (value == 119) return "All.PACKAGE_BARD_HARPER_2NDCLASS";
    if (value == 45) return "All.PACKAGE_BARD_JESTER";
    if (value == 46) return "All.PACKAGE_BARD_LOREMASTER";
    if (value == 83) return "All.PACKAGE_BEAST";
    if (value == 67) return "All.PACKAGE_BLACKGUARD";
    if (value == 2) return "All.PACKAGE_CLERIC";
    if (value == 22) return "All.PACKAGE_CLERIC_BATTLE_PRIEST";
    if (value == 20) return "All.PACKAGE_CLERIC_DEADWALKER";
    if (value == 92) return "All.PACKAGE_CLERIC_DIVINE";
    if (value == 120) return "All.PACKAGE_CLERIC_DIVINE_2NDCLASS";
    if (value == 21) return "All.PACKAGE_CLERIC_ELEMENTALIST";
    if (value == 19) return "All.PACKAGE_CLERIC_SHAMAN";
    if (value == 82) return "All.PACKAGE_COMMONER";
    if (value == 75) return "All.PACKAGE_CONSTRUCT";
    if (value == 109) return "All.PACKAGE_DIVINE_CHAMPION";
    if (value == 80) return "All.PACKAGE_DRAGON";
    if (value == 111) return "All.PACKAGE_DRAGON_DISCIPLE";
    if (value == 3) return "All.PACKAGE_DRUID";
    if (value == 13) return "All.PACKAGE_DRUID_DEATH";
    if (value == 12) return "All.PACKAGE_DRUID_GRAY";
    if (value == 14) return "All.PACKAGE_DRUID_HAWKMASTER";
    if (value == 11) return "All.PACKAGE_DRUID_INTERLOPER";
    if (value == 93) return "All.PACKAGE_DRUID_SHIFTER";
    if (value == 121) return "All.PACKAGE_DRUID_SHIFTER_2NDCLASS";
    if (value == 89) return "All.PACKAGE_DWARVEN_DEFENDER";
    if (value == 78) return "All.PACKAGE_ELEMENTAL";
    if (value == 79) return "All.PACKAGE_FEY";
    if (value == 4) return "All.PACKAGE_FIGHTER";
    if (value == 26) return "All.PACKAGE_FIGHTER_COMMANDER";
    if (value == 23) return "All.PACKAGE_FIGHTER_FINESSE";
    if (value == 25) return "All.PACKAGE_FIGHTER_GLADIATOR";
    if (value == 24) return "All.PACKAGE_FIGHTER_PIRATE";
    if (value == 94) return "All.PACKAGE_FIGHTER_WEAPONMASTER";
    if (value == 122) return "All.PACKAGE_FIGHTER_WEAPONMASTER_2NDCLASS";
    if (value == 84) return "All.PACKAGE_GIANT";
    if (value == 64) return "All.PACKAGE_HARPER";
    if (value == 76) return "All.PACKAGE_HUMANOID";
    if (value == 255) return "All.PACKAGE_INVALID";
    if (value == 85) return "All.PACKAGE_MAGICBEAST";
    if (value == 5) return "All.PACKAGE_MONK";
    if (value == 95) return "All.PACKAGE_MONK_ASSASSIN";
    if (value == 123) return "All.PACKAGE_MONK_ASSASSIN_2NDCLASS";
    if (value == 49) return "All.PACKAGE_MONK_DEVOUT";
    if (value == 48) return "All.PACKAGE_MONK_GIFTED";
    if (value == 50) return "All.PACKAGE_MONK_PEASANT";
    if (value == 47) return "All.PACKAGE_MONK_SPIRIT";
    if (value == 77) return "All.PACKAGE_MONSTROUS";
    if (value == 130) return "All.PACKAGE_NPC_ARIBETH_BLACKGUARD";
    if (value == 129) return "All.PACKAGE_NPC_ARIBETH_PALADIN";
    if (value == 105) return "All.PACKAGE_NPC_BARBARIAN_DAELAN";
    if (value == 72) return "All.PACKAGE_NPC_BARD";
    if (value == 117) return "All.PACKAGE_NPC_BARD_DEEKIN_2";
    if (value == 106) return "All.PACKAGE_NPC_BARD_FIGHTER";
    if (value == 114) return "All.PACKAGE_NPC_BARD_FIGHTER_SHARWYN2";
    if (value == 104) return "All.PACKAGE_NPC_CLERIC_LINU";
    if (value == 102) return "All.PACKAGE_NPC_FT_WEAPONMASTER";
    if (value == 113) return "All.PACKAGE_NPC_FT_WEAPONMASTER_VALEN_2";
    if (value == 107) return "All.PACKAGE_NPC_PALADIN_FALLING";
    if (value == 103) return "All.PACKAGE_NPC_RG_SHADOWDANCER";
    if (value == 116) return "All.PACKAGE_NPC_RG_TOMI_2";
    if (value == 71) return "All.PACKAGE_NPC_ROGUE";
    if (value == 70) return "All.PACKAGE_NPC_SORCERER";
    if (value == 101) return "All.PACKAGE_NPC_WIZASSASSIN";
    if (value == 115) return "All.PACKAGE_NPC_WIZASSASSIN_NATHYRRA";
    if (value == 86) return "All.PACKAGE_OUTSIDER";
    if (value == 6) return "All.PACKAGE_PALADIN";
    if (value == 54) return "All.PACKAGE_PALADIN_CHAMPION";
    if (value == 96) return "All.PACKAGE_PALADIN_DIVINE";
    if (value == 124) return "All.PACKAGE_PALADIN_DIVINE_2NDCLASS";
    if (value == 51) return "All.PACKAGE_PALADIN_ERRANT";
    if (value == 53) return "All.PACKAGE_PALADIN_INQUISITOR";
    if (value == 52) return "All.PACKAGE_PALADIN_UNDEAD";
    if (value == 110) return "All.PACKAGE_PALE_MASTER";
    if (value == 7) return "All.PACKAGE_RANGER";
    if (value == 97) return "All.PACKAGE_RANGER_ARCANEARCHER";
    if (value == 125) return "All.PACKAGE_RANGER_ARCANEARCHER_2NDCLASS";
    if (value == 58) return "All.PACKAGE_RANGER_GIANTKILLER";
    if (value == 55) return "All.PACKAGE_RANGER_MARKSMAN";
    if (value == 57) return "All.PACKAGE_RANGER_STALKER";
    if (value == 56) return "All.PACKAGE_RANGER_WARDEN";
    if (value == 8) return "All.PACKAGE_ROGUE";
    if (value == 60) return "All.PACKAGE_ROGUE_BANDIT";
    if (value == 59) return "All.PACKAGE_ROGUE_GYPSY";
    if (value == 61) return "All.PACKAGE_ROGUE_SCOUT";
    if (value == 98) return "All.PACKAGE_ROGUE_SHADOWDANCER";
    if (value == 126) return "All.PACKAGE_ROGUE_SHADOWDANCER_2NDCLASS";
    if (value == 62) return "All.PACKAGE_ROGUE_SWASHBUCKLER";
    if (value == 63) return "All.PACKAGE_SHADOWDANCER";
    if (value == 87) return "All.PACKAGE_SHAPECHANGER";
    if (value == 108) return "All.PACKAGE_SHIFTER";
    if (value == 9) return "All.PACKAGE_SORCERER";
    if (value == 35) return "All.PACKAGE_SORCERER_ABJURATION";
    if (value == 36) return "All.PACKAGE_SORCERER_CONJURATION";
    if (value == 37) return "All.PACKAGE_SORCERER_DIVINATION";
    if (value == 99) return "All.PACKAGE_SORCERER_DRAGONDISCIPLE";
    if (value == 127) return "All.PACKAGE_SORCERER_DRAGONDISCIPLE_2NDCLASS";
    if (value == 38) return "All.PACKAGE_SORCERER_ENCHANTMENT";
    if (value == 39) return "All.PACKAGE_SORCERER_EVOCATION";
    if (value == 40) return "All.PACKAGE_SORCERER_ILLUSION";
    if (value == 41) return "All.PACKAGE_SORCERER_NECROMANCY";
    if (value == 42) return "All.PACKAGE_SORCERER_TRANSMUTATION";
    if (value == 81) return "All.PACKAGE_UNDEAD";
    if (value == 88) return "All.PACKAGE_VERMIN";
    if (value == 112) return "All.PACKAGE_WEAPONMASTER";
    if (value == 10) return "All.PACKAGE_WIZARDGENERALIST";
    if (value == 27) return "All.PACKAGE_WIZARD_ABJURATION";
    if (value == 28) return "All.PACKAGE_WIZARD_CONJURATION";
    if (value == 29) return "All.PACKAGE_WIZARD_DIVINATION";
    if (value == 30) return "All.PACKAGE_WIZARD_ENCHANTMENT";
    if (value == 31) return "All.PACKAGE_WIZARD_EVOCATION";
    if (value == 32) return "All.PACKAGE_WIZARD_ILLUSION";
    if (value == 33) return "All.PACKAGE_WIZARD_NECROMANCY";
    if (value == 100) return "All.PACKAGE_WIZARD_PALEMASTER";
    if (value == 128) return "All.PACKAGE_WIZARD_PALEMASTER_2NDCLASS";
    if (value == 34) return "All.PACKAGE_WIZARD_TRANSMUTATION";
    if (value == 3) return "All.PANEL_BUTTON_CHARACTER";
    if (value == 1) return "All.PANEL_BUTTON_INVENTORY";
    if (value == 2) return "All.PANEL_BUTTON_JOURNAL";
    if (value == 0) return "All.PANEL_BUTTON_MAP";
    if (value == 4) return "All.PANEL_BUTTON_OPTIONS";
    if (value == 7) return "All.PANEL_BUTTON_PLAYER_VERSUS_PLAYER";
    if (value == 6) return "All.PANEL_BUTTON_REST";
    if (value == 5) return "All.PANEL_BUTTON_SPELLS";
    if (value == 5) return "All.PERCEPTION_HEARD";
    if (value == 2) return "All.PERCEPTION_HEARD_AND_NOT_SEEN";
    if (value == 4) return "All.PERCEPTION_NOT_HEARD";
    if (value == 6) return "All.PERCEPTION_NOT_SEEN";
    if (value == 1) return "All.PERCEPTION_NOT_SEEN_AND_NOT_HEARD";
    if (value == 7) return "All.PERCEPTION_SEEN";
    if (value == 0) return "All.PERCEPTION_SEEN_AND_HEARD";
    if (value == 3) return "All.PERCEPTION_SEEN_AND_NOT_HEARD";
    if (value == 0) return "All.PERSISTENT_ZONE_ACTIVE";
    if (value == 1) return "All.PERSISTENT_ZONE_FOLLOW";
    if (value == 2) return "All.PHENOTYPE_BIG";
    if (value == 3) return "All.PHENOTYPE_CUSTOM1";
    if (value == 12) return "All.PHENOTYPE_CUSTOM10";
    if (value == 13) return "All.PHENOTYPE_CUSTOM11";
    if (value == 14) return "All.PHENOTYPE_CUSTOM12";
    if (value == 15) return "All.PHENOTYPE_CUSTOM13";
    if (value == 16) return "All.PHENOTYPE_CUSTOM14";
    if (value == 17) return "All.PHENOTYPE_CUSTOM15";
    if (value == 18) return "All.PHENOTYPE_CUSTOM16";
    if (value == 19) return "All.PHENOTYPE_CUSTOM17";
    if (value == 20) return "All.PHENOTYPE_CUSTOM18";
    if (value == 4) return "All.PHENOTYPE_CUSTOM2";
    if (value == 5) return "All.PHENOTYPE_CUSTOM3";
    if (value == 6) return "All.PHENOTYPE_CUSTOM4";
    if (value == 7) return "All.PHENOTYPE_CUSTOM5";
    if (value == 8) return "All.PHENOTYPE_CUSTOM6";
    if (value == 9) return "All.PHENOTYPE_CUSTOM7";
    if (value == 10) return "All.PHENOTYPE_CUSTOM8";
    if (value == 11) return "All.PHENOTYPE_CUSTOM9";
    if (value == 0) return "All.PHENOTYPE_NORMAL";
    if (value == 2) return "All.PLACEABLE_ACTION_BASH";
    if (value == 4) return "All.PLACEABLE_ACTION_KNOCK";
    if (value == 1) return "All.PLACEABLE_ACTION_UNLOCK";
    if (value == 0) return "All.PLACEABLE_ACTION_USE";
    if (value == 33) return "All.POISON_ARANEA_VENOM";
    if (value == 23) return "All.POISON_ARSENIC";
    if (value == 29) return "All.POISON_BEBILITH_VENOM";
    if (value == 11) return "All.POISON_BLACK_ADDER_VENOM";
    if (value == 19) return "All.POISON_BLACK_LOTUS_EXTRACT";
    if (value == 2) return "All.POISON_BLADE_BANE";
    if (value == 4) return "All.POISON_BLOODROOT";
    if (value == 8) return "All.POISON_BLUE_WHINNIS";
    if (value == 27) return "All.POISON_BURNT_OTHUR_FUMES";
    if (value == 18) return "All.POISON_CARRION_CRAWLER_BRAIN_JUICE";
    if (value == 28) return "All.POISON_CHAOS_MIST";
    if (value == 40) return "All.POISON_COLOSSAL_SPIDER_VENOM";
    if (value == 25) return "All.POISON_DARK_REAVER_POWDER";
    if (value == 12) return "All.POISON_DEATHBLADE";
    if (value == 15) return "All.POISON_DRAGON_BILE";
    if (value == 32) return "All.POISON_ETTERCAP_VENOM";
    if (value == 39) return "All.POISON_GARGANTUAN_SPIDER_VENOM";
    if (value == 9) return "All.POISON_GIANT_WASP_POISON";
    if (value == 3) return "All.POISON_GREENBLOOD_OIL";
    if (value == 38) return "All.POISON_HUGE_SPIDER_VENOM";
    if (value == 21) return "All.POISON_ID_MOSS";
    if (value == 43) return "All.POISON_IRON_GOLEM";
    if (value == 6) return "All.POISON_LARGE_SCORPION_VENOM";
    if (value == 37) return "All.POISON_LARGE_SPIDER_VENOM";
    if (value == 24) return "All.POISON_LICH_DUST";
    if (value == 13) return "All.POISON_MALYSS_ROOT_PASTE";
    if (value == 36) return "All.POISON_MEDIUM_SPIDER_VENOM";
    if (value == 0) return "All.POISON_NIGHTSHADE";
    if (value == 14) return "All.POISON_NITHARIT";
    if (value == 20) return "All.POISON_OIL_OF_TAGGIT";
    if (value == 41) return "All.POISON_PHASE_SPIDER_VENOM";
    if (value == 31) return "All.POISON_PIT_FIEND_ICHOR";
    if (value == 5) return "All.POISON_PURPLE_WORM_POISON";
    if (value == 30) return "All.POISON_QUASIT_VENOM";
    if (value == 16) return "All.POISON_SASSONE_LEAF_RESIDUE";
    if (value == 10) return "All.POISON_SHADOW_ESSENCE";
    if (value == 1) return "All.POISON_SMALL_CENTIPEDE_POISON";
    if (value == 35) return "All.POISON_SMALL_SPIDER_VENOM";
    if (value == 22) return "All.POISON_STRIPED_TOADSTOOL";
    if (value == 17) return "All.POISON_TERINAV_ROOT";
    if (value == 34) return "All.POISON_TINY_SPIDER_VENOM";
    if (value == 26) return "All.POISON_UNGOL_DUST";
    if (value == 42) return "All.POISON_WRAITH_SPIDER_VENOM";
    if (value == 7) return "All.POISON_WYVERN_POISON";
    if (value == 71) return "All.POLYMORPH_TYPE_ANCIENT_BLUE_DRAGON";
    if (value == 73) return "All.POLYMORPH_TYPE_ANCIENT_GREEN_DRAGON";
    if (value == 72) return "All.POLYMORPH_TYPE_ANCIENT_RED_DRAGON";
    if (value == 25) return "All.POLYMORPH_TYPE_BADGER";
    if (value == 10) return "All.POLYMORPH_TYPE_BALOR";
    if (value == 61) return "All.POLYMORPH_TYPE_BASILISK";
    if (value == 63) return "All.POLYMORPH_TYPE_BEHOLDER";
    if (value == 24) return "All.POLYMORPH_TYPE_BOAR";
    if (value == 21) return "All.POLYMORPH_TYPE_BROWN_BEAR";
    if (value == 38) return "All.POLYMORPH_TYPE_CELESTIAL_AVENGER";
    if (value == 40) return "All.POLYMORPH_TYPE_CHICKEN";
    if (value == 27) return "All.POLYMORPH_TYPE_COW";
    if (value == 11) return "All.POLYMORPH_TYPE_DEATH_SLAAD";
    if (value == 69) return "All.POLYMORPH_TYPE_DIRETIGER";
    if (value == 37) return "All.POLYMORPH_TYPE_DIRE_BADGER";
    if (value == 36) return "All.POLYMORPH_TYPE_DIRE_BOAR";
    if (value == 33) return "All.POLYMORPH_TYPE_DIRE_BROWN_BEAR";
    if (value == 34) return "All.POLYMORPH_TYPE_DIRE_PANTHER";
    if (value == 35) return "All.POLYMORPH_TYPE_DIRE_WOLF";
    if (value == 28) return "All.POLYMORPH_TYPE_DOOM_KNIGHT";
    if (value == 62) return "All.POLYMORPH_TYPE_DRIDER";
    if (value == 20) return "All.POLYMORPH_TYPE_ELDER_AIR_ELEMENTAL";
    if (value == 19) return "All.POLYMORPH_TYPE_ELDER_EARTH_ELEMENTAL";
    if (value == 17) return "All.POLYMORPH_TYPE_ELDER_FIRE_ELEMENTAL";
    if (value == 18) return "All.POLYMORPH_TYPE_ELDER_WATER_ELEMENTAL";
    if (value == 70) return "All.POLYMORPH_TYPE_FEMALE_DROW";
    if (value == 9) return "All.POLYMORPH_TYPE_FIRE_GIANT";
    if (value == 42) return "All.POLYMORPH_TYPE_FROST_GIANT_FEMALE";
    if (value == 41) return "All.POLYMORPH_TYPE_FROST_GIANT_MALE";
    if (value == 65) return "All.POLYMORPH_TYPE_GARGOYLE";
    if (value == 3) return "All.POLYMORPH_TYPE_GIANT_SPIDER";
    if (value == 57) return "All.POLYMORPH_TYPE_GOLEM_AUTOMATON";
    if (value == 60) return "All.POLYMORPH_TYPE_HARPY";
    if (value == 43) return "All.POLYMORPH_TYPE_HEURODIS";
    if (value == 16) return "All.POLYMORPH_TYPE_HUGE_AIR_ELEMENTAL";
    if (value == 15) return "All.POLYMORPH_TYPE_HUGE_EARTH_ELEMENTAL";
    if (value == 13) return "All.POLYMORPH_TYPE_HUGE_FIRE_ELEMENTAL";
    if (value == 14) return "All.POLYMORPH_TYPE_HUGE_WATER_ELEMENTAL";
    if (value == 30) return "All.POLYMORPH_TYPE_IMP";
    if (value == 12) return "All.POLYMORPH_TYPE_IRON_GOLEM";
    if (value == 45) return "All.POLYMORPH_TYPE_JNAH_GIANT_FEMAL";
    if (value == 44) return "All.POLYMORPH_TYPE_JNAH_GIANT_MALE";
    if (value == 59) return "All.POLYMORPH_TYPE_MALE_DROW";
    if (value == 58) return "All.POLYMORPH_TYPE_MANTICORE";
    if (value == 64) return "All.POLYMORPH_TYPE_MEDUSA";
    if (value == 68) return "All.POLYMORPH_TYPE_MINDFLAYER";
    if (value == 66) return "All.POLYMORPH_TYPE_MINOTAUR";
    if (value == 78) return "All.POLYMORPH_TYPE_NULL_HUMAN";
    if (value == 22) return "All.POLYMORPH_TYPE_PANTHER";
    if (value == 26) return "All.POLYMORPH_TYPE_PENGUIN";
    if (value == 6) return "All.POLYMORPH_TYPE_PIXIE";
    if (value == 31) return "All.POLYMORPH_TYPE_QUASIT";
    if (value == 8) return "All.POLYMORPH_TYPE_RED_DRAGON";
    if (value == 75) return "All.POLYMORPH_TYPE_RISEN_LORD";
    if (value == 76) return "All.POLYMORPH_TYPE_SPECTRE";
    if (value == 32) return "All.POLYMORPH_TYPE_SUCCUBUS";
    if (value == 67) return "All.POLYMORPH_TYPE_SUPER_CHICKEN";
    if (value == 4) return "All.POLYMORPH_TYPE_TROLL";
    if (value == 5) return "All.POLYMORPH_TYPE_UMBER_HULK";
    if (value == 77) return "All.POLYMORPH_TYPE_VAMPIRE_FEMALE";
    if (value == 74) return "All.POLYMORPH_TYPE_VAMPIRE_MALE";
    if (value == 39) return "All.POLYMORPH_TYPE_VROCK";
    if (value == 2) return "All.POLYMORPH_TYPE_WERECAT";
    if (value == 1) return "All.POLYMORPH_TYPE_WERERAT";
    if (value == 0) return "All.POLYMORPH_TYPE_WEREWOLF";
    if (value == 23) return "All.POLYMORPH_TYPE_WOLF";
    if (value == 56) return "All.POLYMORPH_TYPE_WYRMLING_BLACK";
    if (value == 53) return "All.POLYMORPH_TYPE_WYRMLING_BLUE";
    if (value == 55) return "All.POLYMORPH_TYPE_WYRMLING_GREEN";
    if (value == 54) return "All.POLYMORPH_TYPE_WYRMLING_RED";
    if (value == 52) return "All.POLYMORPH_TYPE_WYRMLING_WHITE";
    if (value == 29) return "All.POLYMORPH_TYPE_YUANTI";
    if (value == 7) return "All.POLYMORPH_TYPE_ZOMBIE";
    if (value == 65535) return "All.PORTRAIT_INVALID";
    if (value == 4) return "All.PROJECTILE_PATH_TYPE_ACCELERATING";
    if (value == 2) return "All.PROJECTILE_PATH_TYPE_BALLISTIC";
    if (value == 0) return "All.PROJECTILE_PATH_TYPE_DEFAULT";
    if (value == 3) return "All.PROJECTILE_PATH_TYPE_HIGH_BALLISTIC";
    if (value == 1) return "All.PROJECTILE_PATH_TYPE_HOMING";
    if (value == 7) return "All.RACIAL_TYPE_ABERRATION";
    if (value == 28) return "All.RACIAL_TYPE_ALL";
    if (value == 8) return "All.RACIAL_TYPE_ANIMAL";
    if (value == 9) return "All.RACIAL_TYPE_BEAST";
    if (value == 10) return "All.RACIAL_TYPE_CONSTRUCT";
    if (value == 11) return "All.RACIAL_TYPE_DRAGON";
    if (value == 0) return "All.RACIAL_TYPE_DWARF";
    if (value == 16) return "All.RACIAL_TYPE_ELEMENTAL";
    if (value == 1) return "All.RACIAL_TYPE_ELF";
    if (value == 17) return "All.RACIAL_TYPE_FEY";
    if (value == 18) return "All.RACIAL_TYPE_GIANT";
    if (value == 2) return "All.RACIAL_TYPE_GNOME";
    if (value == 4) return "All.RACIAL_TYPE_HALFELF";
    if (value == 3) return "All.RACIAL_TYPE_HALFLING";
    if (value == 5) return "All.RACIAL_TYPE_HALFORC";
    if (value == 6) return "All.RACIAL_TYPE_HUMAN";
    if (value == 12) return "All.RACIAL_TYPE_HUMANOID_GOBLINOID";
    if (value == 13) return "All.RACIAL_TYPE_HUMANOID_MONSTROUS";
    if (value == 14) return "All.RACIAL_TYPE_HUMANOID_ORC";
    if (value == 15) return "All.RACIAL_TYPE_HUMANOID_REPTILIAN";
    if (value == 28) return "All.RACIAL_TYPE_INVALID";
    if (value == 19) return "All.RACIAL_TYPE_MAGICAL_BEAST";
    if (value == 29) return "All.RACIAL_TYPE_OOZE";
    if (value == 20) return "All.RACIAL_TYPE_OUTSIDER";
    if (value == 23) return "All.RACIAL_TYPE_SHAPECHANGER";
    if (value == 24) return "All.RACIAL_TYPE_UNDEAD";
    if (value == 25) return "All.RACIAL_TYPE_VERMIN";
    if (value == 1) return "All.REPUTATION_TYPE_ENEMY";
    if (value == 0) return "All.REPUTATION_TYPE_FRIEND";
    if (value == 2) return "All.REPUTATION_TYPE_NEUTRAL";
    if (value == 3) return "All.REST_EVENTTYPE_REST_CANCELLED";
    if (value == 2) return "All.REST_EVENTTYPE_REST_FINISHED";
    if (value == 0) return "All.REST_EVENTTYPE_REST_INVALID";
    if (value == 1) return "All.REST_EVENTTYPE_REST_STARTED";
    if (value == 0) return "All.SAVING_THROW_ALL";
    if (value == 1) return "All.SAVING_THROW_FORT";
    if (value == 2) return "All.SAVING_THROW_REFLEX";
    if (value == 6) return "All.SAVING_THROW_TYPE_ACID";
    if (value == 0) return "All.SAVING_THROW_TYPE_ALL";
    if (value == 19) return "All.SAVING_THROW_TYPE_CHAOS";
    if (value == 12) return "All.SAVING_THROW_TYPE_COLD";
    if (value == 11) return "All.SAVING_THROW_TYPE_DEATH";
    if (value == 3) return "All.SAVING_THROW_TYPE_DISEASE";
    if (value == 13) return "All.SAVING_THROW_TYPE_DIVINE";
    if (value == 8) return "All.SAVING_THROW_TYPE_ELECTRICITY";
    if (value == 17) return "All.SAVING_THROW_TYPE_EVIL";
    if (value == 4) return "All.SAVING_THROW_TYPE_FEAR";
    if (value == 7) return "All.SAVING_THROW_TYPE_FIRE";
    if (value == 16) return "All.SAVING_THROW_TYPE_GOOD";
    if (value == 18) return "All.SAVING_THROW_TYPE_LAW";
    if (value == 1) return "All.SAVING_THROW_TYPE_MIND_SPELLS";
    if (value == 10) return "All.SAVING_THROW_TYPE_NEGATIVE";
    if (value == 0) return "All.SAVING_THROW_TYPE_NONE";
    if (value == 2) return "All.SAVING_THROW_TYPE_POISON";
    if (value == 9) return "All.SAVING_THROW_TYPE_POSITIVE";
    if (value == 5) return "All.SAVING_THROW_TYPE_SONIC";
    if (value == 15) return "All.SAVING_THROW_TYPE_SPELL";
    if (value == 14) return "All.SAVING_THROW_TYPE_TRAP";
    if (value == 3) return "All.SAVING_THROW_WILL";
    if (value == 1) return "All.SHAPE_CONE";
    if (value == 2) return "All.SHAPE_CUBE";
    if (value == 3) return "All.SHAPE_SPELLCONE";
    if (value == 0) return "All.SHAPE_SPELLCYLINDER";
    if (value == 4) return "All.SHAPE_SPHERE";
    if (value == 255) return "All.SKILL_ALL_SKILLS";
    if (value == 0) return "All.SKILL_ANIMAL_EMPATHY";
    if (value == 20) return "All.SKILL_APPRAISE";
    if (value == 23) return "All.SKILL_BLUFF";
    if (value == 1) return "All.SKILL_CONCENTRATION";
    if (value == 25) return "All.SKILL_CRAFT_ARMOR";
    if (value == 22) return "All.SKILL_CRAFT_TRAP";
    if (value == 26) return "All.SKILL_CRAFT_WEAPON";
    if (value == 2) return "All.SKILL_DISABLE_TRAP";
    if (value == 3) return "All.SKILL_DISCIPLINE";
    if (value == 4) return "All.SKILL_HEAL";
    if (value == 5) return "All.SKILL_HIDE";
    if (value == 24) return "All.SKILL_INTIMIDATE";
    if (value == 6) return "All.SKILL_LISTEN";
    if (value == 7) return "All.SKILL_LORE";
    if (value == 8) return "All.SKILL_MOVE_SILENTLY";
    if (value == 9) return "All.SKILL_OPEN_LOCK";
    if (value == 10) return "All.SKILL_PARRY";
    if (value == 11) return "All.SKILL_PERFORM";
    if (value == 12) return "All.SKILL_PERSUADE";
    if (value == 13) return "All.SKILL_PICK_POCKET";
    if (value == 27) return "All.SKILL_RIDE";
    if (value == 14) return "All.SKILL_SEARCH";
    if (value == 15) return "All.SKILL_SET_TRAP";
    if (value == 16) return "All.SKILL_SPELLCRAFT";
    if (value == 17) return "All.SKILL_SPOT";
    if (value == 18) return "All.SKILL_TAUNT";
    if (value == 21) return "All.SKILL_TUMBLE";
    if (value == 19) return "All.SKILL_USE_MAGIC_DEVICE";
    if (value == 3) return "All.SKYBOX_DESERT_CLEAR";
    if (value == 1) return "All.SKYBOX_GRASS_CLEAR";
    if (value == 2) return "All.SKYBOX_GRASS_STORM";
    if (value == 5) return "All.SKYBOX_ICY";
    if (value == 0) return "All.SKYBOX_NONE";
    if (value == 4) return "All.SKYBOX_WINTER_CLEAR";
    if (value == 2) return "All.SPECIAL_ATTACK_CALLED_SHOT_ARM";
    if (value == 1) return "All.SPECIAL_ATTACK_CALLED_SHOT_LEG";
    if (value == 4) return "All.SPECIAL_ATTACK_DISARM";
    if (value == 9) return "All.SPECIAL_ATTACK_FLURRY_OF_BLOWS";
    if (value == 5) return "All.SPECIAL_ATTACK_IMPROVED_DISARM";
    if (value == 7) return "All.SPECIAL_ATTACK_IMPROVED_KNOCKDOWN";
    if (value == 0) return "All.SPECIAL_ATTACK_INVALID";
    if (value == 6) return "All.SPECIAL_ATTACK_KNOCKDOWN";
    if (value == 10) return "All.SPECIAL_ATTACK_RAPID_SHOT";
    if (value == 3) return "All.SPECIAL_ATTACK_SAP";
    if (value == 8) return "All.SPECIAL_ATTACK_STUNNING_FIST";
    if (value == 604) return "All.SPELLABILITY_AA_ARROW_OF_DEATH";
    if (value == 603) return "All.SPELLABILITY_AA_HAIL_OF_ARROWS";
    if (value == 600) return "All.SPELLABILITY_AA_IMBUE_ARROW";
    if (value == 601) return "All.SPELLABILITY_AA_SEEKER_ARROW_1";
    if (value == 602) return "All.SPELLABILITY_AA_SEEKER_ARROW_2";
    if (value == 386) return "All.SPELLABILITY_ACTIVATE_ITEM";
    if (value == 606) return "All.SPELLABILITY_AS_DARKNESS";
    if (value == 605) return "All.SPELLABILITY_AS_GHOSTLY_VISAGE";
    if (value == 608) return "All.SPELLABILITY_AS_IMPROVED_INVISIBLITY";
    if (value == 607) return "All.SPELLABILITY_AS_INVISIBILITY";
    if (value == 195) return "All.SPELLABILITY_AURA_BLINDING";
    if (value == 196) return "All.SPELLABILITY_AURA_COLD";
    if (value == 197) return "All.SPELLABILITY_AURA_ELECTRICITY";
    if (value == 198) return "All.SPELLABILITY_AURA_FEAR";
    if (value == 199) return "All.SPELLABILITY_AURA_FIRE";
    if (value == 804) return "All.SPELLABILITY_AURA_HORRIFICAPPEARANCE";
    if (value == 200) return "All.SPELLABILITY_AURA_MENACE";
    if (value == 314) return "All.SPELLABILITY_AURA_OF_COURAGE";
    if (value == 201) return "All.SPELLABILITY_AURA_PROTECTION";
    if (value == 202) return "All.SPELLABILITY_AURA_STUN";
    if (value == 203) return "All.SPELLABILITY_AURA_UNEARTHLY_VISAGE";
    if (value == 204) return "All.SPELLABILITY_AURA_UNNATURAL";
    if (value == 307) return "All.SPELLABILITY_BARBARIAN_RAGE";
    if (value == 380) return "All.SPELLABILITY_BATTLE_MASTERY";
    if (value == 614) return "All.SPELLABILITY_BG_BULLS_STRENGTH";
    if (value == 613) return "All.SPELLABILITY_BG_CONTAGION";
    if (value == 609) return "All.SPELLABILITY_BG_CREATEDEAD";
    if (value == 610) return "All.SPELLABILITY_BG_FIENDISH_SERVANT";
    if (value == 612) return "All.SPELLABILITY_BG_INFLICT_CRITICAL_WOUNDS";
    if (value == 611) return "All.SPELLABILITY_BG_INFLICT_SERIOUS_WOUNDS";
    if (value == 205) return "All.SPELLABILITY_BOLT_ABILITY_DRAIN_CHARISMA";
    if (value == 206) return "All.SPELLABILITY_BOLT_ABILITY_DRAIN_CONSTITUTION";
    if (value == 207) return "All.SPELLABILITY_BOLT_ABILITY_DRAIN_DEXTERITY";
    if (value == 208) return "All.SPELLABILITY_BOLT_ABILITY_DRAIN_INTELLIGENCE";
    if (value == 209) return "All.SPELLABILITY_BOLT_ABILITY_DRAIN_STRENGTH";
    if (value == 210) return "All.SPELLABILITY_BOLT_ABILITY_DRAIN_WISDOM";
    if (value == 211) return "All.SPELLABILITY_BOLT_ACID";
    if (value == 212) return "All.SPELLABILITY_BOLT_CHARM";
    if (value == 213) return "All.SPELLABILITY_BOLT_COLD";
    if (value == 214) return "All.SPELLABILITY_BOLT_CONFUSE";
    if (value == 215) return "All.SPELLABILITY_BOLT_DAZE";
    if (value == 216) return "All.SPELLABILITY_BOLT_DEATH";
    if (value == 217) return "All.SPELLABILITY_BOLT_DISEASE";
    if (value == 218) return "All.SPELLABILITY_BOLT_DOMINATE";
    if (value == 219) return "All.SPELLABILITY_BOLT_FIRE";
    if (value == 220) return "All.SPELLABILITY_BOLT_KNOCKDOWN";
    if (value == 221) return "All.SPELLABILITY_BOLT_LEVEL_DRAIN";
    if (value == 222) return "All.SPELLABILITY_BOLT_LIGHTNING";
    if (value == 223) return "All.SPELLABILITY_BOLT_PARALYZE";
    if (value == 224) return "All.SPELLABILITY_BOLT_POISON";
    if (value == 225) return "All.SPELLABILITY_BOLT_SHARDS";
    if (value == 226) return "All.SPELLABILITY_BOLT_SLOW";
    if (value == 227) return "All.SPELLABILITY_BOLT_STUN";
    if (value == 228) return "All.SPELLABILITY_BOLT_WEB";
    if (value == 495) return "All.SPELLABILITY_BREATH_PETRIFY";
    if (value == 552) return "All.SPELLABILITY_CHARMMONSTER";
    if (value == 571) return "All.SPELLABILITY_COMMAND_THE_HORDE";
    if (value == 229) return "All.SPELLABILITY_CONE_ACID";
    if (value == 230) return "All.SPELLABILITY_CONE_COLD";
    if (value == 231) return "All.SPELLABILITY_CONE_DISEASE";
    if (value == 232) return "All.SPELLABILITY_CONE_FIRE";
    if (value == 233) return "All.SPELLABILITY_CONE_LIGHTNING";
    if (value == 234) return "All.SPELLABILITY_CONE_POISON";
    if (value == 235) return "All.SPELLABILITY_CONE_SONIC";
    if (value == 622) return "All.SPELLABILITY_DC_DIVINE_WRATH";
    if (value == 312) return "All.SPELLABILITY_DETECT_EVIL";
    if (value == 382) return "All.SPELLABILITY_DIVINE_PROTECTION";
    if (value == 381) return "All.SPELLABILITY_DIVINE_STRENGTH";
    if (value == 384) return "All.SPELLABILITY_DIVINE_TRICKERY";
    if (value == 236) return "All.SPELLABILITY_DRAGON_BREATH_ACID";
    if (value == 237) return "All.SPELLABILITY_DRAGON_BREATH_COLD";
    if (value == 238) return "All.SPELLABILITY_DRAGON_BREATH_FEAR";
    if (value == 239) return "All.SPELLABILITY_DRAGON_BREATH_FIRE";
    if (value == 240) return "All.SPELLABILITY_DRAGON_BREATH_GAS";
    if (value == 241) return "All.SPELLABILITY_DRAGON_BREATH_LIGHTNING";
    if (value == 698) return "All.SPELLABILITY_DRAGON_BREATH_NEGATIVE";
    if (value == 242) return "All.SPELLABILITY_DRAGON_BREATH_PARALYZE";
    if (value == 243) return "All.SPELLABILITY_DRAGON_BREATH_SLEEP";
    if (value == 244) return "All.SPELLABILITY_DRAGON_BREATH_SLOW";
    if (value == 245) return "All.SPELLABILITY_DRAGON_BREATH_WEAKEN";
    if (value == 412) return "All.SPELLABILITY_DRAGON_FEAR";
    if (value == 246) return "All.SPELLABILITY_DRAGON_WING_BUFFET";
    if (value == 641) return "All.SPELLABILITY_DW_DEFENSIVE_STANCE";
    if (value == 319) return "All.SPELLABILITY_ELEMENTAL_SHAPE";
    if (value == 311) return "All.SPELLABILITY_EMPTY_BODY";
    if (value == 644) return "All.SPELLABILITY_EPIC_CURSE_SONG";
    if (value == 645) return "All.SPELLABILITY_EPIC_IMPROVED_WHIRLWIND";
    if (value == 642) return "All.SPELLABILITY_EPIC_MIGHTY_RAGE";
    if (value == 647) return "All.SPELLABILITY_EPIC_SHAPE_DRAGON";
    if (value == 646) return "All.SPELLABILITY_EPIC_SHAPE_DRAGONKIN";
    if (value == 247) return "All.SPELLABILITY_FEROCITY_1";
    if (value == 248) return "All.SPELLABILITY_FEROCITY_2";
    if (value == 249) return "All.SPELLABILITY_FEROCITY_3";
    if (value == 250) return "All.SPELLABILITY_GAZE_CHARM";
    if (value == 251) return "All.SPELLABILITY_GAZE_CONFUSION";
    if (value == 252) return "All.SPELLABILITY_GAZE_DAZE";
    if (value == 253) return "All.SPELLABILITY_GAZE_DEATH";
    if (value == 254) return "All.SPELLABILITY_GAZE_DESTROY_CHAOS";
    if (value == 255) return "All.SPELLABILITY_GAZE_DESTROY_EVIL";
    if (value == 256) return "All.SPELLABILITY_GAZE_DESTROY_GOOD";
    if (value == 257) return "All.SPELLABILITY_GAZE_DESTROY_LAW";
    if (value == 258) return "All.SPELLABILITY_GAZE_DOMINATE";
    if (value == 259) return "All.SPELLABILITY_GAZE_DOOM";
    if (value == 260) return "All.SPELLABILITY_GAZE_FEAR";
    if (value == 261) return "All.SPELLABILITY_GAZE_PARALYSIS";
    if (value == 497) return "All.SPELLABILITY_GAZE_PETRIFY";
    if (value == 262) return "All.SPELLABILITY_GAZE_STUNNED";
    if (value == 263) return "All.SPELLABILITY_GOLEM_BREATH_GAS";
    if (value == 264) return "All.SPELLABILITY_HELL_HOUND_FIREBREATH";
    if (value == 265) return "All.SPELLABILITY_HOWL_CONFUSE";
    if (value == 266) return "All.SPELLABILITY_HOWL_DAZE";
    if (value == 267) return "All.SPELLABILITY_HOWL_DEATH";
    if (value == 268) return "All.SPELLABILITY_HOWL_DOOM";
    if (value == 269) return "All.SPELLABILITY_HOWL_FEAR";
    if (value == 270) return "All.SPELLABILITY_HOWL_PARALYSIS";
    if (value == 271) return "All.SPELLABILITY_HOWL_SONIC";
    if (value == 272) return "All.SPELLABILITY_HOWL_STUN";
    if (value == 273) return "All.SPELLABILITY_INTENSITY_1";
    if (value == 274) return "All.SPELLABILITY_INTENSITY_2";
    if (value == 275) return "All.SPELLABILITY_INTENSITY_3";
    if (value == 276) return "All.SPELLABILITY_KRENSHAR_SCARE";
    if (value == 313) return "All.SPELLABILITY_LAY_ON_HANDS";
    if (value == 277) return "All.SPELLABILITY_LESSER_BODY_ADJUSTMENT";
    if (value == 498) return "All.SPELLABILITY_MANTICORE_SPIKES";
    if (value == 278) return "All.SPELLABILITY_MEPHIT_SALT_BREATH";
    if (value == 279) return "All.SPELLABILITY_MEPHIT_STEAM_BREATH";
    if (value == 551) return "All.SPELLABILITY_MINDBLAST";
    if (value == 280) return "All.SPELLABILITY_MUMMY_BOLSTER_UNDEAD";
    if (value == 383) return "All.SPELLABILITY_NEGATIVE_PLANE_AVATAR";
    if (value == 623) return "All.SPELLABILITY_PM_ANIMATE_DEAD";
    if (value == 628) return "All.SPELLABILITY_PM_DEATHLESS_MASTER_TOUCH";
    if (value == 627) return "All.SPELLABILITY_PM_SUMMON_GREATER_UNDEAD";
    if (value == 624) return "All.SPELLABILITY_PM_SUMMON_UNDEAD";
    if (value == 625) return "All.SPELLABILITY_PM_UNDEAD_GRAFT_1";
    if (value == 626) return "All.SPELLABILITY_PM_UNDEAD_GRAFT_2";
    if (value == 292) return "All.SPELLABILITY_PULSE_ABILITY_DRAIN_CHARISMA";
    if (value == 293) return "All.SPELLABILITY_PULSE_ABILITY_DRAIN_CONSTITUTION";
    if (value == 294) return "All.SPELLABILITY_PULSE_ABILITY_DRAIN_DEXTERITY";
    if (value == 291) return "All.SPELLABILITY_PULSE_ABILITY_DRAIN_INTELLIGENCE";
    if (value == 295) return "All.SPELLABILITY_PULSE_ABILITY_DRAIN_STRENGTH";
    if (value == 296) return "All.SPELLABILITY_PULSE_ABILITY_DRAIN_WISDOM";
    if (value == 286) return "All.SPELLABILITY_PULSE_COLD";
    if (value == 289) return "All.SPELLABILITY_PULSE_DEATH";
    if (value == 298) return "All.SPELLABILITY_PULSE_DISEASE";
    if (value == 281) return "All.SPELLABILITY_PULSE_DROWN";
    if (value == 284) return "All.SPELLABILITY_PULSE_FIRE";
    if (value == 288) return "All.SPELLABILITY_PULSE_HOLY";
    if (value == 290) return "All.SPELLABILITY_PULSE_LEVEL_DRAIN";
    if (value == 285) return "All.SPELLABILITY_PULSE_LIGHTNING";
    if (value == 287) return "All.SPELLABILITY_PULSE_NEGATIVE";
    if (value == 297) return "All.SPELLABILITY_PULSE_POISON";
    if (value == 282) return "All.SPELLABILITY_PULSE_SPORES";
    if (value == 283) return "All.SPELLABILITY_PULSE_WHIRLWIND";
    if (value == 310) return "All.SPELLABILITY_QUIVERING_PALM";
    if (value == 299) return "All.SPELLABILITY_RAGE_3";
    if (value == 300) return "All.SPELLABILITY_RAGE_4";
    if (value == 301) return "All.SPELLABILITY_RAGE_5";
    if (value == 316) return "All.SPELLABILITY_REMOVE_DISEASE";
    if (value == 385) return "All.SPELLABILITY_ROGUES_CUNNING";
    if (value == 803) return "All.SPELLABILITY_SEAHAG_EVILEYE";
    if (value == 315) return "All.SPELLABILITY_SMITE_EVIL";
    if (value == 302) return "All.SPELLABILITY_SMOKE_CLAW";
    if (value == 317) return "All.SPELLABILITY_SUMMON_ANIMAL_COMPANION";
    if (value == 379) return "All.SPELLABILITY_SUMMON_CELESTIAL";
    if (value == 318) return "All.SPELLABILITY_SUMMON_FAMILIAR";
    if (value == 378) return "All.SPELLABILITY_SUMMON_MEPHIT";
    if (value == 303) return "All.SPELLABILITY_SUMMON_SLAAD";
    if (value == 304) return "All.SPELLABILITY_SUMMON_TANARRI";
    if (value == 496) return "All.SPELLABILITY_TOUCH_PETRIFY";
    if (value == 805) return "All.SPELLABILITY_TROGLODYTE_STENCH";
    if (value == 305) return "All.SPELLABILITY_TRUMPET_BLAST";
    if (value == 308) return "All.SPELLABILITY_TURN_UNDEAD";
    if (value == 306) return "All.SPELLABILITY_TYRANT_FOG_MIST";
    if (value == 561) return "All.SPELLABILITY_WHIRLWIND";
    if (value == 309) return "All.SPELLABILITY_WHOLENESS_OF_BODY";
    if (value == 320) return "All.SPELLABILITY_WILD_SHAPE";
    if (value == 0) return "All.SPELL_ACID_FOG";
    if (value == 424) return "All.SPELL_ACID_SPLASH";
    if (value == 472) return "All.SPELL_ACTIVATE_ITEM_PORTAL";
    if (value == 428) return "All.SPELL_ACTIVATE_ITEM_SELF2";
    if (value == 1) return "All.SPELL_AID";
    if (value == -1) return "All.SPELL_ALL_SPELLS";
    if (value == 442) return "All.SPELL_AMPLIFY";
    if (value == 2) return "All.SPELL_ANIMATE_DEAD";
    if (value == 429) return "All.SPELL_AURAOFGLORY";
    if (value == 372) return "All.SPELL_AURA_OF_VITALITY";
    if (value == 363) return "All.SPELL_AWAKEN";
    if (value == 436) return "All.SPELL_BALAGARNSIRONHORN";
    if (value == 516) return "All.SPELL_BALL_LIGHTNING";
    if (value == 449) return "All.SPELL_BANE";
    if (value == 430) return "All.SPELL_BANISHMENT";
    if (value == 3) return "All.SPELL_BARKSKIN";
    if (value == 517) return "All.SPELL_BATTLETIDE";
    if (value == 4) return "All.SPELL_BESTOW_CURSE";
    if (value == 462) return "All.SPELL_BIGBYS_CLENCHED_FIST";
    if (value == 463) return "All.SPELL_BIGBYS_CRUSHING_HAND";
    if (value == 460) return "All.SPELL_BIGBYS_FORCEFUL_HAND";
    if (value == 461) return "All.SPELL_BIGBYS_GRASPING_HAND";
    if (value == 459) return "All.SPELL_BIGBYS_INTERPOSING_HAND";
    if (value == 541) return "All.SPELL_BLACKSTAFF";
    if (value == 533) return "All.SPELL_BLACK_BLADE_OF_DISASTER";
    if (value == 5) return "All.SPELL_BLADE_BARRIER";
    if (value == 535) return "All.SPELL_BLADE_THIRST";
    if (value == 6) return "All.SPELL_BLESS";
    if (value == 537) return "All.SPELL_BLESS_WEAPON";
    if (value == 8) return "All.SPELL_BLINDNESS_AND_DEAFNESS";
    if (value == 422) return "All.SPELL_BLOOD_FRENZY";
    if (value == 423) return "All.SPELL_BOMBARDMENT";
    if (value == 9) return "All.SPELL_BULLS_STRENGTH";
    if (value == 10) return "All.SPELL_BURNING_HANDS";
    if (value == 11) return "All.SPELL_CALL_LIGHTNING";
    if (value == 421) return "All.SPELL_CAMOFLAGE";
    if (value == 13) return "All.SPELL_CATS_GRACE";
    if (value == 14) return "All.SPELL_CHAIN_LIGHTNING";
    if (value == 500) return "All.SPELL_CHARGER";
    if (value == 15) return "All.SPELL_CHARM_MONSTER";
    if (value == 16) return "All.SPELL_CHARM_PERSON";
    if (value == 17) return "All.SPELL_CHARM_PERSON_OR_ANIMAL";
    if (value == 18) return "All.SPELL_CIRCLE_OF_DEATH";
    if (value == 19) return "All.SPELL_CIRCLE_OF_DOOM";
    if (value == 20) return "All.SPELL_CLAIRAUDIENCE_AND_CLAIRVOYANCE";
    if (value == 21) return "All.SPELL_CLARITY";
    if (value == 22) return "All.SPELL_CLOAK_OF_CHAOS";
    if (value == 23) return "All.SPELL_CLOUDKILL";
    if (value == 569) return "All.SPELL_CLOUD_OF_BEWILDERMENT";
    if (value == 24) return "All.SPELL_COLOR_SPRAY";
    if (value == 518) return "All.SPELL_COMBUST";
    if (value == 25) return "All.SPELL_CONE_OF_COLD";
    if (value == 26) return "All.SPELL_CONFUSION";
    if (value == 27) return "All.SPELL_CONTAGION";
    if (value == 419) return "All.SPELL_CONTINUAL_FLAME";
    if (value == 28) return "All.SPELL_CONTROL_UNDEAD";
    if (value == 654) return "All.SPELL_CRAFT_ADD_ITEM_PROPERTY";
    if (value == 657) return "All.SPELL_CRAFT_CRAFT_ARMOR_SKILL";
    if (value == 656) return "All.SPELL_CRAFT_CRAFT_WEAPON_SKILL";
    if (value == 648) return "All.SPELL_CRAFT_DYE_CLOTHCOLOR_1";
    if (value == 649) return "All.SPELL_CRAFT_DYE_CLOTHCOLOR_2";
    if (value == 650) return "All.SPELL_CRAFT_DYE_LEATHERCOLOR_1";
    if (value == 651) return "All.SPELL_CRAFT_DYE_LEATHERCOLOR_2";
    if (value == 652) return "All.SPELL_CRAFT_DYE_METALCOLOR_1";
    if (value == 653) return "All.SPELL_CRAFT_DYE_METALCOLOR_2";
    if (value == 479) return "All.SPELL_CRAFT_HARPER_ITEM";
    if (value == 655) return "All.SPELL_CRAFT_POISON_WEAPON_OR_AMMO";
    if (value == 29) return "All.SPELL_CREATE_GREATER_UNDEAD";
    if (value == 30) return "All.SPELL_CREATE_UNDEAD";
    if (value == 364) return "All.SPELL_CREEPING_DOOM";
    if (value == 512) return "All.SPELL_CRUMBLE";
    if (value == 31) return "All.SPELL_CURE_CRITICAL_WOUNDS";
    if (value == 32) return "All.SPELL_CURE_LIGHT_WOUNDS";
    if (value == 33) return "All.SPELL_CURE_MINOR_WOUNDS";
    if (value == 34) return "All.SPELL_CURE_MODERATE_WOUNDS";
    if (value == 35) return "All.SPELL_CURE_SERIOUS_WOUNDS";
    if (value == 548) return "All.SPELL_DARKFIRE";
    if (value == 36) return "All.SPELL_DARKNESS";
    if (value == 365) return "All.SPELL_DARKVISION";
    if (value == 37) return "All.SPELL_DAZE";
    if (value == 536) return "All.SPELL_DEAFENING_CLANG";
    if (value == 519) return "All.SPELL_DEATH_ARMOR";
    if (value == 38) return "All.SPELL_DEATH_WARD";
    if (value == 510) return "All.SPELL_DECHARGER";
    if (value == 503) return "All.SPELL_DECK_AVATAR";
    if (value == 505) return "All.SPELL_DECK_BUTTERFLYSPRAY";
    if (value == 504) return "All.SPELL_DECK_GEMSPRAY";
    if (value == 500) return "All.SPELL_DECK_OF_MANY_THINGS";
    if (value == 39) return "All.SPELL_DELAYED_BLAST_FIREBALL";
    if (value == 366) return "All.SPELL_DESTRUCTION";
    if (value == 445) return "All.SPELL_DIRGE";
    if (value == 40) return "All.SPELL_DISMISSAL";
    if (value == 41) return "All.SPELL_DISPEL_MAGIC";
    if (value == 458) return "All.SPELL_DISPLACEMENT";
    if (value == 414) return "All.SPELL_DIVINE_FAVOR";
    if (value == 473) return "All.SPELL_DIVINE_MIGHT";
    if (value == 42) return "All.SPELL_DIVINE_POWER";
    if (value == 474) return "All.SPELL_DIVINE_SHIELD";
    if (value == 43) return "All.SPELL_DOMINATE_ANIMAL";
    if (value == 44) return "All.SPELL_DOMINATE_MONSTER";
    if (value == 45) return "All.SPELL_DOMINATE_PERSON";
    if (value == 46) return "All.SPELL_DOOM";
    if (value == 437) return "All.SPELL_DROWN";
    if (value == 354) return "All.SPELL_EAGLE_SPLEDOR";
    if (value == 426) return "All.SPELL_EARTHQUAKE";
    if (value == 439) return "All.SPELL_ELECTRIC_JOLT";
    if (value == 47) return "All.SPELL_ELEMENTAL_SHIELD";
    if (value == 502) return "All.SPELL_ELEMENTAL_SUMMONING_ITEM";
    if (value == 48) return "All.SPELL_ELEMENTAL_SWARM";
    if (value == 49) return "All.SPELL_ENDURANCE";
    if (value == 50) return "All.SPELL_ENDURE_ELEMENTS";
    if (value == 369) return "All.SPELL_ENERGY_BUFFER";
    if (value == 51) return "All.SPELL_ENERGY_DRAIN";
    if (value == 52) return "All.SPELL_ENERVATION";
    if (value == 53) return "All.SPELL_ENTANGLE";
    if (value == 418) return "All.SPELL_ENTROPIC_SHIELD";
    if (value == 638) return "All.SPELL_EPIC_DRAGON_KNIGHT";
    if (value == 636) return "All.SPELL_EPIC_HELLBALL";
    if (value == 639) return "All.SPELL_EPIC_MAGE_ARMOR";
    if (value == 637) return "All.SPELL_EPIC_MUMMY_DUST";
    if (value == 640) return "All.SPELL_EPIC_RUIN";
    if (value == 443) return "All.SPELL_ETHEREALNESS";
    if (value == 121) return "All.SPELL_ETHEREAL_VISAGE";
    if (value == 375) return "All.SPELL_EVARDS_BLACK_TENTACLES";
    if (value == 456) return "All.SPELL_EXPEDITIOUS_RETREAT";
    if (value == 54) return "All.SPELL_FEAR";
    if (value == 55) return "All.SPELL_FEEBLEMIND";
    if (value == 377) return "All.SPELL_FIND_TRAPS";
    if (value == 56) return "All.SPELL_FINGER_OF_DEATH";
    if (value == 58) return "All.SPELL_FIREBALL";
    if (value == 440) return "All.SPELL_FIREBRAND";
    if (value == 57) return "All.SPELL_FIRE_STORM";
    if (value == 59) return "All.SPELL_FLAME_ARROW";
    if (value == 60) return "All.SPELL_FLAME_LASH";
    if (value == 61) return "All.SPELL_FLAME_STRIKE";
    if (value == 542) return "All.SPELL_FLAME_WEAPON";
    if (value == 416) return "All.SPELL_FLARE";
    if (value == 485) return "All.SPELL_FLESH_TO_STONE";
    if (value == 620) return "All.SPELL_FLYING_DEBRIS";
    if (value == 356) return "All.SPELL_FOXS_CUNNING";
    if (value == 62) return "All.SPELL_FREEDOM_OF_MOVEMENT";
    if (value == 63) return "All.SPELL_GATE";
    if (value == 520) return "All.SPELL_GEDLEES_ELECTRIC_LOOP";
    if (value == 120) return "All.SPELL_GHOSTLY_VISAGE";
    if (value == 64) return "All.SPELL_GHOUL_TOUCH";
    if (value == 65) return "All.SPELL_GLOBE_OF_INVULNERABILITY";
    if (value == 549) return "All.SPELL_GLYPH_OF_WARDING";
    if (value == 66) return "All.SPELL_GREASE";
    if (value == 360) return "All.SPELL_GREATER_BULLS_STRENGTH";
    if (value == 361) return "All.SPELL_GREATER_CATS_GRACE";
    if (value == 67) return "All.SPELL_GREATER_DISPELLING";
    if (value == 357) return "All.SPELL_GREATER_EAGLE_SPLENDOR";
    if (value == 362) return "All.SPELL_GREATER_ENDURANCE";
    if (value == 359) return "All.SPELL_GREATER_FOXS_CUNNING";
    if (value == 453) return "All.SPELL_GREATER_MAGIC_FANG";
    if (value == 545) return "All.SPELL_GREATER_MAGIC_WEAPON";
    if (value == 358) return "All.SPELL_GREATER_OWLS_WISDOM";
    if (value == 69) return "All.SPELL_GREATER_PLANAR_BINDING";
    if (value == 70) return "All.SPELL_GREATER_RESTORATION";
    if (value == 350) return "All.SPELL_GREATER_SHADOW_CONJURATION_ACID_ARROW";
    if (value == 353) return "All.SPELL_GREATER_SHADOW_CONJURATION_MINOR_GLOBE";
    if (value == 351) return "All.SPELL_GREATER_SHADOW_CONJURATION_MIRROR_IMAGE";
    if (value == 349) return "All.SPELL_GREATER_SHADOW_CONJURATION_SUMMON_SHADOW";
    if (value == 352) return "All.SPELL_GREATER_SHADOW_CONJURATION_WEB";
    if (value == 72) return "All.SPELL_GREATER_SPELL_BREACH";
    if (value == 73) return "All.SPELL_GREATER_SPELL_MANTLE";
    if (value == 74) return "All.SPELL_GREATER_STONESKIN";
    if (value == 515) return "All.SPELL_GREAT_THUNDERCLAP";
    if (value == 469) return "All.SPELL_GRENADE_ACID";
    if (value == 471) return "All.SPELL_GRENADE_CALTROPS";
    if (value == 470) return "All.SPELL_GRENADE_CHICKEN";
    if (value == 467) return "All.SPELL_GRENADE_CHOKING";
    if (value == 464) return "All.SPELL_GRENADE_FIRE";
    if (value == 466) return "All.SPELL_GRENADE_HOLY";
    if (value == 465) return "All.SPELL_GRENADE_TANGLE";
    if (value == 468) return "All.SPELL_GRENADE_THUNDERSTONE";
    if (value == 75) return "All.SPELL_GUST_OF_WIND";
    if (value == 76) return "All.SPELL_HAMMER_OF_THE_GODS";
    if (value == 77) return "All.SPELL_HARM";
    if (value == 78) return "All.SPELL_HASTE";
    if (value == 79) return "All.SPELL_HEAL";
    if (value == 506) return "All.SPELL_HEALINGKIT";
    if (value == 80) return "All.SPELL_HEALING_CIRCLE";
    if (value == 514) return "All.SPELL_HEALING_STING";
    if (value == 81) return "All.SPELL_HOLD_ANIMAL";
    if (value == 82) return "All.SPELL_HOLD_MONSTER";
    if (value == 83) return "All.SPELL_HOLD_PERSON";
    if (value == 84) return "All.SPELL_HOLY_AURA";
    if (value == 538) return "All.SPELL_HOLY_SWORD";
    if (value == 521) return "All.SPELL_HORIZIKAULS_BOOM";
    if (value == 367) return "All.SPELL_HORRID_WILTING";
    if (value == 817) return "All.SPELL_HORSE_ASSIGN_MOUNT";
    if (value == 814) return "All.SPELL_HORSE_DISMOUNT";
    if (value == 812) return "All.SPELL_HORSE_MENU";
    if (value == 813) return "All.SPELL_HORSE_MOUNT";
    if (value == 816) return "All.SPELL_HORSE_PARTY_DISMOUNT";
    if (value == 815) return "All.SPELL_HORSE_PARTY_MOUNT";
    if (value == 543) return "All.SPELL_ICE_DAGGER";
    if (value == 368) return "All.SPELL_ICE_STORM";
    if (value == 86) return "All.SPELL_IDENTIFY";
    if (value == 87) return "All.SPELL_IMPLOSION";
    if (value == 88) return "All.SPELL_IMPROVED_INVISIBILITY";
    if (value == 89) return "All.SPELL_INCENDIARY_CLOUD";
    if (value == 446) return "All.SPELL_INFERNO";
    if (value == 513) return "All.SPELL_INFESTATION_OF_MAGGOTS";
    if (value == 435) return "All.SPELL_INFLICT_CRITICAL_WOUNDS";
    if (value == 432) return "All.SPELL_INFLICT_LIGHT_WOUNDS";
    if (value == 431) return "All.SPELL_INFLICT_MINOR_WOUNDS";
    if (value == 433) return "All.SPELL_INFLICT_MODERATE_WOUNDS";
    if (value == 434) return "All.SPELL_INFLICT_SERIOUS_WOUNDS";
    if (value == 90) return "All.SPELL_INVISIBILITY";
    if (value == 91) return "All.SPELL_INVISIBILITY_PURGE";
    if (value == 92) return "All.SPELL_INVISIBILITY_SPHERE";
    if (value == 557) return "All.SPELL_IOUN_STONE_BLUE";
    if (value == 558) return "All.SPELL_IOUN_STONE_DEEP_RED";
    if (value == 554) return "All.SPELL_IOUN_STONE_DUSTY_ROSE";
    if (value == 555) return "All.SPELL_IOUN_STONE_PALE_BLUE";
    if (value == 559) return "All.SPELL_IOUN_STONE_PINK";
    if (value == 560) return "All.SPELL_IOUN_STONE_PINK_GREEN";
    if (value == 556) return "All.SPELL_IOUN_STONE_SCARLET_BLUE";
    if (value == 522) return "All.SPELL_IRONGUTS";
    if (value == 448) return "All.SPELL_ISAACS_GREATER_MISSILE_STORM";
    if (value == 447) return "All.SPELL_ISAACS_LESSER_MISSILE_STORM";
    if (value == 539) return "All.SPELL_KEEN_EDGE";
    if (value == 93) return "All.SPELL_KNOCK";
    if (value == 511) return "All.SPELL_KOBOLD_JUMP";
    if (value == 376) return "All.SPELL_LEGEND_LORE";
    if (value == 94) return "All.SPELL_LESSER_DISPEL";
    if (value == 95) return "All.SPELL_LESSER_MIND_BLANK";
    if (value == 96) return "All.SPELL_LESSER_PLANAR_BINDING";
    if (value == 97) return "All.SPELL_LESSER_RESTORATION";
    if (value == 98) return "All.SPELL_LESSER_SPELL_BREACH";
    if (value == 99) return "All.SPELL_LESSER_SPELL_MANTLE";
    if (value == 100) return "All.SPELL_LIGHT";
    if (value == 101) return "All.SPELL_LIGHTNING_BOLT";
    if (value == 102) return "All.SPELL_MAGE_ARMOR";
    if (value == 103) return "All.SPELL_MAGIC_CIRCLE_AGAINST_CHAOS";
    if (value == 104) return "All.SPELL_MAGIC_CIRCLE_AGAINST_EVIL";
    if (value == 105) return "All.SPELL_MAGIC_CIRCLE_AGAINST_GOOD";
    if (value == 106) return "All.SPELL_MAGIC_CIRCLE_AGAINST_LAW";
    if (value == 452) return "All.SPELL_MAGIC_FANG";
    if (value == 107) return "All.SPELL_MAGIC_MISSILE";
    if (value == 546) return "All.SPELL_MAGIC_VESTMENT";
    if (value == 544) return "All.SPELL_MAGIC_WEAPON";
    if (value == 110) return "All.SPELL_MASS_BLINDNESS_AND_DEAFNESS";
    if (value == 455) return "All.SPELL_MASS_CAMOFLAGE";
    if (value == 111) return "All.SPELL_MASS_CHARM";
    if (value == 113) return "All.SPELL_MASS_HASTE";
    if (value == 114) return "All.SPELL_MASS_HEAL";
    if (value == 115) return "All.SPELL_MELFS_ACID_ARROW";
    if (value == 523) return "All.SPELL_MESTILS_ACID_BREATH";
    if (value == 524) return "All.SPELL_MESTILS_ACID_SHEATH";
    if (value == 116) return "All.SPELL_METEOR_SWARM";
    if (value == 117) return "All.SPELL_MIND_BLANK";
    if (value == 118) return "All.SPELL_MIND_FOG";
    if (value == 119) return "All.SPELL_MINOR_GLOBE_OF_INVULNERABILITY";
    if (value == 525) return "All.SPELL_MONSTROUS_REGENERATION";
    if (value == 122) return "All.SPELL_MORDENKAINENS_DISJUNCTION";
    if (value == 123) return "All.SPELL_MORDENKAINENS_SWORD";
    if (value == 124) return "All.SPELL_NATURES_BALANCE";
    if (value == 370) return "All.SPELL_NEGATIVE_ENERGY_BURST";
    if (value == 125) return "All.SPELL_NEGATIVE_ENERGY_PROTECTION";
    if (value == 371) return "All.SPELL_NEGATIVE_ENERGY_RAY";
    if (value == 126) return "All.SPELL_NEUTRALIZE_POISON";
    if (value == 420) return "All.SPELL_ONE_WITH_THE_LAND";
    if (value == 438) return "All.SPELL_OWLS_INSIGHT";
    if (value == 355) return "All.SPELL_OWLS_WISDOM";
    if (value == 818) return "All.SPELL_PALADIN_SUMMON_MOUNT";
    if (value == 127) return "All.SPELL_PHANTASMAL_KILLER";
    if (value == 451) return "All.SPELL_PLANAR_ALLY";
    if (value == 128) return "All.SPELL_PLANAR_BINDING";
    if (value == 129) return "All.SPELL_POISON";
    if (value == 130) return "All.SPELL_POLYMORPH_SELF";
    if (value == 507) return "All.SPELL_POWERSTONE";
    if (value == 131) return "All.SPELL_POWER_WORD_KILL";
    if (value == 132) return "All.SPELL_POWER_WORD_STUN";
    if (value == 133) return "All.SPELL_PRAYER";
    if (value == 134) return "All.SPELL_PREMONITION";
    if (value == 135) return "All.SPELL_PRISMATIC_SPRAY";
    if (value == 137) return "All.SPELL_PROTECTION_FROM_ELEMENTS";
    if (value == 138) return "All.SPELL_PROTECTION_FROM_EVIL";
    if (value == 139) return "All.SPELL_PROTECTION_FROM_GOOD";
    if (value == 140) return "All.SPELL_PROTECTION_FROM_LAW";
    if (value == 141) return "All.SPELL_PROTECTION_FROM_SPELLS";
    if (value == 136) return "All.SPELL_PROTECTION__FROM_CHAOS";
    if (value == 425) return "All.SPELL_QUILLFIRE";
    if (value == 142) return "All.SPELL_RAISE_DEAD";
    if (value == 143) return "All.SPELL_RAY_OF_ENFEEBLEMENT";
    if (value == 144) return "All.SPELL_RAY_OF_FROST";
    if (value == 374) return "All.SPELL_REGENERATE";
    if (value == 145) return "All.SPELL_REMOVE_BLINDNESS_AND_DEAFNESS";
    if (value == 146) return "All.SPELL_REMOVE_CURSE";
    if (value == 147) return "All.SPELL_REMOVE_DISEASE";
    if (value == 148) return "All.SPELL_REMOVE_FEAR";
    if (value == 149) return "All.SPELL_REMOVE_PARALYSIS";
    if (value == 151) return "All.SPELL_RESISTANCE";
    if (value == 150) return "All.SPELL_RESIST_ELEMENTS";
    if (value == 152) return "All.SPELL_RESTORATION";
    if (value == 153) return "All.SPELL_RESURRECTION";
    if (value == 499) return "All.SPELL_ROD_OF_WONDER";
    if (value == 154) return "All.SPELL_SANCTUARY";
    if (value == 155) return "All.SPELL_SCARE";
    if (value == 1) return "All.SPELL_SCHOOL_ABJURATION";
    if (value == 2) return "All.SPELL_SCHOOL_CONJURATION";
    if (value == 3) return "All.SPELL_SCHOOL_DIVINATION";
    if (value == 4) return "All.SPELL_SCHOOL_ENCHANTMENT";
    if (value == 5) return "All.SPELL_SCHOOL_EVOCATION";
    if (value == 0) return "All.SPELL_SCHOOL_GENERAL";
    if (value == 6) return "All.SPELL_SCHOOL_ILLUSION";
    if (value == 7) return "All.SPELL_SCHOOL_NECROMANCY";
    if (value == 8) return "All.SPELL_SCHOOL_TRANSMUTATION";
    if (value == 526) return "All.SPELL_SCINTILLATING_SPHERE";
    if (value == 156) return "All.SPELL_SEARING_LIGHT";
    if (value == 157) return "All.SPELL_SEE_INVISIBILITY";
    if (value == 340) return "All.SPELL_SHADES_CONE_OF_COLD";
    if (value == 341) return "All.SPELL_SHADES_FIREBALL";
    if (value == 342) return "All.SPELL_SHADES_STONESKIN";
    if (value == 324) return "All.SPELL_SHADES_SUMMON_SHADOW";
    if (value == 343) return "All.SPELL_SHADES_WALL_OF_FIRE";
    if (value == 345) return "All.SPELL_SHADOW_CONJURATION_DARKNESS";
    if (value == 346) return "All.SPELL_SHADOW_CONJURATION_INIVSIBILITY";
    if (value == 347) return "All.SPELL_SHADOW_CONJURATION_MAGE_ARMOR";
    if (value == 348) return "All.SPELL_SHADOW_CONJURATION_MAGIC_MISSILE";
    if (value == 344) return "All.SPELL_SHADOW_CONJURATION_SUMMON_SHADOW";
    if (value == 475) return "All.SPELL_SHADOW_DAZE";
    if (value == 477) return "All.SPELL_SHADOW_EVADE";
    if (value == 160) return "All.SPELL_SHADOW_SHIELD";
    if (value == 161) return "All.SPELL_SHAPECHANGE";
    if (value == 534) return "All.SPELL_SHELGARNS_PERSISTENT_BLADE";
    if (value == 417) return "All.SPELL_SHIELD";
    if (value == 450) return "All.SPELL_SHIELD_OF_FAITH";
    if (value == 162) return "All.SPELL_SHIELD_OF_LAW";
    if (value == 163) return "All.SPELL_SILENCE";
    if (value == 164) return "All.SPELL_SLAY_LIVING";
    if (value == 165) return "All.SPELL_SLEEP";
    if (value == 166) return "All.SPELL_SLOW";
    if (value == 167) return "All.SPELL_SOUND_BURST";
    if (value == 508) return "All.SPELL_SPELLSTAFF";
    if (value == 169) return "All.SPELL_SPELL_MANTLE";
    if (value == 168) return "All.SPELL_SPELL_RESISTANCE";
    if (value == 170) return "All.SPELL_SPHERE_OF_CHAOS";
    if (value == 454) return "All.SPELL_SPIKE_GROWTH";
    if (value == 171) return "All.SPELL_STINKING_CLOUD";
    if (value == 547) return "All.SPELL_STONEHOLD";
    if (value == 172) return "All.SPELL_STONESKIN";
    if (value == 527) return "All.SPELL_STONE_BONES";
    if (value == 486) return "All.SPELL_STONE_TO_FLESH";
    if (value == 173) return "All.SPELL_STORM_OF_VENGEANCE";
    if (value == 174) return "All.SPELL_SUMMON_CREATURE_I";
    if (value == 175) return "All.SPELL_SUMMON_CREATURE_II";
    if (value == 176) return "All.SPELL_SUMMON_CREATURE_III";
    if (value == 177) return "All.SPELL_SUMMON_CREATURE_IV";
    if (value == 178) return "All.SPELL_SUMMON_CREATURE_IX";
    if (value == 179) return "All.SPELL_SUMMON_CREATURE_V";
    if (value == 180) return "All.SPELL_SUMMON_CREATURE_VI";
    if (value == 181) return "All.SPELL_SUMMON_CREATURE_VII";
    if (value == 182) return "All.SPELL_SUMMON_CREATURE_VIII";
    if (value == 476) return "All.SPELL_SUMMON_SHADOW";
    if (value == 183) return "All.SPELL_SUNBEAM";
    if (value == 427) return "All.SPELL_SUNBURST";
    if (value == 457) return "All.SPELL_TASHAS_HIDEOUS_LAUGHTER";
    if (value == 184) return "All.SPELL_TENSERS_TRANSFORMATION";
    if (value == 185) return "All.SPELL_TIME_STOP";
    if (value == 487) return "All.SPELL_TRAP_ARROW";
    if (value == 488) return "All.SPELL_TRAP_BOLT";
    if (value == 493) return "All.SPELL_TRAP_DART";
    if (value == 494) return "All.SPELL_TRAP_SHURIKEN";
    if (value == 186) return "All.SPELL_TRUE_SEEING";
    if (value == 415) return "All.SPELL_TRUE_STRIKE";
    if (value == 478) return "All.SPELL_TYMORAS_SMILE";
    if (value == 444) return "All.SPELL_UNDEATHS_ETERNAL_FOE";
    if (value == 528) return "All.SPELL_UNDEATH_TO_DEATH";
    if (value == 187) return "All.SPELL_UNHOLY_AURA";
    if (value == 188) return "All.SPELL_VAMPIRIC_TOUCH";
    if (value == 529) return "All.SPELL_VINE_MINE";
    if (value == 532) return "All.SPELL_VINE_MINE_CAMOUFLAGE";
    if (value == 530) return "All.SPELL_VINE_MINE_ENTANGLE";
    if (value == 531) return "All.SPELL_VINE_MINE_HAMPER_MOVEMENT";
    if (value == 189) return "All.SPELL_VIRTUE";
    if (value == 190) return "All.SPELL_WAIL_OF_THE_BANSHEE";
    if (value == 191) return "All.SPELL_WALL_OF_FIRE";
    if (value == 373) return "All.SPELL_WAR_CRY";
    if (value == 192) return "All.SPELL_WEB";
    if (value == 193) return "All.SPELL_WEIRD";
    if (value == 194) return "All.SPELL_WORD_OF_FAITH";
    if (value == 441) return "All.SPELL_WOUNDING_WHISPERS";
    if (value == 1) return "All.STANDARD_FACTION_COMMONER";
    if (value == 3) return "All.STANDARD_FACTION_DEFENDER";
    if (value == 0) return "All.STANDARD_FACTION_HOSTILE";
    if (value == 2) return "All.STANDARD_FACTION_MERCHANT";
    if (value == 1) return "All.STEALTH_MODE_ACTIVATED";
    if (value == 0) return "All.STEALTH_MODE_DISABLED";
    if (value == 102) return "All.SUBSKILL_EXAMINETRAP";
    if (value == 100) return "All.SUBSKILL_FLAGTRAP";
    if (value == 101) return "All.SUBSKILL_RECOVERTRAP";
    if (value == 24) return "All.SUBTYPE_EXTRAORDINARY";
    if (value == 8) return "All.SUBTYPE_MAGICAL";
    if (value == 16) return "All.SUBTYPE_SUPERNATURAL";
    if (value == 6) return "All.TALENT_CATEGORY_BENEFICIAL_CONDITIONAL_AREAEFFECT";
    if (value == 18) return "All.TALENT_CATEGORY_BENEFICIAL_CONDITIONAL_POTION";
    if (value == 7) return "All.TALENT_CATEGORY_BENEFICIAL_CONDITIONAL_SINGLE";
    if (value == 8) return "All.TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_AREAEFFECT";
    if (value == 21) return "All.TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_POTION";
    if (value == 10) return "All.TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_SELF";
    if (value == 9) return "All.TALENT_CATEGORY_BENEFICIAL_ENHANCEMENT_SINGLE";
    if (value == 4) return "All.TALENT_CATEGORY_BENEFICIAL_HEALING_AREAEFFECT";
    if (value == 17) return "All.TALENT_CATEGORY_BENEFICIAL_HEALING_POTION";
    if (value == 5) return "All.TALENT_CATEGORY_BENEFICIAL_HEALING_TOUCH";
    if (value == 15) return "All.TALENT_CATEGORY_BENEFICIAL_OBTAIN_ALLIES";
    if (value == 14) return "All.TALENT_CATEGORY_BENEFICIAL_PROTECTION_AREAEFFECT";
    if (value == 20) return "All.TALENT_CATEGORY_BENEFICIAL_PROTECTION_POTION";
    if (value == 12) return "All.TALENT_CATEGORY_BENEFICIAL_PROTECTION_SELF";
    if (value == 13) return "All.TALENT_CATEGORY_BENEFICIAL_PROTECTION_SINGLE";
    if (value == 19) return "All.TALENT_CATEGORY_DRAGONS_BREATH";
    if (value == 1) return "All.TALENT_CATEGORY_HARMFUL_AREAEFFECT_DISCRIMINANT";
    if (value == 11) return "All.TALENT_CATEGORY_HARMFUL_AREAEFFECT_INDISCRIMINANT";
    if (value == 22) return "All.TALENT_CATEGORY_HARMFUL_MELEE";
    if (value == 2) return "All.TALENT_CATEGORY_HARMFUL_RANGED";
    if (value == 3) return "All.TALENT_CATEGORY_HARMFUL_TOUCH";
    if (value == 16) return "All.TALENT_CATEGORY_PERSISTENT_AREA_OF_EFFECT";
    if (value == 1) return "All.TALENT_TYPE_FEAT";
    if (value == 2) return "All.TALENT_TYPE_SKILL";
    if (value == 0) return "All.TALENT_TYPE_SPELL";
    if (value == 5) return "All.TALKVOLUME_PARTY";
    if (value == 2) return "All.TALKVOLUME_SHOUT";
    if (value == 4) return "All.TALKVOLUME_SILENT_SHOUT";
    if (value == 3) return "All.TALKVOLUME_SILENT_TALK";
    if (value == 0) return "All.TALKVOLUME_TALK";
    if (value == 6) return "All.TALKVOLUME_TELL";
    if (value == 1) return "All.TALKVOLUME_WHISPER";
    if (value == 15) return "All.TILE_MAIN_LIGHT_COLOR_AQUA";
    if (value == 0) return "All.TILE_MAIN_LIGHT_COLOR_BLACK";
    if (value == 19) return "All.TILE_MAIN_LIGHT_COLOR_BLUE";
    if (value == 3) return "All.TILE_MAIN_LIGHT_COLOR_BRIGHT_WHITE";
    if (value == 13) return "All.TILE_MAIN_LIGHT_COLOR_DARK_AQUA";
    if (value == 17) return "All.TILE_MAIN_LIGHT_COLOR_DARK_BLUE";
    if (value == 9) return "All.TILE_MAIN_LIGHT_COLOR_DARK_GREEN";
    if (value == 29) return "All.TILE_MAIN_LIGHT_COLOR_DARK_ORANGE";
    if (value == 21) return "All.TILE_MAIN_LIGHT_COLOR_DARK_PURPLE";
    if (value == 25) return "All.TILE_MAIN_LIGHT_COLOR_DARK_RED";
    if (value == 5) return "All.TILE_MAIN_LIGHT_COLOR_DARK_YELLOW";
    if (value == 1) return "All.TILE_MAIN_LIGHT_COLOR_DIM_WHITE";
    if (value == 11) return "All.TILE_MAIN_LIGHT_COLOR_GREEN";
    if (value == 31) return "All.TILE_MAIN_LIGHT_COLOR_ORANGE";
    if (value == 14) return "All.TILE_MAIN_LIGHT_COLOR_PALE_AQUA";
    if (value == 18) return "All.TILE_MAIN_LIGHT_COLOR_PALE_BLUE";
    if (value == 12) return "All.TILE_MAIN_LIGHT_COLOR_PALE_DARK_AQUA";
    if (value == 16) return "All.TILE_MAIN_LIGHT_COLOR_PALE_DARK_BLUE";
    if (value == 8) return "All.TILE_MAIN_LIGHT_COLOR_PALE_DARK_GREEN";
    if (value == 28) return "All.TILE_MAIN_LIGHT_COLOR_PALE_DARK_ORANGE";
    if (value == 20) return "All.TILE_MAIN_LIGHT_COLOR_PALE_DARK_PURPLE";
    if (value == 24) return "All.TILE_MAIN_LIGHT_COLOR_PALE_DARK_RED";
    if (value == 4) return "All.TILE_MAIN_LIGHT_COLOR_PALE_DARK_YELLOW";
    if (value == 10) return "All.TILE_MAIN_LIGHT_COLOR_PALE_GREEN";
    if (value == 30) return "All.TILE_MAIN_LIGHT_COLOR_PALE_ORANGE";
    if (value == 22) return "All.TILE_MAIN_LIGHT_COLOR_PALE_PURPLE";
    if (value == 26) return "All.TILE_MAIN_LIGHT_COLOR_PALE_RED";
    if (value == 6) return "All.TILE_MAIN_LIGHT_COLOR_PALE_YELLOW";
    if (value == 23) return "All.TILE_MAIN_LIGHT_COLOR_PURPLE";
    if (value == 27) return "All.TILE_MAIN_LIGHT_COLOR_RED";
    if (value == 2) return "All.TILE_MAIN_LIGHT_COLOR_WHITE";
    if (value == 7) return "All.TILE_MAIN_LIGHT_COLOR_YELLOW";
    if (value == 0) return "All.TILE_SOURCE_LIGHT_COLOR_BLACK";
    if (value == 7) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_AQUA";
    if (value == 9) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_BLUE";
    if (value == 6) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_DARK_AQUA";
    if (value == 8) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_DARK_BLUE";
    if (value == 4) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_DARK_GREEN";
    if (value == 14) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_DARK_ORANGE";
    if (value == 10) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_DARK_PURPLE";
    if (value == 12) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_DARK_RED";
    if (value == 2) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_DARK_YELLOW";
    if (value == 5) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_GREEN";
    if (value == 15) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_ORANGE";
    if (value == 11) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_PURPLE";
    if (value == 13) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_RED";
    if (value == 3) return "All.TILE_SOURCE_LIGHT_COLOR_PALE_YELLOW";
    if (value == 1) return "All.TILE_SOURCE_LIGHT_COLOR_WHITE";
    if (value == 47) return "All.TRACK_BATTLE_ARIBETH";
    if (value == 40) return "All.TRACK_BATTLE_CITY1";
    if (value == 41) return "All.TRACK_BATTLE_CITY2";
    if (value == 42) return "All.TRACK_BATTLE_CITY3";
    if (value == 43) return "All.TRACK_BATTLE_CITYBOSS";
    if (value == 57) return "All.TRACK_BATTLE_DESERT";
    if (value == 46) return "All.TRACK_BATTLE_DRAGON";
    if (value == 37) return "All.TRACK_BATTLE_DUNGEON1";
    if (value == 38) return "All.TRACK_BATTLE_DUNGEON2";
    if (value == 39) return "All.TRACK_BATTLE_DUNGEON3";
    if (value == 48) return "All.TRACK_BATTLE_ENDBOSS";
    if (value == 35) return "All.TRACK_BATTLE_FOREST1";
    if (value == 36) return "All.TRACK_BATTLE_FOREST2";
    if (value == 44) return "All.TRACK_BATTLE_FORESTBOSS";
    if (value == 45) return "All.TRACK_BATTLE_LIZARDBOSS";
    if (value == 34) return "All.TRACK_BATTLE_RURAL1";
    if (value == 60) return "All.TRACK_BATTLE_WINTER";
    if (value == 50) return "All.TRACK_CASTLE";
    if (value == 17) return "All.TRACK_CITYDOCKDAY";
    if (value == 18) return "All.TRACK_CITYDOCKNIGHT";
    if (value == 20) return "All.TRACK_CITYMARKET";
    if (value == 21) return "All.TRACK_CITYNIGHT";
    if (value == 15) return "All.TRACK_CITYSLUMDAY";
    if (value == 16) return "All.TRACK_CITYSLUMNIGHT";
    if (value == 19) return "All.TRACK_CITYWEALTHY";
    if (value == 11) return "All.TRACK_CRYPT1";
    if (value == 12) return "All.TRACK_CRYPT2";
    if (value == 58) return "All.TRACK_DESERT_DAY";
    if (value == 61) return "All.TRACK_DESERT_NIGHT";
    if (value == 7) return "All.TRACK_DUNGEON1";
    if (value == 13) return "All.TRACK_EVILDUNGEON1";
    if (value == 14) return "All.TRACK_EVILDUNGEON2";
    if (value == 4) return "All.TRACK_FORESTDAY1";
    if (value == 5) return "All.TRACK_FORESTDAY2";
    if (value == 6) return "All.TRACK_FORESTNIGHT";
    if (value == 74) return "All.TRACK_HOTU_BATTLE_BOSS1";
    if (value == 75) return "All.TRACK_HOTU_BATTLE_BOSS2";
    if (value == 73) return "All.TRACK_HOTU_BATTLE_HELL";
    if (value == 72) return "All.TRACK_HOTU_BATTLE_LARGE";
    if (value == 71) return "All.TRACK_HOTU_BATTLE_MED";
    if (value == 70) return "All.TRACK_HOTU_BATTLE_SMALL";
    if (value == 69) return "All.TRACK_HOTU_DRACOLICH";
    if (value == 66) return "All.TRACK_HOTU_FIREPLANE";
    if (value == 68) return "All.TRACK_HOTU_HELLFROZEOVER";
    if (value == 67) return "All.TRACK_HOTU_QUEEN";
    if (value == 65) return "All.TRACK_HOTU_REBELCAMP";
    if (value == 62) return "All.TRACK_HOTU_THEME";
    if (value == 64) return "All.TRACK_HOTU_UNDERMOUNTAIN";
    if (value == 63) return "All.TRACK_HOTU_WATERDEEP";
    if (value == 9) return "All.TRACK_MINES1";
    if (value == 10) return "All.TRACK_MINES2";
    if (value == 25) return "All.TRACK_RICHHOUSE";
    if (value == 1) return "All.TRACK_RURALDAY1";
    if (value == 2) return "All.TRACK_RURALDAY2";
    if (value == 3) return "All.TRACK_RURALNIGHT";
    if (value == 8) return "All.TRACK_SEWER";
    if (value == 26) return "All.TRACK_STORE";
    if (value == 22) return "All.TRACK_TAVERN1";
    if (value == 23) return "All.TRACK_TAVERN2";
    if (value == 24) return "All.TRACK_TAVERN3";
    if (value == 56) return "All.TRACK_TAVERN4";
    if (value == 28) return "All.TRACK_TEMPLEEVIL";
    if (value == 27) return "All.TRACK_TEMPLEGOOD";
    if (value == 49) return "All.TRACK_TEMPLEGOOD2";
    if (value == 51) return "All.TRACK_THEME_ARIBETH1";
    if (value == 52) return "All.TRACK_THEME_ARIBETH2";
    if (value == 30) return "All.TRACK_THEME_CHAPTER1";
    if (value == 31) return "All.TRACK_THEME_CHAPTER2";
    if (value == 32) return "All.TRACK_THEME_CHAPTER3";
    if (value == 33) return "All.TRACK_THEME_CHAPTER4";
    if (value == 53) return "All.TRACK_THEME_GEND";
    if (value == 54) return "All.TRACK_THEME_MAUGRIM";
    if (value == 55) return "All.TRACK_THEME_MORAG";
    if (value == 29) return "All.TRACK_THEME_NWN";
    if (value == 59) return "All.TRACK_WINTER_DAY";
    if (value == 13) return "All.TRAP_BASE_TYPE_AVERAGE_ACID";
    if (value == 41) return "All.TRAP_BASE_TYPE_AVERAGE_ACID_SPLASH";
    if (value == 21) return "All.TRAP_BASE_TYPE_AVERAGE_ELECTRICAL";
    if (value == 17) return "All.TRAP_BASE_TYPE_AVERAGE_FIRE";
    if (value == 29) return "All.TRAP_BASE_TYPE_AVERAGE_FROST";
    if (value == 25) return "All.TRAP_BASE_TYPE_AVERAGE_GAS";
    if (value == 5) return "All.TRAP_BASE_TYPE_AVERAGE_HOLY";
    if (value == 33) return "All.TRAP_BASE_TYPE_AVERAGE_NEGATIVE";
    if (value == 37) return "All.TRAP_BASE_TYPE_AVERAGE_SONIC";
    if (value == 1) return "All.TRAP_BASE_TYPE_AVERAGE_SPIKE";
    if (value == 9) return "All.TRAP_BASE_TYPE_AVERAGE_TANGLE";
    if (value == 15) return "All.TRAP_BASE_TYPE_DEADLY_ACID";
    if (value == 43) return "All.TRAP_BASE_TYPE_DEADLY_ACID_SPLASH";
    if (value == 23) return "All.TRAP_BASE_TYPE_DEADLY_ELECTRICAL";
    if (value == 19) return "All.TRAP_BASE_TYPE_DEADLY_FIRE";
    if (value == 31) return "All.TRAP_BASE_TYPE_DEADLY_FROST";
    if (value == 27) return "All.TRAP_BASE_TYPE_DEADLY_GAS";
    if (value == 7) return "All.TRAP_BASE_TYPE_DEADLY_HOLY";
    if (value == 35) return "All.TRAP_BASE_TYPE_DEADLY_NEGATIVE";
    if (value == 39) return "All.TRAP_BASE_TYPE_DEADLY_SONIC";
    if (value == 3) return "All.TRAP_BASE_TYPE_DEADLY_SPIKE";
    if (value == 11) return "All.TRAP_BASE_TYPE_DEADLY_TANGLE";
    if (value == 44) return "All.TRAP_BASE_TYPE_EPIC_ELECTRICAL";
    if (value == 45) return "All.TRAP_BASE_TYPE_EPIC_FIRE";
    if (value == 46) return "All.TRAP_BASE_TYPE_EPIC_FROST";
    if (value == 47) return "All.TRAP_BASE_TYPE_EPIC_SONIC";
    if (value == 12) return "All.TRAP_BASE_TYPE_MINOR_ACID";
    if (value == 40) return "All.TRAP_BASE_TYPE_MINOR_ACID_SPLASH";
    if (value == 20) return "All.TRAP_BASE_TYPE_MINOR_ELECTRICAL";
    if (value == 16) return "All.TRAP_BASE_TYPE_MINOR_FIRE";
    if (value == 28) return "All.TRAP_BASE_TYPE_MINOR_FROST";
    if (value == 24) return "All.TRAP_BASE_TYPE_MINOR_GAS";
    if (value == 4) return "All.TRAP_BASE_TYPE_MINOR_HOLY";
    if (value == 32) return "All.TRAP_BASE_TYPE_MINOR_NEGATIVE";
    if (value == 36) return "All.TRAP_BASE_TYPE_MINOR_SONIC";
    if (value == 0) return "All.TRAP_BASE_TYPE_MINOR_SPIKE";
    if (value == 8) return "All.TRAP_BASE_TYPE_MINOR_TANGLE";
    if (value == 14) return "All.TRAP_BASE_TYPE_STRONG_ACID";
    if (value == 42) return "All.TRAP_BASE_TYPE_STRONG_ACID_SPLASH";
    if (value == 22) return "All.TRAP_BASE_TYPE_STRONG_ELECTRICAL";
    if (value == 18) return "All.TRAP_BASE_TYPE_STRONG_FIRE";
    if (value == 30) return "All.TRAP_BASE_TYPE_STRONG_FROST";
    if (value == 26) return "All.TRAP_BASE_TYPE_STRONG_GAS";
    if (value == 6) return "All.TRAP_BASE_TYPE_STRONG_HOLY";
    if (value == 34) return "All.TRAP_BASE_TYPE_STRONG_NEGATIVE";
    if (value == 38) return "All.TRAP_BASE_TYPE_STRONG_SONIC";
    if (value == 2) return "All.TRAP_BASE_TYPE_STRONG_SPIKE";
    if (value == 10) return "All.TRAP_BASE_TYPE_STRONG_TANGLE";
    if (value == 1) return "All.TRUE";
    if (value == 0) return "All.USE_CREATURE_LEVEL";
    if (value == 485) return "All.VFX_BEAM_BLACK";
    if (value == 484) return "All.VFX_BEAM_CHAIN";
    if (value == 211) return "All.VFX_BEAM_COLD";
    if (value == 447) return "All.VFX_BEAM_DISINTEGRATE";
    if (value == 214) return "All.VFX_BEAM_EVIL";
    if (value == 210) return "All.VFX_BEAM_FIRE";
    if (value == 216) return "All.VFX_BEAM_FIRE_LASH";
    if (value == 482) return "All.VFX_BEAM_FIRE_W";
    if (value == 483) return "All.VFX_BEAM_FIRE_W_SILENT";
    if (value == 212) return "All.VFX_BEAM_HOLY";
    if (value == 73 ) return "All.VFX_BEAM_LIGHTNING";
    if (value == 213) return "All.VFX_BEAM_MIND";
    if (value == 215) return "All.VFX_BEAM_ODD";
    if (value == 309) return "All.VFX_BEAM_SILENT_COLD";
    if (value == 312) return "All.VFX_BEAM_SILENT_EVIL";
    if (value == 308) return "All.VFX_BEAM_SILENT_FIRE";
    if (value == 310) return "All.VFX_BEAM_SILENT_HOLY";
    if (value == 307) return "All.VFX_BEAM_SILENT_LIGHTNING";
    if (value == 311) return "All.VFX_BEAM_SILENT_MIND";
    if (value == 313) return "All.VFX_BEAM_SILENT_ODD";
    if (value == 116 ) return "All.VFX_COM_BLOOD_CRT_GREEN";
    if (value == 115 ) return "All.VFX_COM_BLOOD_CRT_RED";
    if (value == 108 ) return "All.VFX_COM_BLOOD_CRT_WIMP";
    if (value == 117 ) return "All.VFX_COM_BLOOD_CRT_YELLOW";
    if (value == 113 ) return "All.VFX_COM_BLOOD_LRG_GREEN";
    if (value == 112 ) return "All.VFX_COM_BLOOD_LRG_RED";
    if (value == 107 ) return "All.VFX_COM_BLOOD_LRG_WIMP";
    if (value == 114 ) return "All.VFX_COM_BLOOD_LRG_YELLOW";
    if (value == 110 ) return "All.VFX_COM_BLOOD_REG_GREEN";
    if (value == 109 ) return "All.VFX_COM_BLOOD_REG_RED";
    if (value == 106 ) return "All.VFX_COM_BLOOD_REG_WIMP";
    if (value == 111 ) return "All.VFX_COM_BLOOD_REG_YELLOW";
    if (value == 239) return "All.VFX_COM_BLOOD_SPARK_LARGE";
    if (value == 238) return "All.VFX_COM_BLOOD_SPARK_MEDIUM";
    if (value == 237) return "All.VFX_COM_BLOOD_SPARK_SMALL";
    if (value == 236) return "All.VFX_COM_CHUNK_BONE_MEDIUM";
    if (value == 124 ) return "All.VFX_COM_CHUNK_GREEN_MEDIUM";
    if (value == 123 ) return "All.VFX_COM_CHUNK_GREEN_SMALL";
    if (value == 504) return "All.VFX_COM_CHUNK_RED_BALLISTA";
    if (value == 235) return "All.VFX_COM_CHUNK_RED_LARGE";
    if (value == 122 ) return "All.VFX_COM_CHUNK_RED_MEDIUM";
    if (value == 121 ) return "All.VFX_COM_CHUNK_RED_SMALL";
    if (value == 354) return "All.VFX_COM_CHUNK_STONE_MEDIUM";
    if (value == 353) return "All.VFX_COM_CHUNK_STONE_SMALL";
    if (value == 126 ) return "All.VFX_COM_CHUNK_YELLOW_MEDIUM";
    if (value == 125 ) return "All.VFX_COM_CHUNK_YELLOW_SMALL";
    if (value == 283) return "All.VFX_COM_HIT_ACID";
    if (value == 289) return "All.VFX_COM_HIT_DIVINE";
    if (value == 282) return "All.VFX_COM_HIT_ELECTRICAL";
    if (value == 280) return "All.VFX_COM_HIT_FIRE";
    if (value == 281) return "All.VFX_COM_HIT_FROST";
    if (value == 288) return "All.VFX_COM_HIT_NEGATIVE";
    if (value == 284) return "All.VFX_COM_HIT_SONIC";
    if (value == 118 ) return "All.VFX_COM_SPARKS_PARRY";
    if (value == 100 ) return "All.VFX_COM_SPECIAL_BLUE_RED";
    if (value == 101 ) return "All.VFX_COM_SPECIAL_PINK_ORANGE";
    if (value == 103 ) return "All.VFX_COM_SPECIAL_RED_ORANGE";
    if (value == 102 ) return "All.VFX_COM_SPECIAL_RED_WHITE";
    if (value == 104 ) return "All.VFX_COM_SPECIAL_WHITE_BLUE";
    if (value == 105 ) return "All.VFX_COM_SPECIAL_WHITE_ORANGE";
    if (value == 120 ) return "All.VFX_COM_UNLOAD_MODEL";
    if (value == 248) return "All.VFX_DUR_ANTI_LIGHT_10";
    if (value == 635) return "All.VFX_DUR_ARROW_IN_BACK";
    if (value == 633) return "All.VFX_DUR_ARROW_IN_CHEST_LEFT";
    if (value == 634) return "All.VFX_DUR_ARROW_IN_CHEST_RIGHT";
    if (value == 637) return "All.VFX_DUR_ARROW_IN_FACE";
    if (value == 638) return "All.VFX_DUR_ARROW_IN_HEAD";
    if (value == 632) return "All.VFX_DUR_ARROW_IN_STERNUM";
    if (value == 636) return "All.VFX_DUR_ARROW_IN_TEMPLES";
    if (value == 550) return "All.VFX_DUR_AURA_BLUE";
    if (value == 562) return "All.VFX_DUR_AURA_BLUE_DARK";
    if (value == 563) return "All.VFX_DUR_AURA_BLUE_LIGHT";
    if (value == 555) return "All.VFX_DUR_AURA_BROWN";
    if (value == 267) return "All.VFX_DUR_AURA_COLD";
    if (value == 557) return "All.VFX_DUR_AURA_CYAN";
    if (value == 270) return "All.VFX_DUR_AURA_DISEASE";
    if (value == 291) return "All.VFX_DUR_AURA_DRAGON_FEAR";
    if (value == 268) return "All.VFX_DUR_AURA_FIRE";
    if (value == 549) return "All.VFX_DUR_AURA_GREEN";
    if (value == 558) return "All.VFX_DUR_AURA_GREEN_DARK";
    if (value == 559) return "All.VFX_DUR_AURA_GREEN_LIGHT";
    if (value == 551) return "All.VFX_DUR_AURA_MAGENTA";
    if (value == 271) return "All.VFX_DUR_AURA_ODD";
    if (value == 554) return "All.VFX_DUR_AURA_ORANGE";
    if (value == 269) return "All.VFX_DUR_AURA_POISON";
    if (value == 529) return "All.VFX_DUR_AURA_PULSE_BLUE_BLACK";
    if (value == 523) return "All.VFX_DUR_AURA_PULSE_BLUE_GREEN";
    if (value == 513) return "All.VFX_DUR_AURA_PULSE_BLUE_WHITE";
    if (value == 528) return "All.VFX_DUR_AURA_PULSE_BLUE_YELLOW";
    if (value == 536) return "All.VFX_DUR_AURA_PULSE_BROWN_BLACK";
    if (value == 519) return "All.VFX_DUR_AURA_PULSE_BROWN_WHITE";
    if (value == 534) return "All.VFX_DUR_AURA_PULSE_CYAN_BLACK";
    if (value == 539) return "All.VFX_DUR_AURA_PULSE_CYAN_BLUE";
    if (value == 538) return "All.VFX_DUR_AURA_PULSE_CYAN_GREEN";
    if (value == 540) return "All.VFX_DUR_AURA_PULSE_CYAN_RED";
    if (value == 517) return "All.VFX_DUR_AURA_PULSE_CYAN_WHITE";
    if (value == 541) return "All.VFX_DUR_AURA_PULSE_CYAN_YELLOW";
    if (value == 531) return "All.VFX_DUR_AURA_PULSE_GREEN_BLACK";
    if (value == 514) return "All.VFX_DUR_AURA_PULSE_GREEN_WHITE";
    if (value == 526) return "All.VFX_DUR_AURA_PULSE_GREEN_YELLOW";
    if (value == 522) return "All.VFX_DUR_AURA_PULSE_GREY_BLACK";
    if (value == 521) return "All.VFX_DUR_AURA_PULSE_GREY_WHITE";
    if (value == 533) return "All.VFX_DUR_AURA_PULSE_MAGENTA_BLACK";
    if (value == 542) return "All.VFX_DUR_AURA_PULSE_MAGENTA_BLUE";
    if (value == 544) return "All.VFX_DUR_AURA_PULSE_MAGENTA_GREEN";
    if (value == 543) return "All.VFX_DUR_AURA_PULSE_MAGENTA_RED";
    if (value == 516) return "All.VFX_DUR_AURA_PULSE_MAGENTA_WHITE";
    if (value == 545) return "All.VFX_DUR_AURA_PULSE_MAGENTA_YELLOW";
    if (value == 535) return "All.VFX_DUR_AURA_PULSE_ORANGE_BLACK";
    if (value == 518) return "All.VFX_DUR_AURA_PULSE_ORANGE_WHITE";
    if (value == 537) return "All.VFX_DUR_AURA_PULSE_PURPLE_BLACK";
    if (value == 520) return "All.VFX_DUR_AURA_PULSE_PURPLE_WHITE";
    if (value == 530) return "All.VFX_DUR_AURA_PULSE_RED_BLACK";
    if (value == 524) return "All.VFX_DUR_AURA_PULSE_RED_BLUE";
    if (value == 527) return "All.VFX_DUR_AURA_PULSE_RED_GREEN";
    if (value == 546) return "All.VFX_DUR_AURA_PULSE_RED_ORANGE";
    if (value == 512) return "All.VFX_DUR_AURA_PULSE_RED_WHITE";
    if (value == 525) return "All.VFX_DUR_AURA_PULSE_RED_YELLOW";
    if (value == 532) return "All.VFX_DUR_AURA_PULSE_YELLOW_BLACK";
    if (value == 547) return "All.VFX_DUR_AURA_PULSE_YELLOW_ORANGE";
    if (value == 515) return "All.VFX_DUR_AURA_PULSE_YELLOW_WHITE";
    if (value == 556) return "All.VFX_DUR_AURA_PURPLE";
    if (value == 548) return "All.VFX_DUR_AURA_RED";
    if (value == 560) return "All.VFX_DUR_AURA_RED_DARK";
    if (value == 561) return "All.VFX_DUR_AURA_RED_LIGHT";
    if (value == 272) return "All.VFX_DUR_AURA_SILENCE";
    if (value == 553) return "All.VFX_DUR_AURA_WHITE";
    if (value == 552) return "All.VFX_DUR_AURA_YELLOW";
    if (value == 564) return "All.VFX_DUR_AURA_YELLOW_DARK";
    if (value == 565) return "All.VFX_DUR_AURA_YELLOW_LIGHT";
    if (value == 277) return "All.VFX_DUR_BARD_SONG";
    if (value == 316) return "All.VFX_DUR_BIGBYS_CLENCHED_FIST";
    if (value == 317) return "All.VFX_DUR_BIGBYS_CRUSHING_HAND";
    if (value == 318) return "All.VFX_DUR_BIGBYS_GRASPING_HAND";
    if (value == 314) return "All.VFX_DUR_BIGBYS_INTERPOSING_HAND";
    if (value == 5) return "All.VFX_DUR_BLACKOUT";
    if (value == 247) return "All.VFX_DUR_BLIND";
    if (value == 242) return "All.VFX_DUR_BLINDVISION";
    if (value == 0) return "All.VFX_DUR_BLUR";
    if (value == 566) return "All.VFX_DUR_BUBBLES";
    if (value == 319) return "All.VFX_DUR_CALTROPS";
    if (value == 207) return "All.VFX_DUR_CESSATE_NEGATIVE";
    if (value == 205) return "All.VFX_DUR_CESSATE_NEUTRAL";
    if (value == 206) return "All.VFX_DUR_CESSATE_POSITIVE";
    if (value == 355) return "All.VFX_DUR_CUTSCENE_INVISIBILITY";
    if (value == 1) return "All.VFX_DUR_DARKNESS";
    if (value == 182) return "All.VFX_DUR_DARKVISION";
    if (value == 463) return "All.VFX_DUR_DEATH_ARMOR";
    if (value == 147) return "All.VFX_DUR_ELEMENTAL_SHIELD";
    if (value == 2) return "All.VFX_DUR_ENTANGLE";
    if (value == 10) return "All.VFX_DUR_ETHEREAL_VISAGE";
    if (value == 304) return "All.VFX_DUR_FLAG_BLUE";
    if (value == 305) return "All.VFX_DUR_FLAG_GOLD";
    if (value == 306) return "All.VFX_DUR_FLAG_GOLD_FIXED";
    if (value == 306) return "All.VFX_DUR_FLAG_PURPLE";
    if (value == 305) return "All.VFX_DUR_FLAG_PURPLE_FIXED";
    if (value == 303) return "All.VFX_DUR_FLAG_RED";
    if (value == 480) return "All.VFX_DUR_FLIES";
    if (value == 3) return "All.VFX_DUR_FREEDOM_OF_MOVEMENT";
    if (value == 352) return "All.VFX_DUR_FREEZE_ANIMATION";
    if (value == 240) return "All.VFX_DUR_GHOSTLY_PULSE";
    if (value == 9) return "All.VFX_DUR_GHOSTLY_VISAGE";
    if (value == 478) return "All.VFX_DUR_GHOSTLY_VISAGE_NO_SOUND";
    if (value == 425) return "All.VFX_DUR_GHOST_SMOKE";
    if (value == 479) return "All.VFX_DUR_GHOST_SMOKE_2";
    if (value == 424) return "All.VFX_DUR_GHOST_TRANSPARENT";
    if (value == 4) return "All.VFX_DUR_GLOBE_INVULNERABILITY";
    if (value == 220) return "All.VFX_DUR_GLOBE_MINOR";
    if (value == 410) return "All.VFX_DUR_GLOW_BLUE";
    if (value == 419) return "All.VFX_DUR_GLOW_BROWN";
    if (value == 415) return "All.VFX_DUR_GLOW_GREEN";
    if (value == 421) return "All.VFX_DUR_GLOW_GREY";
    if (value == 408) return "All.VFX_DUR_GLOW_LIGHT_BLUE";
    if (value == 420) return "All.VFX_DUR_GLOW_LIGHT_BROWN";
    if (value == 416) return "All.VFX_DUR_GLOW_LIGHT_GREEN";
    if (value == 418) return "All.VFX_DUR_GLOW_LIGHT_ORANGE";
    if (value == 423) return "All.VFX_DUR_GLOW_LIGHT_PURPLE";
    if (value == 412) return "All.VFX_DUR_GLOW_LIGHT_RED";
    if (value == 414) return "All.VFX_DUR_GLOW_LIGHT_YELLOW";
    if (value == 417) return "All.VFX_DUR_GLOW_ORANGE";
    if (value == 409) return "All.VFX_DUR_GLOW_PURPLE";
    if (value == 411) return "All.VFX_DUR_GLOW_RED";
    if (value == 422) return "All.VFX_DUR_GLOW_WHITE";
    if (value == 413) return "All.VFX_DUR_GLOW_YELLOW";
    if (value == 445) return "All.VFX_DUR_GLYPH_OF_WARDING";
    if (value == 465) return "All.VFX_DUR_ICESKIN";
    if (value == 474) return "All.VFX_DUR_INFERNO";
    if (value == 498) return "All.VFX_DUR_INFERNO_CHEST";
    if (value == 505) return "All.VFX_DUR_INFERNO_NO_SOUND";
    if (value == 6) return "All.VFX_DUR_INVISIBILITY";
    if (value == 403) return "All.VFX_DUR_IOUNSTONE";
    if (value == 500) return "All.VFX_DUR_IOUNSTONE_BLUE";
    if (value == 502) return "All.VFX_DUR_IOUNSTONE_GREEN";
    if (value == 499) return "All.VFX_DUR_IOUNSTONE_RED";
    if (value == 501) return "All.VFX_DUR_IOUNSTONE_YELLOW";
    if (value == 148) return "All.VFX_DUR_LIGHT";
    if (value == 154) return "All.VFX_DUR_LIGHT_BLUE_10";
    if (value == 155) return "All.VFX_DUR_LIGHT_BLUE_15";
    if (value == 156) return "All.VFX_DUR_LIGHT_BLUE_20";
    if (value == 153) return "All.VFX_DUR_LIGHT_BLUE_5";
    if (value == 178) return "All.VFX_DUR_LIGHT_GREY_10";
    if (value == 179) return "All.VFX_DUR_LIGHT_GREY_15";
    if (value == 180) return "All.VFX_DUR_LIGHT_GREY_20";
    if (value == 177) return "All.VFX_DUR_LIGHT_GREY_5";
    if (value == 170) return "All.VFX_DUR_LIGHT_ORANGE_10";
    if (value == 171) return "All.VFX_DUR_LIGHT_ORANGE_15";
    if (value == 172) return "All.VFX_DUR_LIGHT_ORANGE_20";
    if (value == 169) return "All.VFX_DUR_LIGHT_ORANGE_5";
    if (value == 162) return "All.VFX_DUR_LIGHT_PURPLE_10";
    if (value == 163) return "All.VFX_DUR_LIGHT_PURPLE_15";
    if (value == 164) return "All.VFX_DUR_LIGHT_PURPLE_20";
    if (value == 161) return "All.VFX_DUR_LIGHT_PURPLE_5";
    if (value == 166) return "All.VFX_DUR_LIGHT_RED_10";
    if (value == 167) return "All.VFX_DUR_LIGHT_RED_15";
    if (value == 168) return "All.VFX_DUR_LIGHT_RED_20";
    if (value == 165) return "All.VFX_DUR_LIGHT_RED_5";
    if (value == 174) return "All.VFX_DUR_LIGHT_WHITE_10";
    if (value == 175) return "All.VFX_DUR_LIGHT_WHITE_15";
    if (value == 176) return "All.VFX_DUR_LIGHT_WHITE_20";
    if (value == 173) return "All.VFX_DUR_LIGHT_WHITE_5";
    if (value == 158) return "All.VFX_DUR_LIGHT_YELLOW_10";
    if (value == 159) return "All.VFX_DUR_LIGHT_YELLOW_15";
    if (value == 160) return "All.VFX_DUR_LIGHT_YELLOW_20";
    if (value == 157) return "All.VFX_DUR_LIGHT_YELLOW_5";
    if (value == 243) return "All.VFX_DUR_LOWLIGHTVISION";
    if (value == 229) return "All.VFX_DUR_MAGICAL_SIGHT";
    if (value == 249) return "All.VFX_DUR_MAGIC_RESISTANCE";
    if (value == 208) return "All.VFX_DUR_MIND_AFFECTING_DISABLED";
    if (value == 209) return "All.VFX_DUR_MIND_AFFECTING_DOMINATED";
    if (value == 218) return "All.VFX_DUR_MIND_AFFECTING_FEAR";
    if (value == 7) return "All.VFX_DUR_MIND_AFFECTING_NEGATIVE";
    if (value == 8) return "All.VFX_DUR_MIND_AFFECTING_POSITIVE";
    if (value == 245) return "All.VFX_DUR_MIRV_ACID";
    if (value == 232) return "All.VFX_DUR_PARALYZED";
    if (value == 82 ) return "All.VFX_DUR_PARALYZE_HOLD";
    if (value == 628) return "All.VFX_DUR_PDK_FEAR";
    if (value == 351) return "All.VFX_DUR_PETRIFY";
    if (value == 321) return "All.VFX_DUR_PIXIEDUST";
    if (value == 224) return "All.VFX_DUR_PROTECTION_ELEMENTS";
    if (value == 228) return "All.VFX_DUR_PROTECTION_EVIL_MAJOR";
    if (value == 227) return "All.VFX_DUR_PROTECTION_EVIL_MINOR";
    if (value == 226) return "All.VFX_DUR_PROTECTION_GOOD_MAJOR";
    if (value == 225) return "All.VFX_DUR_PROTECTION_GOOD_MINOR";
    if (value == 11) return "All.VFX_DUR_PROT_BARKSKIN";
    if (value == 495) return "All.VFX_DUR_PROT_EPIC_ARMOR";
    if (value == 497) return "All.VFX_DUR_PROT_EPIC_ARMOR_2";
    if (value == 12) return "All.VFX_DUR_PROT_GREATER_STONESKIN";
    if (value == 13) return "All.VFX_DUR_PROT_PREMONITION";
    if (value == 14) return "All.VFX_DUR_PROT_SHADOW_ARMOR";
    if (value == 15) return "All.VFX_DUR_PROT_STONESKIN";
    if (value == 639) return "All.VFX_DUR_QUILL_IN_CHEST";
    if (value == 16) return "All.VFX_DUR_SANCTUARY";
    if (value == 320) return "All.VFX_DUR_SMOKE";
    if (value == 138) return "All.VFX_DUR_SPELLTURNING";
    if (value == 476) return "All.VFX_DUR_STONEHOLD";
    if (value == 346) return "All.VFX_DUR_TENTACLE";
    if (value == 244) return "All.VFX_DUR_ULTRAVISION";
    if (value == 17) return "All.VFX_DUR_WEB";
    if (value == 230) return "All.VFX_DUR_WEB_MASS";
    if (value == 596) return "All.VFX_EYES_CYN_DWARF_FEMALE";
    if (value == 595) return "All.VFX_EYES_CYN_DWARF_MALE";
    if (value == 598) return "All.VFX_EYES_CYN_ELF_FEMALE";
    if (value == 597) return "All.VFX_EYES_CYN_ELF_MALE";
    if (value == 600) return "All.VFX_EYES_CYN_GNOME_FEMALE";
    if (value == 599) return "All.VFX_EYES_CYN_GNOME_MALE";
    if (value == 602) return "All.VFX_EYES_CYN_HALFLING_FEMALE";
    if (value == 601) return "All.VFX_EYES_CYN_HALFLING_MALE";
    if (value == 604) return "All.VFX_EYES_CYN_HALFORC_FEMALE";
    if (value == 603) return "All.VFX_EYES_CYN_HALFORC_MALE";
    if (value == 594) return "All.VFX_EYES_CYN_HUMAN_FEMALE";
    if (value == 593) return "All.VFX_EYES_CYN_HUMAN_MALE";
    if (value == 605) return "All.VFX_EYES_CYN_TROGLODYTE";
    if (value == 570) return "All.VFX_EYES_GREEN_DWARF_FEMALE";
    if (value == 569) return "All.VFX_EYES_GREEN_DWARF_MALE";
    if (value == 572) return "All.VFX_EYES_GREEN_ELF_FEMALE";
    if (value == 571) return "All.VFX_EYES_GREEN_ELF_MALE";
    if (value == 574) return "All.VFX_EYES_GREEN_GNOME_FEMALE";
    if (value == 573) return "All.VFX_EYES_GREEN_GNOME_MALE";
    if (value == 568) return "All.VFX_EYES_GREEN_HALFELF_FEMALE";
    if (value == 567) return "All.VFX_EYES_GREEN_HALFELF_MALE";
    if (value == 576) return "All.VFX_EYES_GREEN_HALFLING_FEMALE";
    if (value == 575) return "All.VFX_EYES_GREEN_HALFLING_MALE";
    if (value == 578) return "All.VFX_EYES_GREEN_HALFORC_FEMALE";
    if (value == 577) return "All.VFX_EYES_GREEN_HALFORC_MALE";
    if (value == 568) return "All.VFX_EYES_GREEN_HUMAN_FEMALE";
    if (value == 567) return "All.VFX_EYES_GREEN_HUMAN_MALE";
    if (value == 579) return "All.VFX_EYES_GREEN_TROGLODYTE";
    if (value == 389) return "All.VFX_EYES_ORG_DWARF_FEMALE";
    if (value == 388) return "All.VFX_EYES_ORG_DWARF_MALE";
    if (value == 391) return "All.VFX_EYES_ORG_ELF_FEMALE";
    if (value == 390) return "All.VFX_EYES_ORG_ELF_MALE";
    if (value == 393) return "All.VFX_EYES_ORG_GNOME_FEMALE";
    if (value == 392) return "All.VFX_EYES_ORG_GNOME_MALE";
    if (value == 395) return "All.VFX_EYES_ORG_HALFLING_FEMALE";
    if (value == 394) return "All.VFX_EYES_ORG_HALFLING_MALE";
    if (value == 397) return "All.VFX_EYES_ORG_HALFORC_FEMALE";
    if (value == 396) return "All.VFX_EYES_ORG_HALFORC_MALE";
    if (value == 387) return "All.VFX_EYES_ORG_HUMAN_FEMALE";
    if (value == 386) return "All.VFX_EYES_ORG_HUMAN_MALE";
    if (value == 398) return "All.VFX_EYES_ORG_TROGLODYTE";
    if (value == 583) return "All.VFX_EYES_PUR_DWARF_FEMALE";
    if (value == 582) return "All.VFX_EYES_PUR_DWARF_MALE";
    if (value == 585) return "All.VFX_EYES_PUR_ELF_FEMALE";
    if (value == 584) return "All.VFX_EYES_PUR_ELF_MALE";
    if (value == 587) return "All.VFX_EYES_PUR_GNOME_FEMALE";
    if (value == 586) return "All.VFX_EYES_PUR_GNOME_MALE";
    if (value == 589) return "All.VFX_EYES_PUR_HALFLING_FEMALE";
    if (value == 588) return "All.VFX_EYES_PUR_HALFLING_MALE";
    if (value == 591) return "All.VFX_EYES_PUR_HALFORC_FEMALE";
    if (value == 590) return "All.VFX_EYES_PUR_HALFORC_MALE";
    if (value == 581) return "All.VFX_EYES_PUR_HUMAN_FEMALE";
    if (value == 580) return "All.VFX_EYES_PUR_HUMAN_MALE";
    if (value == 592) return "All.VFX_EYES_PUR_TROGLODYTE";
    if (value == 363) return "All.VFX_EYES_RED_FLAME_DWARF_FEMALE";
    if (value == 362) return "All.VFX_EYES_RED_FLAME_DWARF_MALE";
    if (value == 365) return "All.VFX_EYES_RED_FLAME_ELF_FEMALE";
    if (value == 364) return "All.VFX_EYES_RED_FLAME_ELF_MALE";
    if (value == 367) return "All.VFX_EYES_RED_FLAME_GNOME_FEMALE";
    if (value == 366) return "All.VFX_EYES_RED_FLAME_GNOME_MALE";
    if (value == 361) return "All.VFX_EYES_RED_FLAME_HALFELF_FEMALE";
    if (value == 360) return "All.VFX_EYES_RED_FLAME_HALFELF_MALE";
    if (value == 369) return "All.VFX_EYES_RED_FLAME_HALFLING_FEMALE";
    if (value == 368) return "All.VFX_EYES_RED_FLAME_HALFLING_MALE";
    if (value == 371) return "All.VFX_EYES_RED_FLAME_HALFORC_FEMALE";
    if (value == 370) return "All.VFX_EYES_RED_FLAME_HALFORC_MALE";
    if (value == 361) return "All.VFX_EYES_RED_FLAME_HUMAN_FEMALE";
    if (value == 360) return "All.VFX_EYES_RED_FLAME_HUMAN_MALE";
    if (value == 372) return "All.VFX_EYES_RED_FLAME_TROGLODYTE";
    if (value == 609) return "All.VFX_EYES_WHT_DWARF_FEMALE";
    if (value == 608) return "All.VFX_EYES_WHT_DWARF_MALE";
    if (value == 611) return "All.VFX_EYES_WHT_ELF_FEMALE";
    if (value == 610) return "All.VFX_EYES_WHT_ELF_MALE";
    if (value == 613) return "All.VFX_EYES_WHT_GNOME_FEMALE";
    if (value == 612) return "All.VFX_EYES_WHT_GNOME_MALE";
    if (value == 615) return "All.VFX_EYES_WHT_HALFLING_FEMALE";
    if (value == 614) return "All.VFX_EYES_WHT_HALFLING_MALE";
    if (value == 617) return "All.VFX_EYES_WHT_HALFORC_FEMALE";
    if (value == 616) return "All.VFX_EYES_WHT_HALFORC_MALE";
    if (value == 607) return "All.VFX_EYES_WHT_HUMAN_FEMALE";
    if (value == 606) return "All.VFX_EYES_WHT_HUMAN_MALE";
    if (value == 618) return "All.VFX_EYES_WHT_TROGLODYTE";
    if (value == 376) return "All.VFX_EYES_YEL_DWARF_FEMALE";
    if (value == 375) return "All.VFX_EYES_YEL_DWARF_MALE";
    if (value == 378) return "All.VFX_EYES_YEL_ELF_FEMALE";
    if (value == 377) return "All.VFX_EYES_YEL_ELF_MALE";
    if (value == 380) return "All.VFX_EYES_YEL_GNOME_FEMALE";
    if (value == 379) return "All.VFX_EYES_YEL_GNOME_MALE";
    if (value == 382) return "All.VFX_EYES_YEL_HALFLING_FEMALE";
    if (value == 381) return "All.VFX_EYES_YEL_HALFLING_MALE";
    if (value == 384) return "All.VFX_EYES_YEL_HALFORC_FEMALE";
    if (value == 383) return "All.VFX_EYES_YEL_HALFORC_MALE";
    if (value == 374) return "All.VFX_EYES_YEL_HUMAN_FEMALE";
    if (value == 373) return "All.VFX_EYES_YEL_HUMAN_MALE";
    if (value == 385) return "All.VFX_EYES_YEL_TROGLODYTE";
    if (value == 18) return "All.VFX_FNF_BLINDDEAF";
    if (value == 322) return "All.VFX_FNF_DECK";
    if (value == 475) return "All.VFX_FNF_DEMON_HAND";
    if (value == 19) return "All.VFX_FNF_DISPEL";
    if (value == 20) return "All.VFX_FNF_DISPEL_DISJUNCTION";
    if (value == 21 ) return "All.VFX_FNF_DISPEL_GREATER";
    if (value == 459) return "All.VFX_FNF_ELECTRIC_EXPLOSION";
    if (value == 22 ) return "All.VFX_FNF_FIREBALL";
    if (value == 23 ) return "All.VFX_FNF_FIRESTORM";
    if (value == 257) return "All.VFX_FNF_GAS_EXPLOSION_ACID";
    if (value == 258) return "All.VFX_FNF_GAS_EXPLOSION_EVIL";
    if (value == 260) return "All.VFX_FNF_GAS_EXPLOSION_FIRE";
    if (value == 261) return "All.VFX_FNF_GAS_EXPLOSION_GREASE";
    if (value == 262) return "All.VFX_FNF_GAS_EXPLOSION_MIND";
    if (value == 259) return "All.VFX_FNF_GAS_EXPLOSION_NATURE";
    if (value == 487) return "All.VFX_FNF_GREATER_RUIN";
    if (value == 241) return "All.VFX_FNF_HORRID_WILTING";
    if (value == 278) return "All.VFX_FNF_HOWL_MIND";
    if (value == 279) return "All.VFX_FNF_HOWL_ODD";
    if (value == 285) return "All.VFX_FNF_HOWL_WAR_CRY";
    if (value == 290) return "All.VFX_FNF_HOWL_WAR_CRY_FEMALE";
    if (value == 231) return "All.VFX_FNF_ICESTORM";
    if (value == 24 ) return "All.VFX_FNF_IMPLOSION";
    if (value == 185) return "All.VFX_FNF_LOS_EVIL_10";
    if (value == 186) return "All.VFX_FNF_LOS_EVIL_20";
    if (value == 187) return "All.VFX_FNF_LOS_EVIL_30";
    if (value == 188) return "All.VFX_FNF_LOS_HOLY_10";
    if (value == 189) return "All.VFX_FNF_LOS_HOLY_20";
    if (value == 190) return "All.VFX_FNF_LOS_HOLY_30";
    if (value == 191) return "All.VFX_FNF_LOS_NORMAL_10";
    if (value == 192) return "All.VFX_FNF_LOS_NORMAL_20";
    if (value == 193) return "All.VFX_FNF_LOS_NORMAL_30";
    if (value == 26 ) return "All.VFX_FNF_MASS_HEAL";
    if (value == 27 ) return "All.VFX_FNF_MASS_MIND_AFFECTING";
    if (value == 28 ) return "All.VFX_FNF_METEOR_SWARM";
    if (value == 477) return "All.VFX_FNF_MYSTICAL_EXPLOSION";
    if (value == 29 ) return "All.VFX_FNF_NATURES_BALANCE";
    if (value == 30 ) return "All.VFX_FNF_PWKILL";
    if (value == 31 ) return "All.VFX_FNF_PWSTUN";
    if (value == 287) return "All.VFX_FNF_SCREEN_BUMP";
    if (value == 286) return "All.VFX_FNF_SCREEN_SHAKE";
    if (value == 263) return "All.VFX_FNF_SMOKE_PUFF";
    if (value == 183) return "All.VFX_FNF_SOUND_BURST";
    if (value == 446) return "All.VFX_FNF_SOUND_BURST_SILENT";
    if (value == 151) return "All.VFX_FNF_STORM";
    if (value == 184) return "All.VFX_FNF_STRIKE_HOLY";
    if (value == 481) return "All.VFX_FNF_SUMMONDRAGON";
    if (value == 219) return "All.VFX_FNF_SUMMON_CELESTIAL";
    if (value == 496) return "All.VFX_FNF_SUMMON_EPIC_UNDEAD";
    if (value == 32 ) return "All.VFX_FNF_SUMMON_GATE";
    if (value == 33 ) return "All.VFX_FNF_SUMMON_MONSTER_1";
    if (value == 34 ) return "All.VFX_FNF_SUMMON_MONSTER_2";
    if (value == 35 ) return "All.VFX_FNF_SUMMON_MONSTER_3";
    if (value == 36 ) return "All.VFX_FNF_SUMMON_UNDEAD";
    if (value == 37 ) return "All.VFX_FNF_SUNBEAM";
    if (value == 473) return "All.VFX_FNF_SWINGING_BLADE";
    if (value == 38 ) return "All.VFX_FNF_TIME_STOP";
    if (value == 488) return "All.VFX_FNF_UNDEAD_DRAGON";
    if (value == 39 ) return "All.VFX_FNF_WAIL_O_BANSHEES";
    if (value == 40 ) return "All.VFX_FNF_WEIRD";
    if (value == 41 ) return "All.VFX_FNF_WORD";
    if (value == 43 ) return "All.VFX_IMP_ACID_L";
    if (value == 44 ) return "All.VFX_IMP_ACID_S";
    if (value == 42 ) return "All.VFX_IMP_AC_BONUS";
    if (value == 275) return "All.VFX_IMP_AURA_FEAR";
    if (value == 273) return "All.VFX_IMP_AURA_HOLY";
    if (value == 276) return "All.VFX_IMP_AURA_NEGATIVE_ENERGY";
    if (value == 274) return "All.VFX_IMP_AURA_UNEARTHLY";
    if (value == 315) return "All.VFX_IMP_BIGBYS_FORCEFUL_HAND";
    if (value == 46 ) return "All.VFX_IMP_BLIND_DEAF_M";
    if (value == 47 ) return "All.VFX_IMP_BREACH";
    if (value == 140) return "All.VFX_IMP_CHARM";
    if (value == 48 ) return "All.VFX_IMP_CONFUSION_S";
    if (value == 49 ) return "All.VFX_IMP_DAZED_S";
    if (value == 50 ) return "All.VFX_IMP_DEATH";
    if (value == 217) return "All.VFX_IMP_DEATH_L";
    if (value == 146) return "All.VFX_IMP_DEATH_WARD";
    if (value == 234) return "All.VFX_IMP_DESTRUCTION";
    if (value == 51 ) return "All.VFX_IMP_DISEASE_S";
    if (value == 52 ) return "All.VFX_IMP_DISPEL";
    if (value == 53 ) return "All.VFX_IMP_DISPEL_DISJUNCTION";
    if (value == 54 ) return "All.VFX_IMP_DIVINE_STRIKE_FIRE";
    if (value == 55 ) return "All.VFX_IMP_DIVINE_STRIKE_HOLY";
    if (value == 56 ) return "All.VFX_IMP_DOMINATE_S";
    if (value == 57 ) return "All.VFX_IMP_DOOM";
    if (value == 460) return "All.VFX_IMP_DUST_EXPLOSION";
    if (value == 152) return "All.VFX_IMP_ELEMENTAL_PROTECTION";
    if (value == 144) return "All.VFX_IMP_EVIL_HELP";
    if (value == 58 ) return "All.VFX_IMP_FEAR_S";
    if (value == 60 ) return "All.VFX_IMP_FLAME_M";
    if (value == 61 ) return "All.VFX_IMP_FLAME_S";
    if (value == 255) return "All.VFX_IMP_FORTITUDE_SAVING_THROW_USE";
    if (value == 62 ) return "All.VFX_IMP_FROST_L";
    if (value == 63 ) return "All.VFX_IMP_FROST_S";
    if (value == 251) return "All.VFX_IMP_GLOBE_USE";
    if (value == 145) return "All.VFX_IMP_GOOD_HELP";
    if (value == 64 ) return "All.VFX_IMP_GREASE";
    if (value == 246) return "All.VFX_IMP_HARM";
    if (value == 65 ) return "All.VFX_IMP_HASTE";
    if (value == 194) return "All.VFX_IMP_HEAD_ACID";
    if (value == 198) return "All.VFX_IMP_HEAD_COLD";
    if (value == 197) return "All.VFX_IMP_HEAD_ELECTRICITY";
    if (value == 203) return "All.VFX_IMP_HEAD_EVIL";
    if (value == 195) return "All.VFX_IMP_HEAD_FIRE";
    if (value == 201) return "All.VFX_IMP_HEAD_HEAL";
    if (value == 199) return "All.VFX_IMP_HEAD_HOLY";
    if (value == 202) return "All.VFX_IMP_HEAD_MIND";
    if (value == 200) return "All.VFX_IMP_HEAD_NATURE";
    if (value == 204) return "All.VFX_IMP_HEAD_ODD";
    if (value == 196) return "All.VFX_IMP_HEAD_SONIC";
    if (value == 66 ) return "All.VFX_IMP_HEALING_G";
    if (value == 67 ) return "All.VFX_IMP_HEALING_L";
    if (value == 68 ) return "All.VFX_IMP_HEALING_M";
    if (value == 69 ) return "All.VFX_IMP_HEALING_S";
    if (value == 70 ) return "All.VFX_IMP_HEALING_X";
    if (value == 71 ) return "All.VFX_IMP_HOLY_AID";
    if (value == 139) return "All.VFX_IMP_IMPROVE_ABILITY_SCORE";
    if (value == 72 ) return "All.VFX_IMP_KNOCK";
    if (value == 74 ) return "All.VFX_IMP_LIGHTNING_M";
    if (value == 75 ) return "All.VFX_IMP_LIGHTNING_S";
    if (value == 76 ) return "All.VFX_IMP_MAGBLUE";
    if (value == 141) return "All.VFX_IMP_MAGICAL_VISION";
    if (value == 149) return "All.VFX_IMP_MAGIC_PROTECTION";
    if (value == 250) return "All.VFX_IMP_MAGIC_RESISTANCE_USE";
    if (value == 181) return "All.VFX_IMP_MIRV";
    if (value == 503) return "All.VFX_IMP_MIRV_ELECTRIC";
    if (value == 233) return "All.VFX_IMP_MIRV_FLAME";
    if (value == 81 ) return "All.VFX_IMP_NEGATIVE_ENERGY";
    if (value == 670) return "All.VFX_IMP_NIGHTMARE_HEAD_HIT";
    if (value == 631) return "All.VFX_IMP_PDK_FINAL_STAND";
    if (value == 624) return "All.VFX_IMP_PDK_GENERIC_HEAD_HIT";
    if (value == 623) return "All.VFX_IMP_PDK_GENERIC_PULSE";
    if (value == 626) return "All.VFX_IMP_PDK_HEROIC_SHIELD";
    if (value == 627) return "All.VFX_IMP_PDK_INSPIRE_COURAGE";
    if (value == 630) return "All.VFX_IMP_PDK_OATH";
    if (value == 625) return "All.VFX_IMP_PDK_RALLYING_CRY";
    if (value == 629) return "All.VFX_IMP_PDK_WRATH";
    if (value == 83 ) return "All.VFX_IMP_POISON_L";
    if (value == 84 ) return "All.VFX_IMP_POISON_S";
    if (value == 85 ) return "All.VFX_IMP_POLYMORPH";
    if (value == 86 ) return "All.VFX_IMP_PULSE_COLD";
    if (value == 87 ) return "All.VFX_IMP_PULSE_FIRE";
    if (value == 88 ) return "All.VFX_IMP_PULSE_HOLY";
    if (value == 461) return "All.VFX_IMP_PULSE_HOLY_SILENT";
    if (value == 266) return "All.VFX_IMP_PULSE_NATURE";
    if (value == 89 ) return "All.VFX_IMP_PULSE_NEGATIVE";
    if (value == 264) return "All.VFX_IMP_PULSE_WATER";
    if (value == 265) return "All.VFX_IMP_PULSE_WIND";
    if (value == 90 ) return "All.VFX_IMP_RAISE_DEAD";
    if (value == 91 ) return "All.VFX_IMP_REDUCE_ABILITY_SCORE";
    if (value == 256) return "All.VFX_IMP_REFLEX_SAVE_THROW_USE";
    if (value == 92 ) return "All.VFX_IMP_REMOVE_CONDITION";
    if (value == 222) return "All.VFX_IMP_RESTORATION";
    if (value == 223) return "All.VFX_IMP_RESTORATION_GREATER";
    if (value == 221) return "All.VFX_IMP_RESTORATION_LESSER";
    if (value == 93 ) return "All.VFX_IMP_SILENCE";
    if (value == 94 ) return "All.VFX_IMP_SLEEP";
    if (value == 95 ) return "All.VFX_IMP_SLOW";
    if (value == 96 ) return "All.VFX_IMP_SONIC";
    if (value == 254) return "All.VFX_IMP_SPELL_MANTLE_USE";
    if (value == 253) return "All.VFX_IMP_SPIKE_TRAP";
    if (value == 644) return "All.VFX_IMP_STARBURST_GREEN";
    if (value == 645) return "All.VFX_IMP_STARBURST_RED";
    if (value == 97 ) return "All.VFX_IMP_STUN";
    if (value == 98 ) return "All.VFX_IMP_SUNSTRIKE";
    if (value == 150) return "All.VFX_IMP_SUPER_HEROISM";
    if (value == 407) return "All.VFX_IMP_TORNADO";
    if (value == 99 ) return "All.VFX_IMP_UNSUMMON";
    if (value == 486) return "All.VFX_IMP_WALLSPIKE";
    if (value == 252) return "All.VFX_IMP_WILL_SAVING_THROW_USE";
    if (value == -1) return "All.VFX_NONE";
    if (value == 0) return "All.VOICE_CHAT_ATTACK";
    if (value == 47) return "All.VOICE_CHAT_BADIDEA";
    if (value == 1) return "All.VOICE_CHAT_BATTLECRY1";
    if (value == 2) return "All.VOICE_CHAT_BATTLECRY2";
    if (value == 3) return "All.VOICE_CHAT_BATTLECRY3";
    if (value == 39) return "All.VOICE_CHAT_BORED";
    if (value == 29) return "All.VOICE_CHAT_CANDO";
    if (value == 30) return "All.VOICE_CHAT_CANTDO";
    if (value == 44) return "All.VOICE_CHAT_CHEER";
    if (value == 43) return "All.VOICE_CHAT_CUSS";
    if (value == 18) return "All.VOICE_CHAT_DEATH";
    if (value == 32) return "All.VOICE_CHAT_ENCUMBERED";
    if (value == 6) return "All.VOICE_CHAT_ENEMIES";
    if (value == 7) return "All.VOICE_CHAT_FLEE";
    if (value == 22) return "All.VOICE_CHAT_FOLLOWME";
    if (value == 11) return "All.VOICE_CHAT_GATTACK1";
    if (value == 12) return "All.VOICE_CHAT_GATTACK2";
    if (value == 13) return "All.VOICE_CHAT_GATTACK3";
    if (value == 40) return "All.VOICE_CHAT_GOODBYE";
    if (value == 46) return "All.VOICE_CHAT_GOODIDEA";
    if (value == 24) return "All.VOICE_CHAT_GROUP";
    if (value == 9) return "All.VOICE_CHAT_GUARDME";
    if (value == 4) return "All.VOICE_CHAT_HEALME";
    if (value == 34) return "All.VOICE_CHAT_HELLO";
    if (value == 5) return "All.VOICE_CHAT_HELP";
    if (value == 28) return "All.VOICE_CHAT_HIDE";
    if (value == 10) return "All.VOICE_CHAT_HOLD";
    if (value == 42) return "All.VOICE_CHAT_LAUGH";
    if (value == 23) return "All.VOICE_CHAT_LOOKHERE";
    if (value == 25) return "All.VOICE_CHAT_MOVEOVER";
    if (value == 17) return "All.VOICE_CHAT_NEARDEATH";
    if (value == 36) return "All.VOICE_CHAT_NO";
    if (value == 14) return "All.VOICE_CHAT_PAIN1";
    if (value == 15) return "All.VOICE_CHAT_PAIN2";
    if (value == 16) return "All.VOICE_CHAT_PAIN3";
    if (value == 26) return "All.VOICE_CHAT_PICKLOCK";
    if (value == 19) return "All.VOICE_CHAT_POISONED";
    if (value == 38) return "All.VOICE_CHAT_REST";
    if (value == 27) return "All.VOICE_CHAT_SEARCH";
    if (value == 33) return "All.VOICE_CHAT_SELECTED";
    if (value == 20) return "All.VOICE_CHAT_SPELLFAILED";
    if (value == 37) return "All.VOICE_CHAT_STOP";
    if (value == 45) return "All.VOICE_CHAT_TALKTOME";
    if (value == 31) return "All.VOICE_CHAT_TASKCOMPLETE";
    if (value == 8) return "All.VOICE_CHAT_TAUNT";
    if (value == 41) return "All.VOICE_CHAT_THANKS";
    if (value == 48) return "All.VOICE_CHAT_THREATEN";
    if (value == 21) return "All.VOICE_CHAT_WEAPONSUCKS";
    if (value == 35) return "All.VOICE_CHAT_YES";
    if (value == 0) return "All.WEATHER_CLEAR";
    if (value == -1) return "All.WEATHER_INVALID";
    if (value == 1) return "All.WEATHER_RAIN";
    if (value == 2) return "All.WEATHER_SNOW";
    if (value == -1) return "All.WEATHER_USE_AREA_SETTINGS";
    return "All.(not found: " + value + ")";
  }

  public static String nameOf(float value) {
    if (value == 0.0) return "All.DIRECTION_EAST";
    if (value == 90.0) return "All.DIRECTION_NORTH";
    if (value == 270.0) return "All.DIRECTION_SOUTH";
    if (value == 180.0) return "All.DIRECTION_WEST";
    if (value == 0.017) return "All.FADE_SPEED_FAST";
    if (value == 0.25) return "All.FADE_SPEED_FASTEST";
    if (value == 0.01) return "All.FADE_SPEED_MEDIUM";
    if (value == 0.005) return "All.FADE_SPEED_SLOW";
    if (value == 0.003) return "All.FADE_SPEED_SLOWEST";
    if (value == 3.141592) return "All.PI";
    if (value == 10.0f) return "All.RADIUS_SIZE_COLOSSAL";
    if (value == 8.33f) return "All.RADIUS_SIZE_GARGANTUAN";
    if (value == 6.67f) return "All.RADIUS_SIZE_HUGE";
    if (value == 5.0f) return "All.RADIUS_SIZE_LARGE";
    if (value == 3.33f) return "All.RADIUS_SIZE_MEDIUM";
    if (value == 1.67f) return "All.RADIUS_SIZE_SMALL";
    return "All.(not found: " + value + ")";
  }

  public static String nameOf(String value) {
    return "All.(not found: " + value + ")";
  }
}
