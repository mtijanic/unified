package org.nwnx.nwnx2.jvm.constants;

/**
 * This class contains all unique constants beginning with "ITEM".
 * Non-distinct keys are filtered; only the LAST appearing was
 * kept.
*/
public final class Item {
  private Item() {}

  public final static int APPR_ARMOR_COLOR_CLOTH1 = 2;
  public final static int APPR_ARMOR_COLOR_CLOTH2 = 3;
  public final static int APPR_ARMOR_COLOR_LEATHER1 = 0;
  public final static int APPR_ARMOR_COLOR_LEATHER2 = 1;
  public final static int APPR_ARMOR_COLOR_METAL1 = 4;
  public final static int APPR_ARMOR_COLOR_METAL2 = 5;
  public final static int APPR_ARMOR_MODEL_BELT = 8;
  public final static int APPR_ARMOR_MODEL_LBICEP = 13;
  public final static int APPR_ARMOR_MODEL_LFOOT = 1;
  public final static int APPR_ARMOR_MODEL_LFOREARM = 11;
  public final static int APPR_ARMOR_MODEL_LHAND = 17;
  public final static int APPR_ARMOR_MODEL_LSHIN = 3;
  public final static int APPR_ARMOR_MODEL_LSHOULDER = 15;
  public final static int APPR_ARMOR_MODEL_LTHIGH = 4;
  public final static int APPR_ARMOR_MODEL_NECK = 9;
  public final static int APPR_ARMOR_MODEL_PELVIS = 6;
  public final static int APPR_ARMOR_MODEL_RBICEP = 12;
  public final static int APPR_ARMOR_MODEL_RFOOT = 0;
  public final static int APPR_ARMOR_MODEL_RFOREARM = 10;
  public final static int APPR_ARMOR_MODEL_RHAND = 16;
  public final static int APPR_ARMOR_MODEL_ROBE = 18;
  public final static int APPR_ARMOR_MODEL_RSHIN = 2;
  public final static int APPR_ARMOR_MODEL_RSHOULDER = 14;
  public final static int APPR_ARMOR_MODEL_RTHIGH = 5;
  public final static int APPR_ARMOR_MODEL_TORSO = 7;
  public final static int APPR_ARMOR_NUM_COLORS = 6;
  public final static int APPR_ARMOR_NUM_MODELS = 19;
  public final static int APPR_NUM_TYPES = 5;
  public final static int APPR_TYPE_ARMOR_COLOR = 4;
  public final static int APPR_TYPE_ARMOR_MODEL = 3;
  public final static int APPR_TYPE_SIMPLE_MODEL = 0;
  public final static int APPR_TYPE_WEAPON_COLOR = 1;
  public final static int APPR_TYPE_WEAPON_MODEL = 2;
  public final static int APPR_WEAPON_COLOR_BOTTOM = 0;
  public final static int APPR_WEAPON_COLOR_MIDDLE = 1;
  public final static int APPR_WEAPON_COLOR_TOP = 2;
  public final static int APPR_WEAPON_MODEL_BOTTOM = 0;
  public final static int APPR_WEAPON_MODEL_MIDDLE = 1;
  public final static int APPR_WEAPON_MODEL_TOP = 2;
  public final static int PROPERTY_ABILITY_BONUS = 0 ;
  public final static int PROPERTY_AC_BONUS = 1 ;
  public final static int PROPERTY_AC_BONUS_VS_ALIGNMENT_GROUP = 2 ;
  public final static int PROPERTY_AC_BONUS_VS_DAMAGE_TYPE = 3 ;
  public final static int PROPERTY_AC_BONUS_VS_RACIAL_GROUP = 4 ;
  public final static int PROPERTY_AC_BONUS_VS_SPECIFIC_ALIGNMENT = 5 ;
  public final static int PROPERTY_ADDITIONAL = 87;
  public final static int PROPERTY_ARCANE_SPELL_FAILURE = 84;
  public final static int PROPERTY_ATTACK_BONUS = 56 ;
  public final static int PROPERTY_ATTACK_BONUS_VS_ALIGNMENT_GROUP = 57 ;
  public final static int PROPERTY_ATTACK_BONUS_VS_RACIAL_GROUP = 58 ;
  public final static int PROPERTY_ATTACK_BONUS_VS_SPECIFIC_ALIGNMENT = 59 ;
  public final static int PROPERTY_BASE_WEIGHT_REDUCTION = 11 ;
  public final static int PROPERTY_BONUS_FEAT = 12 ;
  public final static int PROPERTY_BONUS_SPELL_SLOT_OF_LEVEL_N = 13 ;
  public final static int PROPERTY_CAST_SPELL = 15 ;
  public final static int PROPERTY_DAMAGE_BONUS = 16 ;
  public final static int PROPERTY_DAMAGE_BONUS_VS_ALIGNMENT_GROUP = 17 ;
  public final static int PROPERTY_DAMAGE_BONUS_VS_RACIAL_GROUP = 18 ;
  public final static int PROPERTY_DAMAGE_BONUS_VS_SPECIFIC_ALIGNMENT = 19 ;
  public final static int PROPERTY_DAMAGE_REDUCTION = 22 ;
  public final static int PROPERTY_DAMAGE_RESISTANCE = 23 ;
  public final static int PROPERTY_DAMAGE_VULNERABILITY = 24 ;
  public final static int PROPERTY_DARKVISION = 26 ;
  public final static int PROPERTY_DECREASED_ABILITY_SCORE = 27 ;
  public final static int PROPERTY_DECREASED_AC = 28 ;
  public final static int PROPERTY_DECREASED_ATTACK_MODIFIER = 60 ;
  public final static int PROPERTY_DECREASED_DAMAGE = 21 ;
  public final static int PROPERTY_DECREASED_ENHANCEMENT_MODIFIER = 10 ;
  public final static int PROPERTY_DECREASED_SAVING_THROWS = 49 ;
  public final static int PROPERTY_DECREASED_SAVING_THROWS_SPECIFIC = 50 ;
  public final static int PROPERTY_DECREASED_SKILL_MODIFIER = 29 ;
  public final static int PROPERTY_ENHANCED_CONTAINER_REDUCED_WEIGHT = 32 ;
  public final static int PROPERTY_ENHANCEMENT_BONUS = 6 ;
  public final static int PROPERTY_ENHANCEMENT_BONUS_VS_ALIGNMENT_GROUP = 7 ;
  public final static int PROPERTY_ENHANCEMENT_BONUS_VS_RACIAL_GROUP = 8 ;
  public final static int PROPERTY_ENHANCEMENT_BONUS_VS_SPECIFIC_ALIGNEMENT = 9 ;
  public final static int PROPERTY_EXTRA_MELEE_DAMAGE_TYPE = 33 ;
  public final static int PROPERTY_EXTRA_RANGED_DAMAGE_TYPE = 34 ;
  public final static int PROPERTY_FREEDOM_OF_MOVEMENT = 75 ;
  public final static int PROPERTY_HASTE = 35 ;
  public final static int PROPERTY_HEALERS_KIT = 80;
  public final static int PROPERTY_HOLY_AVENGER = 36 ;
  public final static int PROPERTY_IMMUNITY_DAMAGE_TYPE = 20 ;
  public final static int PROPERTY_IMMUNITY_MISCELLANEOUS = 37 ;
  public final static int PROPERTY_IMMUNITY_SPECIFIC_SPELL = 53 ;
  public final static int PROPERTY_IMMUNITY_SPELLS_BY_LEVEL = 78 ;
  public final static int PROPERTY_IMMUNITY_SPELL_SCHOOL = 54 ;
  public final static int PROPERTY_IMPROVED_EVASION = 38 ;
  public final static int PROPERTY_KEEN = 43 ;
  public final static int PROPERTY_LIGHT = 44 ;
  public final static int PROPERTY_MASSIVE_CRITICALS = 74 ;
  public final static int PROPERTY_MATERIAL = 85;
  public final static int PROPERTY_MIGHTY = 45 ;
  public final static int PROPERTY_MIND_BLANK = 46 ;
  public final static int PROPERTY_MONSTER_DAMAGE = 77 ;
  public final static int PROPERTY_NO_DAMAGE = 47 ;
  public final static int PROPERTY_ONHITCASTSPELL = 82;
  public final static int PROPERTY_ON_HIT_PROPERTIES = 48 ;
  public final static int PROPERTY_ON_MONSTER_HIT = 72 ;
  public final static int PROPERTY_POISON = 76 ;
  public final static int PROPERTY_QUALITY = 86;
  public final static int PROPERTY_REGENERATION = 51 ;
  public final static int PROPERTY_REGENERATION_VAMPIRIC = 67 ;
  public final static int PROPERTY_SAVING_THROW_BONUS = 40 ;
  public final static int PROPERTY_SAVING_THROW_BONUS_SPECIFIC = 41 ;
  public final static int PROPERTY_SKILL_BONUS = 52 ;
  public final static int PROPERTY_SPECIAL_WALK = 79;
  public final static int PROPERTY_SPELL_RESISTANCE = 39 ;
  public final static int PROPERTY_THIEVES_TOOLS = 55 ;
  public final static int PROPERTY_TRAP = 70 ;
  public final static int PROPERTY_TRUE_SEEING = 71 ;
  public final static int PROPERTY_TURN_RESISTANCE = 73 ;
  public final static int PROPERTY_UNLIMITED_AMMUNITION = 61 ;
  public final static int PROPERTY_USE_LIMITATION_ALIGNMENT_GROUP = 62 ;
  public final static int PROPERTY_USE_LIMITATION_CLASS = 63 ;
  public final static int PROPERTY_USE_LIMITATION_RACIAL_TYPE = 64 ;
  public final static int PROPERTY_USE_LIMITATION_SPECIFIC_ALIGNMENT = 65 ;
  public final static int PROPERTY_USE_LIMITATION_TILESET = 66 ;
  public final static int PROPERTY_VISUALEFFECT = 83;
  public final static int PROPERTY_WEIGHT_INCREASE = 81;
  public final static int VISUAL_ACID = 0;
  public final static int VISUAL_COLD = 1;
  public final static int VISUAL_ELECTRICAL = 2;
  public final static int VISUAL_EVIL = 6;
  public final static int VISUAL_FIRE = 3;
  public final static int VISUAL_HOLY = 5;
  public final static int VISUAL_SONIC = 4;

  public static String nameOf(int value) {
    if (value == 2) return "Item.APPR_ARMOR_COLOR_CLOTH1";
    if (value == 3) return "Item.APPR_ARMOR_COLOR_CLOTH2";
    if (value == 0) return "Item.APPR_ARMOR_COLOR_LEATHER1";
    if (value == 1) return "Item.APPR_ARMOR_COLOR_LEATHER2";
    if (value == 4) return "Item.APPR_ARMOR_COLOR_METAL1";
    if (value == 5) return "Item.APPR_ARMOR_COLOR_METAL2";
    if (value == 8) return "Item.APPR_ARMOR_MODEL_BELT";
    if (value == 13) return "Item.APPR_ARMOR_MODEL_LBICEP";
    if (value == 1) return "Item.APPR_ARMOR_MODEL_LFOOT";
    if (value == 11) return "Item.APPR_ARMOR_MODEL_LFOREARM";
    if (value == 17) return "Item.APPR_ARMOR_MODEL_LHAND";
    if (value == 3) return "Item.APPR_ARMOR_MODEL_LSHIN";
    if (value == 15) return "Item.APPR_ARMOR_MODEL_LSHOULDER";
    if (value == 4) return "Item.APPR_ARMOR_MODEL_LTHIGH";
    if (value == 9) return "Item.APPR_ARMOR_MODEL_NECK";
    if (value == 6) return "Item.APPR_ARMOR_MODEL_PELVIS";
    if (value == 12) return "Item.APPR_ARMOR_MODEL_RBICEP";
    if (value == 0) return "Item.APPR_ARMOR_MODEL_RFOOT";
    if (value == 10) return "Item.APPR_ARMOR_MODEL_RFOREARM";
    if (value == 16) return "Item.APPR_ARMOR_MODEL_RHAND";
    if (value == 18) return "Item.APPR_ARMOR_MODEL_ROBE";
    if (value == 2) return "Item.APPR_ARMOR_MODEL_RSHIN";
    if (value == 14) return "Item.APPR_ARMOR_MODEL_RSHOULDER";
    if (value == 5) return "Item.APPR_ARMOR_MODEL_RTHIGH";
    if (value == 7) return "Item.APPR_ARMOR_MODEL_TORSO";
    if (value == 6) return "Item.APPR_ARMOR_NUM_COLORS";
    if (value == 19) return "Item.APPR_ARMOR_NUM_MODELS";
    if (value == 5) return "Item.APPR_NUM_TYPES";
    if (value == 4) return "Item.APPR_TYPE_ARMOR_COLOR";
    if (value == 3) return "Item.APPR_TYPE_ARMOR_MODEL";
    if (value == 0) return "Item.APPR_TYPE_SIMPLE_MODEL";
    if (value == 1) return "Item.APPR_TYPE_WEAPON_COLOR";
    if (value == 2) return "Item.APPR_TYPE_WEAPON_MODEL";
    if (value == 0) return "Item.APPR_WEAPON_COLOR_BOTTOM";
    if (value == 1) return "Item.APPR_WEAPON_COLOR_MIDDLE";
    if (value == 2) return "Item.APPR_WEAPON_COLOR_TOP";
    if (value == 0) return "Item.APPR_WEAPON_MODEL_BOTTOM";
    if (value == 1) return "Item.APPR_WEAPON_MODEL_MIDDLE";
    if (value == 2) return "Item.APPR_WEAPON_MODEL_TOP";
    if (value == 0 ) return "Item.PROPERTY_ABILITY_BONUS";
    if (value == 1 ) return "Item.PROPERTY_AC_BONUS";
    if (value == 2 ) return "Item.PROPERTY_AC_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 3 ) return "Item.PROPERTY_AC_BONUS_VS_DAMAGE_TYPE";
    if (value == 4 ) return "Item.PROPERTY_AC_BONUS_VS_RACIAL_GROUP";
    if (value == 5 ) return "Item.PROPERTY_AC_BONUS_VS_SPECIFIC_ALIGNMENT";
    if (value == 87) return "Item.PROPERTY_ADDITIONAL";
    if (value == 84) return "Item.PROPERTY_ARCANE_SPELL_FAILURE";
    if (value == 56 ) return "Item.PROPERTY_ATTACK_BONUS";
    if (value == 57 ) return "Item.PROPERTY_ATTACK_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 58 ) return "Item.PROPERTY_ATTACK_BONUS_VS_RACIAL_GROUP";
    if (value == 59 ) return "Item.PROPERTY_ATTACK_BONUS_VS_SPECIFIC_ALIGNMENT";
    if (value == 11 ) return "Item.PROPERTY_BASE_WEIGHT_REDUCTION";
    if (value == 12 ) return "Item.PROPERTY_BONUS_FEAT";
    if (value == 13 ) return "Item.PROPERTY_BONUS_SPELL_SLOT_OF_LEVEL_N";
    if (value == 15 ) return "Item.PROPERTY_CAST_SPELL";
    if (value == 16 ) return "Item.PROPERTY_DAMAGE_BONUS";
    if (value == 17 ) return "Item.PROPERTY_DAMAGE_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 18 ) return "Item.PROPERTY_DAMAGE_BONUS_VS_RACIAL_GROUP";
    if (value == 19 ) return "Item.PROPERTY_DAMAGE_BONUS_VS_SPECIFIC_ALIGNMENT";
    if (value == 22 ) return "Item.PROPERTY_DAMAGE_REDUCTION";
    if (value == 23 ) return "Item.PROPERTY_DAMAGE_RESISTANCE";
    if (value == 24 ) return "Item.PROPERTY_DAMAGE_VULNERABILITY";
    if (value == 26 ) return "Item.PROPERTY_DARKVISION";
    if (value == 27 ) return "Item.PROPERTY_DECREASED_ABILITY_SCORE";
    if (value == 28 ) return "Item.PROPERTY_DECREASED_AC";
    if (value == 60 ) return "Item.PROPERTY_DECREASED_ATTACK_MODIFIER";
    if (value == 21 ) return "Item.PROPERTY_DECREASED_DAMAGE";
    if (value == 10 ) return "Item.PROPERTY_DECREASED_ENHANCEMENT_MODIFIER";
    if (value == 49 ) return "Item.PROPERTY_DECREASED_SAVING_THROWS";
    if (value == 50 ) return "Item.PROPERTY_DECREASED_SAVING_THROWS_SPECIFIC";
    if (value == 29 ) return "Item.PROPERTY_DECREASED_SKILL_MODIFIER";
    if (value == 32 ) return "Item.PROPERTY_ENHANCED_CONTAINER_REDUCED_WEIGHT";
    if (value == 6 ) return "Item.PROPERTY_ENHANCEMENT_BONUS";
    if (value == 7 ) return "Item.PROPERTY_ENHANCEMENT_BONUS_VS_ALIGNMENT_GROUP";
    if (value == 8 ) return "Item.PROPERTY_ENHANCEMENT_BONUS_VS_RACIAL_GROUP";
    if (value == 9 ) return "Item.PROPERTY_ENHANCEMENT_BONUS_VS_SPECIFIC_ALIGNEMENT";
    if (value == 33 ) return "Item.PROPERTY_EXTRA_MELEE_DAMAGE_TYPE";
    if (value == 34 ) return "Item.PROPERTY_EXTRA_RANGED_DAMAGE_TYPE";
    if (value == 75 ) return "Item.PROPERTY_FREEDOM_OF_MOVEMENT";
    if (value == 35 ) return "Item.PROPERTY_HASTE";
    if (value == 80) return "Item.PROPERTY_HEALERS_KIT";
    if (value == 36 ) return "Item.PROPERTY_HOLY_AVENGER";
    if (value == 20 ) return "Item.PROPERTY_IMMUNITY_DAMAGE_TYPE";
    if (value == 37 ) return "Item.PROPERTY_IMMUNITY_MISCELLANEOUS";
    if (value == 53 ) return "Item.PROPERTY_IMMUNITY_SPECIFIC_SPELL";
    if (value == 78 ) return "Item.PROPERTY_IMMUNITY_SPELLS_BY_LEVEL";
    if (value == 54 ) return "Item.PROPERTY_IMMUNITY_SPELL_SCHOOL";
    if (value == 38 ) return "Item.PROPERTY_IMPROVED_EVASION";
    if (value == 43 ) return "Item.PROPERTY_KEEN";
    if (value == 44 ) return "Item.PROPERTY_LIGHT";
    if (value == 74 ) return "Item.PROPERTY_MASSIVE_CRITICALS";
    if (value == 85) return "Item.PROPERTY_MATERIAL";
    if (value == 45 ) return "Item.PROPERTY_MIGHTY";
    if (value == 46 ) return "Item.PROPERTY_MIND_BLANK";
    if (value == 77 ) return "Item.PROPERTY_MONSTER_DAMAGE";
    if (value == 47 ) return "Item.PROPERTY_NO_DAMAGE";
    if (value == 82) return "Item.PROPERTY_ONHITCASTSPELL";
    if (value == 48 ) return "Item.PROPERTY_ON_HIT_PROPERTIES";
    if (value == 72 ) return "Item.PROPERTY_ON_MONSTER_HIT";
    if (value == 76 ) return "Item.PROPERTY_POISON";
    if (value == 86) return "Item.PROPERTY_QUALITY";
    if (value == 51 ) return "Item.PROPERTY_REGENERATION";
    if (value == 67 ) return "Item.PROPERTY_REGENERATION_VAMPIRIC";
    if (value == 40 ) return "Item.PROPERTY_SAVING_THROW_BONUS";
    if (value == 41 ) return "Item.PROPERTY_SAVING_THROW_BONUS_SPECIFIC";
    if (value == 52 ) return "Item.PROPERTY_SKILL_BONUS";
    if (value == 79) return "Item.PROPERTY_SPECIAL_WALK";
    if (value == 39 ) return "Item.PROPERTY_SPELL_RESISTANCE";
    if (value == 55 ) return "Item.PROPERTY_THIEVES_TOOLS";
    if (value == 70 ) return "Item.PROPERTY_TRAP";
    if (value == 71 ) return "Item.PROPERTY_TRUE_SEEING";
    if (value == 73 ) return "Item.PROPERTY_TURN_RESISTANCE";
    if (value == 61 ) return "Item.PROPERTY_UNLIMITED_AMMUNITION";
    if (value == 62 ) return "Item.PROPERTY_USE_LIMITATION_ALIGNMENT_GROUP";
    if (value == 63 ) return "Item.PROPERTY_USE_LIMITATION_CLASS";
    if (value == 64 ) return "Item.PROPERTY_USE_LIMITATION_RACIAL_TYPE";
    if (value == 65 ) return "Item.PROPERTY_USE_LIMITATION_SPECIFIC_ALIGNMENT";
    if (value == 66 ) return "Item.PROPERTY_USE_LIMITATION_TILESET";
    if (value == 83) return "Item.PROPERTY_VISUALEFFECT";
    if (value == 81) return "Item.PROPERTY_WEIGHT_INCREASE";
    if (value == 0) return "Item.VISUAL_ACID";
    if (value == 1) return "Item.VISUAL_COLD";
    if (value == 2) return "Item.VISUAL_ELECTRICAL";
    if (value == 6) return "Item.VISUAL_EVIL";
    if (value == 3) return "Item.VISUAL_FIRE";
    if (value == 5) return "Item.VISUAL_HOLY";
    if (value == 4) return "Item.VISUAL_SONIC";
    return "Item.(not found: " + value + ")";
  }

  public static String nameOf(float value) {
    return "Item.(not found: " + value + ")";
  }

  public static String nameOf(String value) {
    return "Item.(not found: " + value + ")";
  }
}
