package org.nwnx.nwnx2.jvm.constants;

/**
 * This class contains all unique constants beginning with "VFX".
 * Non-distinct keys are filtered; only the LAST appearing was
 * kept.
*/
public final class Vfx {
  private Vfx() {}

  public final static int BEAM_BLACK = 485;
  public final static int BEAM_CHAIN = 484;
  public final static int BEAM_COLD = 211;
  public final static int BEAM_DISINTEGRATE = 447;
  public final static int BEAM_EVIL = 214;
  public final static int BEAM_FIRE = 210;
  public final static int BEAM_FIRE_LASH = 216;
  public final static int BEAM_FIRE_W = 482;
  public final static int BEAM_FIRE_W_SILENT = 483;
  public final static int BEAM_HOLY = 212;
  public final static int BEAM_LIGHTNING = 73 ;
  public final static int BEAM_MIND = 213;
  public final static int BEAM_ODD = 215;
  public final static int BEAM_SILENT_COLD = 309;
  public final static int BEAM_SILENT_EVIL = 312;
  public final static int BEAM_SILENT_FIRE = 308;
  public final static int BEAM_SILENT_HOLY = 310;
  public final static int BEAM_SILENT_LIGHTNING = 307;
  public final static int BEAM_SILENT_MIND = 311;
  public final static int BEAM_SILENT_ODD = 313;
  public final static int COM_BLOOD_CRT_GREEN = 116 ;
  public final static int COM_BLOOD_CRT_RED = 115 ;
  public final static int COM_BLOOD_CRT_WIMP = 108 ;
  public final static int COM_BLOOD_CRT_YELLOW = 117 ;
  public final static int COM_BLOOD_LRG_GREEN = 113 ;
  public final static int COM_BLOOD_LRG_RED = 112 ;
  public final static int COM_BLOOD_LRG_WIMP = 107 ;
  public final static int COM_BLOOD_LRG_YELLOW = 114 ;
  public final static int COM_BLOOD_REG_GREEN = 110 ;
  public final static int COM_BLOOD_REG_RED = 109 ;
  public final static int COM_BLOOD_REG_WIMP = 106 ;
  public final static int COM_BLOOD_REG_YELLOW = 111 ;
  public final static int COM_BLOOD_SPARK_LARGE = 239;
  public final static int COM_BLOOD_SPARK_MEDIUM = 238;
  public final static int COM_BLOOD_SPARK_SMALL = 237;
  public final static int COM_CHUNK_BONE_MEDIUM = 236;
  public final static int COM_CHUNK_GREEN_MEDIUM = 124 ;
  public final static int COM_CHUNK_GREEN_SMALL = 123 ;
  public final static int COM_CHUNK_RED_BALLISTA = 504;
  public final static int COM_CHUNK_RED_LARGE = 235;
  public final static int COM_CHUNK_RED_MEDIUM = 122 ;
  public final static int COM_CHUNK_RED_SMALL = 121 ;
  public final static int COM_CHUNK_STONE_MEDIUM = 354;
  public final static int COM_CHUNK_STONE_SMALL = 353;
  public final static int COM_CHUNK_YELLOW_MEDIUM = 126 ;
  public final static int COM_CHUNK_YELLOW_SMALL = 125 ;
  public final static int COM_HIT_ACID = 283;
  public final static int COM_HIT_DIVINE = 289;
  public final static int COM_HIT_ELECTRICAL = 282;
  public final static int COM_HIT_FIRE = 280;
  public final static int COM_HIT_FROST = 281;
  public final static int COM_HIT_NEGATIVE = 288;
  public final static int COM_HIT_SONIC = 284;
  public final static int COM_SPARKS_PARRY = 118 ;
  public final static int COM_SPECIAL_BLUE_RED = 100 ;
  public final static int COM_SPECIAL_PINK_ORANGE = 101 ;
  public final static int COM_SPECIAL_RED_ORANGE = 103 ;
  public final static int COM_SPECIAL_RED_WHITE = 102 ;
  public final static int COM_SPECIAL_WHITE_BLUE = 104 ;
  public final static int COM_SPECIAL_WHITE_ORANGE = 105 ;
  public final static int COM_UNLOAD_MODEL = 120 ;
  public final static int DUR_ANTI_LIGHT_10 = 248;
  public final static int DUR_ARROW_IN_BACK = 635;
  public final static int DUR_ARROW_IN_CHEST_LEFT = 633;
  public final static int DUR_ARROW_IN_CHEST_RIGHT = 634;
  public final static int DUR_ARROW_IN_FACE = 637;
  public final static int DUR_ARROW_IN_HEAD = 638;
  public final static int DUR_ARROW_IN_STERNUM = 632;
  public final static int DUR_ARROW_IN_TEMPLES = 636;
  public final static int DUR_AURA_BLUE = 550;
  public final static int DUR_AURA_BLUE_DARK = 562;
  public final static int DUR_AURA_BLUE_LIGHT = 563;
  public final static int DUR_AURA_BROWN = 555;
  public final static int DUR_AURA_COLD = 267;
  public final static int DUR_AURA_CYAN = 557;
  public final static int DUR_AURA_DISEASE = 270;
  public final static int DUR_AURA_DRAGON_FEAR = 291;
  public final static int DUR_AURA_FIRE = 268;
  public final static int DUR_AURA_GREEN = 549;
  public final static int DUR_AURA_GREEN_DARK = 558;
  public final static int DUR_AURA_GREEN_LIGHT = 559;
  public final static int DUR_AURA_MAGENTA = 551;
  public final static int DUR_AURA_ODD = 271;
  public final static int DUR_AURA_ORANGE = 554;
  public final static int DUR_AURA_POISON = 269;
  public final static int DUR_AURA_PULSE_BLUE_BLACK = 529;
  public final static int DUR_AURA_PULSE_BLUE_GREEN = 523;
  public final static int DUR_AURA_PULSE_BLUE_WHITE = 513;
  public final static int DUR_AURA_PULSE_BLUE_YELLOW = 528;
  public final static int DUR_AURA_PULSE_BROWN_BLACK = 536;
  public final static int DUR_AURA_PULSE_BROWN_WHITE = 519;
  public final static int DUR_AURA_PULSE_CYAN_BLACK = 534;
  public final static int DUR_AURA_PULSE_CYAN_BLUE = 539;
  public final static int DUR_AURA_PULSE_CYAN_GREEN = 538;
  public final static int DUR_AURA_PULSE_CYAN_RED = 540;
  public final static int DUR_AURA_PULSE_CYAN_WHITE = 517;
  public final static int DUR_AURA_PULSE_CYAN_YELLOW = 541;
  public final static int DUR_AURA_PULSE_GREEN_BLACK = 531;
  public final static int DUR_AURA_PULSE_GREEN_WHITE = 514;
  public final static int DUR_AURA_PULSE_GREEN_YELLOW = 526;
  public final static int DUR_AURA_PULSE_GREY_BLACK = 522;
  public final static int DUR_AURA_PULSE_GREY_WHITE = 521;
  public final static int DUR_AURA_PULSE_MAGENTA_BLACK = 533;
  public final static int DUR_AURA_PULSE_MAGENTA_BLUE = 542;
  public final static int DUR_AURA_PULSE_MAGENTA_GREEN = 544;
  public final static int DUR_AURA_PULSE_MAGENTA_RED = 543;
  public final static int DUR_AURA_PULSE_MAGENTA_WHITE = 516;
  public final static int DUR_AURA_PULSE_MAGENTA_YELLOW = 545;
  public final static int DUR_AURA_PULSE_ORANGE_BLACK = 535;
  public final static int DUR_AURA_PULSE_ORANGE_WHITE = 518;
  public final static int DUR_AURA_PULSE_PURPLE_BLACK = 537;
  public final static int DUR_AURA_PULSE_PURPLE_WHITE = 520;
  public final static int DUR_AURA_PULSE_RED_BLACK = 530;
  public final static int DUR_AURA_PULSE_RED_BLUE = 524;
  public final static int DUR_AURA_PULSE_RED_GREEN = 527;
  public final static int DUR_AURA_PULSE_RED_ORANGE = 546;
  public final static int DUR_AURA_PULSE_RED_WHITE = 512;
  public final static int DUR_AURA_PULSE_RED_YELLOW = 525;
  public final static int DUR_AURA_PULSE_YELLOW_BLACK = 532;
  public final static int DUR_AURA_PULSE_YELLOW_ORANGE = 547;
  public final static int DUR_AURA_PULSE_YELLOW_WHITE = 515;
  public final static int DUR_AURA_PURPLE = 556;
  public final static int DUR_AURA_RED = 548;
  public final static int DUR_AURA_RED_DARK = 560;
  public final static int DUR_AURA_RED_LIGHT = 561;
  public final static int DUR_AURA_SILENCE = 272;
  public final static int DUR_AURA_WHITE = 553;
  public final static int DUR_AURA_YELLOW = 552;
  public final static int DUR_AURA_YELLOW_DARK = 564;
  public final static int DUR_AURA_YELLOW_LIGHT = 565;
  public final static int DUR_BARD_SONG = 277;
  public final static int DUR_BIGBYS_CLENCHED_FIST = 316;
  public final static int DUR_BIGBYS_CRUSHING_HAND = 317;
  public final static int DUR_BIGBYS_GRASPING_HAND = 318;
  public final static int DUR_BIGBYS_INTERPOSING_HAND = 314;
  public final static int DUR_BLACKOUT = 5;
  public final static int DUR_BLIND = 247;
  public final static int DUR_BLINDVISION = 242;
  public final static int DUR_BLUR = 0;
  public final static int DUR_BUBBLES = 566;
  public final static int DUR_CALTROPS = 319;
  public final static int DUR_CESSATE_NEGATIVE = 207;
  public final static int DUR_CESSATE_NEUTRAL = 205;
  public final static int DUR_CESSATE_POSITIVE = 206;
  public final static int DUR_CUTSCENE_INVISIBILITY = 355;
  public final static int DUR_DARKNESS = 1;
  public final static int DUR_DARKVISION = 182;
  public final static int DUR_DEATH_ARMOR = 463;
  public final static int DUR_ELEMENTAL_SHIELD = 147;
  public final static int DUR_ENTANGLE = 2;
  public final static int DUR_ETHEREAL_VISAGE = 10;
  public final static int DUR_FLAG_BLUE = 304;
  public final static int DUR_FLAG_GOLD = 305;
  public final static int DUR_FLAG_GOLD_FIXED = 306;
  public final static int DUR_FLAG_PURPLE = 306;
  public final static int DUR_FLAG_PURPLE_FIXED = 305;
  public final static int DUR_FLAG_RED = 303;
  public final static int DUR_FLIES = 480;
  public final static int DUR_FREEDOM_OF_MOVEMENT = 3;
  public final static int DUR_FREEZE_ANIMATION = 352;
  public final static int DUR_GHOSTLY_PULSE = 240;
  public final static int DUR_GHOSTLY_VISAGE = 9;
  public final static int DUR_GHOSTLY_VISAGE_NO_SOUND = 478;
  public final static int DUR_GHOST_SMOKE = 425;
  public final static int DUR_GHOST_SMOKE_2 = 479;
  public final static int DUR_GHOST_TRANSPARENT = 424;
  public final static int DUR_GLOBE_INVULNERABILITY = 4;
  public final static int DUR_GLOBE_MINOR = 220;
  public final static int DUR_GLOW_BLUE = 410;
  public final static int DUR_GLOW_BROWN = 419;
  public final static int DUR_GLOW_GREEN = 415;
  public final static int DUR_GLOW_GREY = 421;
  public final static int DUR_GLOW_LIGHT_BLUE = 408;
  public final static int DUR_GLOW_LIGHT_BROWN = 420;
  public final static int DUR_GLOW_LIGHT_GREEN = 416;
  public final static int DUR_GLOW_LIGHT_ORANGE = 418;
  public final static int DUR_GLOW_LIGHT_PURPLE = 423;
  public final static int DUR_GLOW_LIGHT_RED = 412;
  public final static int DUR_GLOW_LIGHT_YELLOW = 414;
  public final static int DUR_GLOW_ORANGE = 417;
  public final static int DUR_GLOW_PURPLE = 409;
  public final static int DUR_GLOW_RED = 411;
  public final static int DUR_GLOW_WHITE = 422;
  public final static int DUR_GLOW_YELLOW = 413;
  public final static int DUR_GLYPH_OF_WARDING = 445;
  public final static int DUR_ICESKIN = 465;
  public final static int DUR_INFERNO = 474;
  public final static int DUR_INFERNO_CHEST = 498;
  public final static int DUR_INFERNO_NO_SOUND = 505;
  public final static int DUR_INVISIBILITY = 6;
  public final static int DUR_IOUNSTONE = 403;
  public final static int DUR_IOUNSTONE_BLUE = 500;
  public final static int DUR_IOUNSTONE_GREEN = 502;
  public final static int DUR_IOUNSTONE_RED = 499;
  public final static int DUR_IOUNSTONE_YELLOW = 501;
  public final static int DUR_LIGHT = 148;
  public final static int DUR_LIGHT_BLUE_10 = 154;
  public final static int DUR_LIGHT_BLUE_15 = 155;
  public final static int DUR_LIGHT_BLUE_20 = 156;
  public final static int DUR_LIGHT_BLUE_5 = 153;
  public final static int DUR_LIGHT_GREY_10 = 178;
  public final static int DUR_LIGHT_GREY_15 = 179;
  public final static int DUR_LIGHT_GREY_20 = 180;
  public final static int DUR_LIGHT_GREY_5 = 177;
  public final static int DUR_LIGHT_ORANGE_10 = 170;
  public final static int DUR_LIGHT_ORANGE_15 = 171;
  public final static int DUR_LIGHT_ORANGE_20 = 172;
  public final static int DUR_LIGHT_ORANGE_5 = 169;
  public final static int DUR_LIGHT_PURPLE_10 = 162;
  public final static int DUR_LIGHT_PURPLE_15 = 163;
  public final static int DUR_LIGHT_PURPLE_20 = 164;
  public final static int DUR_LIGHT_PURPLE_5 = 161;
  public final static int DUR_LIGHT_RED_10 = 166;
  public final static int DUR_LIGHT_RED_15 = 167;
  public final static int DUR_LIGHT_RED_20 = 168;
  public final static int DUR_LIGHT_RED_5 = 165;
  public final static int DUR_LIGHT_WHITE_10 = 174;
  public final static int DUR_LIGHT_WHITE_15 = 175;
  public final static int DUR_LIGHT_WHITE_20 = 176;
  public final static int DUR_LIGHT_WHITE_5 = 173;
  public final static int DUR_LIGHT_YELLOW_10 = 158;
  public final static int DUR_LIGHT_YELLOW_15 = 159;
  public final static int DUR_LIGHT_YELLOW_20 = 160;
  public final static int DUR_LIGHT_YELLOW_5 = 157;
  public final static int DUR_LOWLIGHTVISION = 243;
  public final static int DUR_MAGICAL_SIGHT = 229;
  public final static int DUR_MAGIC_RESISTANCE = 249;
  public final static int DUR_MIND_AFFECTING_DISABLED = 208;
  public final static int DUR_MIND_AFFECTING_DOMINATED = 209;
  public final static int DUR_MIND_AFFECTING_FEAR = 218;
  public final static int DUR_MIND_AFFECTING_NEGATIVE = 7;
  public final static int DUR_MIND_AFFECTING_POSITIVE = 8;
  public final static int DUR_MIRV_ACID = 245;
  public final static int DUR_PARALYZED = 232;
  public final static int DUR_PARALYZE_HOLD = 82 ;
  public final static int DUR_PDK_FEAR = 628;
  public final static int DUR_PETRIFY = 351;
  public final static int DUR_PIXIEDUST = 321;
  public final static int DUR_PROTECTION_ELEMENTS = 224;
  public final static int DUR_PROTECTION_EVIL_MAJOR = 228;
  public final static int DUR_PROTECTION_EVIL_MINOR = 227;
  public final static int DUR_PROTECTION_GOOD_MAJOR = 226;
  public final static int DUR_PROTECTION_GOOD_MINOR = 225;
  public final static int DUR_PROT_BARKSKIN = 11;
  public final static int DUR_PROT_EPIC_ARMOR = 495;
  public final static int DUR_PROT_EPIC_ARMOR_2 = 497;
  public final static int DUR_PROT_GREATER_STONESKIN = 12;
  public final static int DUR_PROT_PREMONITION = 13;
  public final static int DUR_PROT_SHADOW_ARMOR = 14;
  public final static int DUR_PROT_STONESKIN = 15;
  public final static int DUR_QUILL_IN_CHEST = 639;
  public final static int DUR_SANCTUARY = 16;
  public final static int DUR_SMOKE = 320;
  public final static int DUR_SPELLTURNING = 138;
  public final static int DUR_STONEHOLD = 476;
  public final static int DUR_TENTACLE = 346;
  public final static int DUR_ULTRAVISION = 244;
  public final static int DUR_WEB = 17;
  public final static int DUR_WEB_MASS = 230;
  public final static int EYES_CYN_DWARF_FEMALE = 596;
  public final static int EYES_CYN_DWARF_MALE = 595;
  public final static int EYES_CYN_ELF_FEMALE = 598;
  public final static int EYES_CYN_ELF_MALE = 597;
  public final static int EYES_CYN_GNOME_FEMALE = 600;
  public final static int EYES_CYN_GNOME_MALE = 599;
  public final static int EYES_CYN_HALFLING_FEMALE = 602;
  public final static int EYES_CYN_HALFLING_MALE = 601;
  public final static int EYES_CYN_HALFORC_FEMALE = 604;
  public final static int EYES_CYN_HALFORC_MALE = 603;
  public final static int EYES_CYN_HUMAN_FEMALE = 594;
  public final static int EYES_CYN_HUMAN_MALE = 593;
  public final static int EYES_CYN_TROGLODYTE = 605;
  public final static int EYES_GREEN_DWARF_FEMALE = 570;
  public final static int EYES_GREEN_DWARF_MALE = 569;
  public final static int EYES_GREEN_ELF_FEMALE = 572;
  public final static int EYES_GREEN_ELF_MALE = 571;
  public final static int EYES_GREEN_GNOME_FEMALE = 574;
  public final static int EYES_GREEN_GNOME_MALE = 573;
  public final static int EYES_GREEN_HALFELF_FEMALE = 568;
  public final static int EYES_GREEN_HALFELF_MALE = 567;
  public final static int EYES_GREEN_HALFLING_FEMALE = 576;
  public final static int EYES_GREEN_HALFLING_MALE = 575;
  public final static int EYES_GREEN_HALFORC_FEMALE = 578;
  public final static int EYES_GREEN_HALFORC_MALE = 577;
  public final static int EYES_GREEN_HUMAN_FEMALE = 568;
  public final static int EYES_GREEN_HUMAN_MALE = 567;
  public final static int EYES_GREEN_TROGLODYTE = 579;
  public final static int EYES_ORG_DWARF_FEMALE = 389;
  public final static int EYES_ORG_DWARF_MALE = 388;
  public final static int EYES_ORG_ELF_FEMALE = 391;
  public final static int EYES_ORG_ELF_MALE = 390;
  public final static int EYES_ORG_GNOME_FEMALE = 393;
  public final static int EYES_ORG_GNOME_MALE = 392;
  public final static int EYES_ORG_HALFLING_FEMALE = 395;
  public final static int EYES_ORG_HALFLING_MALE = 394;
  public final static int EYES_ORG_HALFORC_FEMALE = 397;
  public final static int EYES_ORG_HALFORC_MALE = 396;
  public final static int EYES_ORG_HUMAN_FEMALE = 387;
  public final static int EYES_ORG_HUMAN_MALE = 386;
  public final static int EYES_ORG_TROGLODYTE = 398;
  public final static int EYES_PUR_DWARF_FEMALE = 583;
  public final static int EYES_PUR_DWARF_MALE = 582;
  public final static int EYES_PUR_ELF_FEMALE = 585;
  public final static int EYES_PUR_ELF_MALE = 584;
  public final static int EYES_PUR_GNOME_FEMALE = 587;
  public final static int EYES_PUR_GNOME_MALE = 586;
  public final static int EYES_PUR_HALFLING_FEMALE = 589;
  public final static int EYES_PUR_HALFLING_MALE = 588;
  public final static int EYES_PUR_HALFORC_FEMALE = 591;
  public final static int EYES_PUR_HALFORC_MALE = 590;
  public final static int EYES_PUR_HUMAN_FEMALE = 581;
  public final static int EYES_PUR_HUMAN_MALE = 580;
  public final static int EYES_PUR_TROGLODYTE = 592;
  public final static int EYES_RED_FLAME_DWARF_FEMALE = 363;
  public final static int EYES_RED_FLAME_DWARF_MALE = 362;
  public final static int EYES_RED_FLAME_ELF_FEMALE = 365;
  public final static int EYES_RED_FLAME_ELF_MALE = 364;
  public final static int EYES_RED_FLAME_GNOME_FEMALE = 367;
  public final static int EYES_RED_FLAME_GNOME_MALE = 366;
  public final static int EYES_RED_FLAME_HALFELF_FEMALE = 361;
  public final static int EYES_RED_FLAME_HALFELF_MALE = 360;
  public final static int EYES_RED_FLAME_HALFLING_FEMALE = 369;
  public final static int EYES_RED_FLAME_HALFLING_MALE = 368;
  public final static int EYES_RED_FLAME_HALFORC_FEMALE = 371;
  public final static int EYES_RED_FLAME_HALFORC_MALE = 370;
  public final static int EYES_RED_FLAME_HUMAN_FEMALE = 361;
  public final static int EYES_RED_FLAME_HUMAN_MALE = 360;
  public final static int EYES_RED_FLAME_TROGLODYTE = 372;
  public final static int EYES_WHT_DWARF_FEMALE = 609;
  public final static int EYES_WHT_DWARF_MALE = 608;
  public final static int EYES_WHT_ELF_FEMALE = 611;
  public final static int EYES_WHT_ELF_MALE = 610;
  public final static int EYES_WHT_GNOME_FEMALE = 613;
  public final static int EYES_WHT_GNOME_MALE = 612;
  public final static int EYES_WHT_HALFLING_FEMALE = 615;
  public final static int EYES_WHT_HALFLING_MALE = 614;
  public final static int EYES_WHT_HALFORC_FEMALE = 617;
  public final static int EYES_WHT_HALFORC_MALE = 616;
  public final static int EYES_WHT_HUMAN_FEMALE = 607;
  public final static int EYES_WHT_HUMAN_MALE = 606;
  public final static int EYES_WHT_TROGLODYTE = 618;
  public final static int EYES_YEL_DWARF_FEMALE = 376;
  public final static int EYES_YEL_DWARF_MALE = 375;
  public final static int EYES_YEL_ELF_FEMALE = 378;
  public final static int EYES_YEL_ELF_MALE = 377;
  public final static int EYES_YEL_GNOME_FEMALE = 380;
  public final static int EYES_YEL_GNOME_MALE = 379;
  public final static int EYES_YEL_HALFLING_FEMALE = 382;
  public final static int EYES_YEL_HALFLING_MALE = 381;
  public final static int EYES_YEL_HALFORC_FEMALE = 384;
  public final static int EYES_YEL_HALFORC_MALE = 383;
  public final static int EYES_YEL_HUMAN_FEMALE = 374;
  public final static int EYES_YEL_HUMAN_MALE = 373;
  public final static int EYES_YEL_TROGLODYTE = 385;
  public final static int FNF_BLINDDEAF = 18;
  public final static int FNF_DECK = 322;
  public final static int FNF_DEMON_HAND = 475;
  public final static int FNF_DISPEL = 19;
  public final static int FNF_DISPEL_DISJUNCTION = 20;
  public final static int FNF_DISPEL_GREATER = 21 ;
  public final static int FNF_ELECTRIC_EXPLOSION = 459;
  public final static int FNF_FIREBALL = 22 ;
  public final static int FNF_FIRESTORM = 23 ;
  public final static int FNF_GAS_EXPLOSION_ACID = 257;
  public final static int FNF_GAS_EXPLOSION_EVIL = 258;
  public final static int FNF_GAS_EXPLOSION_FIRE = 260;
  public final static int FNF_GAS_EXPLOSION_GREASE = 261;
  public final static int FNF_GAS_EXPLOSION_MIND = 262;
  public final static int FNF_GAS_EXPLOSION_NATURE = 259;
  public final static int FNF_GREATER_RUIN = 487;
  public final static int FNF_HORRID_WILTING = 241;
  public final static int FNF_HOWL_MIND = 278;
  public final static int FNF_HOWL_ODD = 279;
  public final static int FNF_HOWL_WAR_CRY = 285;
  public final static int FNF_HOWL_WAR_CRY_FEMALE = 290;
  public final static int FNF_ICESTORM = 231;
  public final static int FNF_IMPLOSION = 24 ;
  public final static int FNF_LOS_EVIL_10 = 185;
  public final static int FNF_LOS_EVIL_20 = 186;
  public final static int FNF_LOS_EVIL_30 = 187;
  public final static int FNF_LOS_HOLY_10 = 188;
  public final static int FNF_LOS_HOLY_20 = 189;
  public final static int FNF_LOS_HOLY_30 = 190;
  public final static int FNF_LOS_NORMAL_10 = 191;
  public final static int FNF_LOS_NORMAL_20 = 192;
  public final static int FNF_LOS_NORMAL_30 = 193;
  public final static int FNF_MASS_HEAL = 26 ;
  public final static int FNF_MASS_MIND_AFFECTING = 27 ;
  public final static int FNF_METEOR_SWARM = 28 ;
  public final static int FNF_MYSTICAL_EXPLOSION = 477;
  public final static int FNF_NATURES_BALANCE = 29 ;
  public final static int FNF_PWKILL = 30 ;
  public final static int FNF_PWSTUN = 31 ;
  public final static int FNF_SCREEN_BUMP = 287;
  public final static int FNF_SCREEN_SHAKE = 286;
  public final static int FNF_SMOKE_PUFF = 263;
  public final static int FNF_SOUND_BURST = 183;
  public final static int FNF_SOUND_BURST_SILENT = 446;
  public final static int FNF_STORM = 151;
  public final static int FNF_STRIKE_HOLY = 184;
  public final static int FNF_SUMMONDRAGON = 481;
  public final static int FNF_SUMMON_CELESTIAL = 219;
  public final static int FNF_SUMMON_EPIC_UNDEAD = 496;
  public final static int FNF_SUMMON_GATE = 32 ;
  public final static int FNF_SUMMON_MONSTER_1 = 33 ;
  public final static int FNF_SUMMON_MONSTER_2 = 34 ;
  public final static int FNF_SUMMON_MONSTER_3 = 35 ;
  public final static int FNF_SUMMON_UNDEAD = 36 ;
  public final static int FNF_SUNBEAM = 37 ;
  public final static int FNF_SWINGING_BLADE = 473;
  public final static int FNF_TIME_STOP = 38 ;
  public final static int FNF_UNDEAD_DRAGON = 488;
  public final static int FNF_WAIL_O_BANSHEES = 39 ;
  public final static int FNF_WEIRD = 40 ;
  public final static int FNF_WORD = 41 ;
  public final static int IMP_ACID_L = 43 ;
  public final static int IMP_ACID_S = 44 ;
  public final static int IMP_AC_BONUS = 42 ;
  public final static int IMP_AURA_FEAR = 275;
  public final static int IMP_AURA_HOLY = 273;
  public final static int IMP_AURA_NEGATIVE_ENERGY = 276;
  public final static int IMP_AURA_UNEARTHLY = 274;
  public final static int IMP_BIGBYS_FORCEFUL_HAND = 315;
  public final static int IMP_BLIND_DEAF_M = 46 ;
  public final static int IMP_BREACH = 47 ;
  public final static int IMP_CHARM = 140;
  public final static int IMP_CONFUSION_S = 48 ;
  public final static int IMP_DAZED_S = 49 ;
  public final static int IMP_DEATH = 50 ;
  public final static int IMP_DEATH_L = 217;
  public final static int IMP_DEATH_WARD = 146;
  public final static int IMP_DESTRUCTION = 234;
  public final static int IMP_DISEASE_S = 51 ;
  public final static int IMP_DISPEL = 52 ;
  public final static int IMP_DISPEL_DISJUNCTION = 53 ;
  public final static int IMP_DIVINE_STRIKE_FIRE = 54 ;
  public final static int IMP_DIVINE_STRIKE_HOLY = 55 ;
  public final static int IMP_DOMINATE_S = 56 ;
  public final static int IMP_DOOM = 57 ;
  public final static int IMP_DUST_EXPLOSION = 460;
  public final static int IMP_ELEMENTAL_PROTECTION = 152;
  public final static int IMP_EVIL_HELP = 144;
  public final static int IMP_FEAR_S = 58 ;
  public final static int IMP_FLAME_M = 60 ;
  public final static int IMP_FLAME_S = 61 ;
  public final static int IMP_FORTITUDE_SAVING_THROW_USE = 255;
  public final static int IMP_FROST_L = 62 ;
  public final static int IMP_FROST_S = 63 ;
  public final static int IMP_GLOBE_USE = 251;
  public final static int IMP_GOOD_HELP = 145;
  public final static int IMP_GREASE = 64 ;
  public final static int IMP_HARM = 246;
  public final static int IMP_HASTE = 65 ;
  public final static int IMP_HEAD_ACID = 194;
  public final static int IMP_HEAD_COLD = 198;
  public final static int IMP_HEAD_ELECTRICITY = 197;
  public final static int IMP_HEAD_EVIL = 203;
  public final static int IMP_HEAD_FIRE = 195;
  public final static int IMP_HEAD_HEAL = 201;
  public final static int IMP_HEAD_HOLY = 199;
  public final static int IMP_HEAD_MIND = 202;
  public final static int IMP_HEAD_NATURE = 200;
  public final static int IMP_HEAD_ODD = 204;
  public final static int IMP_HEAD_SONIC = 196;
  public final static int IMP_HEALING_G = 66 ;
  public final static int IMP_HEALING_L = 67 ;
  public final static int IMP_HEALING_M = 68 ;
  public final static int IMP_HEALING_S = 69 ;
  public final static int IMP_HEALING_X = 70 ;
  public final static int IMP_HOLY_AID = 71 ;
  public final static int IMP_IMPROVE_ABILITY_SCORE = 139;
  public final static int IMP_KNOCK = 72 ;
  public final static int IMP_LIGHTNING_M = 74 ;
  public final static int IMP_LIGHTNING_S = 75 ;
  public final static int IMP_MAGBLUE = 76 ;
  public final static int IMP_MAGICAL_VISION = 141;
  public final static int IMP_MAGIC_PROTECTION = 149;
  public final static int IMP_MAGIC_RESISTANCE_USE = 250;
  public final static int IMP_MIRV = 181;
  public final static int IMP_MIRV_ELECTRIC = 503;
  public final static int IMP_MIRV_FLAME = 233;
  public final static int IMP_NEGATIVE_ENERGY = 81 ;
  public final static int IMP_NIGHTMARE_HEAD_HIT = 670;
  public final static int IMP_PDK_FINAL_STAND = 631;
  public final static int IMP_PDK_GENERIC_HEAD_HIT = 624;
  public final static int IMP_PDK_GENERIC_PULSE = 623;
  public final static int IMP_PDK_HEROIC_SHIELD = 626;
  public final static int IMP_PDK_INSPIRE_COURAGE = 627;
  public final static int IMP_PDK_OATH = 630;
  public final static int IMP_PDK_RALLYING_CRY = 625;
  public final static int IMP_PDK_WRATH = 629;
  public final static int IMP_POISON_L = 83 ;
  public final static int IMP_POISON_S = 84 ;
  public final static int IMP_POLYMORPH = 85 ;
  public final static int IMP_PULSE_COLD = 86 ;
  public final static int IMP_PULSE_FIRE = 87 ;
  public final static int IMP_PULSE_HOLY = 88 ;
  public final static int IMP_PULSE_HOLY_SILENT = 461;
  public final static int IMP_PULSE_NATURE = 266;
  public final static int IMP_PULSE_NEGATIVE = 89 ;
  public final static int IMP_PULSE_WATER = 264;
  public final static int IMP_PULSE_WIND = 265;
  public final static int IMP_RAISE_DEAD = 90 ;
  public final static int IMP_REDUCE_ABILITY_SCORE = 91 ;
  public final static int IMP_REFLEX_SAVE_THROW_USE = 256;
  public final static int IMP_REMOVE_CONDITION = 92 ;
  public final static int IMP_RESTORATION = 222;
  public final static int IMP_RESTORATION_GREATER = 223;
  public final static int IMP_RESTORATION_LESSER = 221;
  public final static int IMP_SILENCE = 93 ;
  public final static int IMP_SLEEP = 94 ;
  public final static int IMP_SLOW = 95 ;
  public final static int IMP_SONIC = 96 ;
  public final static int IMP_SPELL_MANTLE_USE = 254;
  public final static int IMP_SPIKE_TRAP = 253;
  public final static int IMP_STARBURST_GREEN = 644;
  public final static int IMP_STARBURST_RED = 645;
  public final static int IMP_STUN = 97 ;
  public final static int IMP_SUNSTRIKE = 98 ;
  public final static int IMP_SUPER_HEROISM = 150;
  public final static int IMP_TORNADO = 407;
  public final static int IMP_UNSUMMON = 99 ;
  public final static int IMP_WALLSPIKE = 486;
  public final static int IMP_WILL_SAVING_THROW_USE = 252;
  public final static int NONE = -1;

  public static String nameOf(int value) {
    if (value == 485) return "Vfx.BEAM_BLACK";
    if (value == 484) return "Vfx.BEAM_CHAIN";
    if (value == 211) return "Vfx.BEAM_COLD";
    if (value == 447) return "Vfx.BEAM_DISINTEGRATE";
    if (value == 214) return "Vfx.BEAM_EVIL";
    if (value == 210) return "Vfx.BEAM_FIRE";
    if (value == 216) return "Vfx.BEAM_FIRE_LASH";
    if (value == 482) return "Vfx.BEAM_FIRE_W";
    if (value == 483) return "Vfx.BEAM_FIRE_W_SILENT";
    if (value == 212) return "Vfx.BEAM_HOLY";
    if (value == 73 ) return "Vfx.BEAM_LIGHTNING";
    if (value == 213) return "Vfx.BEAM_MIND";
    if (value == 215) return "Vfx.BEAM_ODD";
    if (value == 309) return "Vfx.BEAM_SILENT_COLD";
    if (value == 312) return "Vfx.BEAM_SILENT_EVIL";
    if (value == 308) return "Vfx.BEAM_SILENT_FIRE";
    if (value == 310) return "Vfx.BEAM_SILENT_HOLY";
    if (value == 307) return "Vfx.BEAM_SILENT_LIGHTNING";
    if (value == 311) return "Vfx.BEAM_SILENT_MIND";
    if (value == 313) return "Vfx.BEAM_SILENT_ODD";
    if (value == 116 ) return "Vfx.COM_BLOOD_CRT_GREEN";
    if (value == 115 ) return "Vfx.COM_BLOOD_CRT_RED";
    if (value == 108 ) return "Vfx.COM_BLOOD_CRT_WIMP";
    if (value == 117 ) return "Vfx.COM_BLOOD_CRT_YELLOW";
    if (value == 113 ) return "Vfx.COM_BLOOD_LRG_GREEN";
    if (value == 112 ) return "Vfx.COM_BLOOD_LRG_RED";
    if (value == 107 ) return "Vfx.COM_BLOOD_LRG_WIMP";
    if (value == 114 ) return "Vfx.COM_BLOOD_LRG_YELLOW";
    if (value == 110 ) return "Vfx.COM_BLOOD_REG_GREEN";
    if (value == 109 ) return "Vfx.COM_BLOOD_REG_RED";
    if (value == 106 ) return "Vfx.COM_BLOOD_REG_WIMP";
    if (value == 111 ) return "Vfx.COM_BLOOD_REG_YELLOW";
    if (value == 239) return "Vfx.COM_BLOOD_SPARK_LARGE";
    if (value == 238) return "Vfx.COM_BLOOD_SPARK_MEDIUM";
    if (value == 237) return "Vfx.COM_BLOOD_SPARK_SMALL";
    if (value == 236) return "Vfx.COM_CHUNK_BONE_MEDIUM";
    if (value == 124 ) return "Vfx.COM_CHUNK_GREEN_MEDIUM";
    if (value == 123 ) return "Vfx.COM_CHUNK_GREEN_SMALL";
    if (value == 504) return "Vfx.COM_CHUNK_RED_BALLISTA";
    if (value == 235) return "Vfx.COM_CHUNK_RED_LARGE";
    if (value == 122 ) return "Vfx.COM_CHUNK_RED_MEDIUM";
    if (value == 121 ) return "Vfx.COM_CHUNK_RED_SMALL";
    if (value == 354) return "Vfx.COM_CHUNK_STONE_MEDIUM";
    if (value == 353) return "Vfx.COM_CHUNK_STONE_SMALL";
    if (value == 126 ) return "Vfx.COM_CHUNK_YELLOW_MEDIUM";
    if (value == 125 ) return "Vfx.COM_CHUNK_YELLOW_SMALL";
    if (value == 283) return "Vfx.COM_HIT_ACID";
    if (value == 289) return "Vfx.COM_HIT_DIVINE";
    if (value == 282) return "Vfx.COM_HIT_ELECTRICAL";
    if (value == 280) return "Vfx.COM_HIT_FIRE";
    if (value == 281) return "Vfx.COM_HIT_FROST";
    if (value == 288) return "Vfx.COM_HIT_NEGATIVE";
    if (value == 284) return "Vfx.COM_HIT_SONIC";
    if (value == 118 ) return "Vfx.COM_SPARKS_PARRY";
    if (value == 100 ) return "Vfx.COM_SPECIAL_BLUE_RED";
    if (value == 101 ) return "Vfx.COM_SPECIAL_PINK_ORANGE";
    if (value == 103 ) return "Vfx.COM_SPECIAL_RED_ORANGE";
    if (value == 102 ) return "Vfx.COM_SPECIAL_RED_WHITE";
    if (value == 104 ) return "Vfx.COM_SPECIAL_WHITE_BLUE";
    if (value == 105 ) return "Vfx.COM_SPECIAL_WHITE_ORANGE";
    if (value == 120 ) return "Vfx.COM_UNLOAD_MODEL";
    if (value == 248) return "Vfx.DUR_ANTI_LIGHT_10";
    if (value == 635) return "Vfx.DUR_ARROW_IN_BACK";
    if (value == 633) return "Vfx.DUR_ARROW_IN_CHEST_LEFT";
    if (value == 634) return "Vfx.DUR_ARROW_IN_CHEST_RIGHT";
    if (value == 637) return "Vfx.DUR_ARROW_IN_FACE";
    if (value == 638) return "Vfx.DUR_ARROW_IN_HEAD";
    if (value == 632) return "Vfx.DUR_ARROW_IN_STERNUM";
    if (value == 636) return "Vfx.DUR_ARROW_IN_TEMPLES";
    if (value == 550) return "Vfx.DUR_AURA_BLUE";
    if (value == 562) return "Vfx.DUR_AURA_BLUE_DARK";
    if (value == 563) return "Vfx.DUR_AURA_BLUE_LIGHT";
    if (value == 555) return "Vfx.DUR_AURA_BROWN";
    if (value == 267) return "Vfx.DUR_AURA_COLD";
    if (value == 557) return "Vfx.DUR_AURA_CYAN";
    if (value == 270) return "Vfx.DUR_AURA_DISEASE";
    if (value == 291) return "Vfx.DUR_AURA_DRAGON_FEAR";
    if (value == 268) return "Vfx.DUR_AURA_FIRE";
    if (value == 549) return "Vfx.DUR_AURA_GREEN";
    if (value == 558) return "Vfx.DUR_AURA_GREEN_DARK";
    if (value == 559) return "Vfx.DUR_AURA_GREEN_LIGHT";
    if (value == 551) return "Vfx.DUR_AURA_MAGENTA";
    if (value == 271) return "Vfx.DUR_AURA_ODD";
    if (value == 554) return "Vfx.DUR_AURA_ORANGE";
    if (value == 269) return "Vfx.DUR_AURA_POISON";
    if (value == 529) return "Vfx.DUR_AURA_PULSE_BLUE_BLACK";
    if (value == 523) return "Vfx.DUR_AURA_PULSE_BLUE_GREEN";
    if (value == 513) return "Vfx.DUR_AURA_PULSE_BLUE_WHITE";
    if (value == 528) return "Vfx.DUR_AURA_PULSE_BLUE_YELLOW";
    if (value == 536) return "Vfx.DUR_AURA_PULSE_BROWN_BLACK";
    if (value == 519) return "Vfx.DUR_AURA_PULSE_BROWN_WHITE";
    if (value == 534) return "Vfx.DUR_AURA_PULSE_CYAN_BLACK";
    if (value == 539) return "Vfx.DUR_AURA_PULSE_CYAN_BLUE";
    if (value == 538) return "Vfx.DUR_AURA_PULSE_CYAN_GREEN";
    if (value == 540) return "Vfx.DUR_AURA_PULSE_CYAN_RED";
    if (value == 517) return "Vfx.DUR_AURA_PULSE_CYAN_WHITE";
    if (value == 541) return "Vfx.DUR_AURA_PULSE_CYAN_YELLOW";
    if (value == 531) return "Vfx.DUR_AURA_PULSE_GREEN_BLACK";
    if (value == 514) return "Vfx.DUR_AURA_PULSE_GREEN_WHITE";
    if (value == 526) return "Vfx.DUR_AURA_PULSE_GREEN_YELLOW";
    if (value == 522) return "Vfx.DUR_AURA_PULSE_GREY_BLACK";
    if (value == 521) return "Vfx.DUR_AURA_PULSE_GREY_WHITE";
    if (value == 533) return "Vfx.DUR_AURA_PULSE_MAGENTA_BLACK";
    if (value == 542) return "Vfx.DUR_AURA_PULSE_MAGENTA_BLUE";
    if (value == 544) return "Vfx.DUR_AURA_PULSE_MAGENTA_GREEN";
    if (value == 543) return "Vfx.DUR_AURA_PULSE_MAGENTA_RED";
    if (value == 516) return "Vfx.DUR_AURA_PULSE_MAGENTA_WHITE";
    if (value == 545) return "Vfx.DUR_AURA_PULSE_MAGENTA_YELLOW";
    if (value == 535) return "Vfx.DUR_AURA_PULSE_ORANGE_BLACK";
    if (value == 518) return "Vfx.DUR_AURA_PULSE_ORANGE_WHITE";
    if (value == 537) return "Vfx.DUR_AURA_PULSE_PURPLE_BLACK";
    if (value == 520) return "Vfx.DUR_AURA_PULSE_PURPLE_WHITE";
    if (value == 530) return "Vfx.DUR_AURA_PULSE_RED_BLACK";
    if (value == 524) return "Vfx.DUR_AURA_PULSE_RED_BLUE";
    if (value == 527) return "Vfx.DUR_AURA_PULSE_RED_GREEN";
    if (value == 546) return "Vfx.DUR_AURA_PULSE_RED_ORANGE";
    if (value == 512) return "Vfx.DUR_AURA_PULSE_RED_WHITE";
    if (value == 525) return "Vfx.DUR_AURA_PULSE_RED_YELLOW";
    if (value == 532) return "Vfx.DUR_AURA_PULSE_YELLOW_BLACK";
    if (value == 547) return "Vfx.DUR_AURA_PULSE_YELLOW_ORANGE";
    if (value == 515) return "Vfx.DUR_AURA_PULSE_YELLOW_WHITE";
    if (value == 556) return "Vfx.DUR_AURA_PURPLE";
    if (value == 548) return "Vfx.DUR_AURA_RED";
    if (value == 560) return "Vfx.DUR_AURA_RED_DARK";
    if (value == 561) return "Vfx.DUR_AURA_RED_LIGHT";
    if (value == 272) return "Vfx.DUR_AURA_SILENCE";
    if (value == 553) return "Vfx.DUR_AURA_WHITE";
    if (value == 552) return "Vfx.DUR_AURA_YELLOW";
    if (value == 564) return "Vfx.DUR_AURA_YELLOW_DARK";
    if (value == 565) return "Vfx.DUR_AURA_YELLOW_LIGHT";
    if (value == 277) return "Vfx.DUR_BARD_SONG";
    if (value == 316) return "Vfx.DUR_BIGBYS_CLENCHED_FIST";
    if (value == 317) return "Vfx.DUR_BIGBYS_CRUSHING_HAND";
    if (value == 318) return "Vfx.DUR_BIGBYS_GRASPING_HAND";
    if (value == 314) return "Vfx.DUR_BIGBYS_INTERPOSING_HAND";
    if (value == 5) return "Vfx.DUR_BLACKOUT";
    if (value == 247) return "Vfx.DUR_BLIND";
    if (value == 242) return "Vfx.DUR_BLINDVISION";
    if (value == 0) return "Vfx.DUR_BLUR";
    if (value == 566) return "Vfx.DUR_BUBBLES";
    if (value == 319) return "Vfx.DUR_CALTROPS";
    if (value == 207) return "Vfx.DUR_CESSATE_NEGATIVE";
    if (value == 205) return "Vfx.DUR_CESSATE_NEUTRAL";
    if (value == 206) return "Vfx.DUR_CESSATE_POSITIVE";
    if (value == 355) return "Vfx.DUR_CUTSCENE_INVISIBILITY";
    if (value == 1) return "Vfx.DUR_DARKNESS";
    if (value == 182) return "Vfx.DUR_DARKVISION";
    if (value == 463) return "Vfx.DUR_DEATH_ARMOR";
    if (value == 147) return "Vfx.DUR_ELEMENTAL_SHIELD";
    if (value == 2) return "Vfx.DUR_ENTANGLE";
    if (value == 10) return "Vfx.DUR_ETHEREAL_VISAGE";
    if (value == 304) return "Vfx.DUR_FLAG_BLUE";
    if (value == 305) return "Vfx.DUR_FLAG_GOLD";
    if (value == 306) return "Vfx.DUR_FLAG_GOLD_FIXED";
    if (value == 306) return "Vfx.DUR_FLAG_PURPLE";
    if (value == 305) return "Vfx.DUR_FLAG_PURPLE_FIXED";
    if (value == 303) return "Vfx.DUR_FLAG_RED";
    if (value == 480) return "Vfx.DUR_FLIES";
    if (value == 3) return "Vfx.DUR_FREEDOM_OF_MOVEMENT";
    if (value == 352) return "Vfx.DUR_FREEZE_ANIMATION";
    if (value == 240) return "Vfx.DUR_GHOSTLY_PULSE";
    if (value == 9) return "Vfx.DUR_GHOSTLY_VISAGE";
    if (value == 478) return "Vfx.DUR_GHOSTLY_VISAGE_NO_SOUND";
    if (value == 425) return "Vfx.DUR_GHOST_SMOKE";
    if (value == 479) return "Vfx.DUR_GHOST_SMOKE_2";
    if (value == 424) return "Vfx.DUR_GHOST_TRANSPARENT";
    if (value == 4) return "Vfx.DUR_GLOBE_INVULNERABILITY";
    if (value == 220) return "Vfx.DUR_GLOBE_MINOR";
    if (value == 410) return "Vfx.DUR_GLOW_BLUE";
    if (value == 419) return "Vfx.DUR_GLOW_BROWN";
    if (value == 415) return "Vfx.DUR_GLOW_GREEN";
    if (value == 421) return "Vfx.DUR_GLOW_GREY";
    if (value == 408) return "Vfx.DUR_GLOW_LIGHT_BLUE";
    if (value == 420) return "Vfx.DUR_GLOW_LIGHT_BROWN";
    if (value == 416) return "Vfx.DUR_GLOW_LIGHT_GREEN";
    if (value == 418) return "Vfx.DUR_GLOW_LIGHT_ORANGE";
    if (value == 423) return "Vfx.DUR_GLOW_LIGHT_PURPLE";
    if (value == 412) return "Vfx.DUR_GLOW_LIGHT_RED";
    if (value == 414) return "Vfx.DUR_GLOW_LIGHT_YELLOW";
    if (value == 417) return "Vfx.DUR_GLOW_ORANGE";
    if (value == 409) return "Vfx.DUR_GLOW_PURPLE";
    if (value == 411) return "Vfx.DUR_GLOW_RED";
    if (value == 422) return "Vfx.DUR_GLOW_WHITE";
    if (value == 413) return "Vfx.DUR_GLOW_YELLOW";
    if (value == 445) return "Vfx.DUR_GLYPH_OF_WARDING";
    if (value == 465) return "Vfx.DUR_ICESKIN";
    if (value == 474) return "Vfx.DUR_INFERNO";
    if (value == 498) return "Vfx.DUR_INFERNO_CHEST";
    if (value == 505) return "Vfx.DUR_INFERNO_NO_SOUND";
    if (value == 6) return "Vfx.DUR_INVISIBILITY";
    if (value == 403) return "Vfx.DUR_IOUNSTONE";
    if (value == 500) return "Vfx.DUR_IOUNSTONE_BLUE";
    if (value == 502) return "Vfx.DUR_IOUNSTONE_GREEN";
    if (value == 499) return "Vfx.DUR_IOUNSTONE_RED";
    if (value == 501) return "Vfx.DUR_IOUNSTONE_YELLOW";
    if (value == 148) return "Vfx.DUR_LIGHT";
    if (value == 154) return "Vfx.DUR_LIGHT_BLUE_10";
    if (value == 155) return "Vfx.DUR_LIGHT_BLUE_15";
    if (value == 156) return "Vfx.DUR_LIGHT_BLUE_20";
    if (value == 153) return "Vfx.DUR_LIGHT_BLUE_5";
    if (value == 178) return "Vfx.DUR_LIGHT_GREY_10";
    if (value == 179) return "Vfx.DUR_LIGHT_GREY_15";
    if (value == 180) return "Vfx.DUR_LIGHT_GREY_20";
    if (value == 177) return "Vfx.DUR_LIGHT_GREY_5";
    if (value == 170) return "Vfx.DUR_LIGHT_ORANGE_10";
    if (value == 171) return "Vfx.DUR_LIGHT_ORANGE_15";
    if (value == 172) return "Vfx.DUR_LIGHT_ORANGE_20";
    if (value == 169) return "Vfx.DUR_LIGHT_ORANGE_5";
    if (value == 162) return "Vfx.DUR_LIGHT_PURPLE_10";
    if (value == 163) return "Vfx.DUR_LIGHT_PURPLE_15";
    if (value == 164) return "Vfx.DUR_LIGHT_PURPLE_20";
    if (value == 161) return "Vfx.DUR_LIGHT_PURPLE_5";
    if (value == 166) return "Vfx.DUR_LIGHT_RED_10";
    if (value == 167) return "Vfx.DUR_LIGHT_RED_15";
    if (value == 168) return "Vfx.DUR_LIGHT_RED_20";
    if (value == 165) return "Vfx.DUR_LIGHT_RED_5";
    if (value == 174) return "Vfx.DUR_LIGHT_WHITE_10";
    if (value == 175) return "Vfx.DUR_LIGHT_WHITE_15";
    if (value == 176) return "Vfx.DUR_LIGHT_WHITE_20";
    if (value == 173) return "Vfx.DUR_LIGHT_WHITE_5";
    if (value == 158) return "Vfx.DUR_LIGHT_YELLOW_10";
    if (value == 159) return "Vfx.DUR_LIGHT_YELLOW_15";
    if (value == 160) return "Vfx.DUR_LIGHT_YELLOW_20";
    if (value == 157) return "Vfx.DUR_LIGHT_YELLOW_5";
    if (value == 243) return "Vfx.DUR_LOWLIGHTVISION";
    if (value == 229) return "Vfx.DUR_MAGICAL_SIGHT";
    if (value == 249) return "Vfx.DUR_MAGIC_RESISTANCE";
    if (value == 208) return "Vfx.DUR_MIND_AFFECTING_DISABLED";
    if (value == 209) return "Vfx.DUR_MIND_AFFECTING_DOMINATED";
    if (value == 218) return "Vfx.DUR_MIND_AFFECTING_FEAR";
    if (value == 7) return "Vfx.DUR_MIND_AFFECTING_NEGATIVE";
    if (value == 8) return "Vfx.DUR_MIND_AFFECTING_POSITIVE";
    if (value == 245) return "Vfx.DUR_MIRV_ACID";
    if (value == 232) return "Vfx.DUR_PARALYZED";
    if (value == 82 ) return "Vfx.DUR_PARALYZE_HOLD";
    if (value == 628) return "Vfx.DUR_PDK_FEAR";
    if (value == 351) return "Vfx.DUR_PETRIFY";
    if (value == 321) return "Vfx.DUR_PIXIEDUST";
    if (value == 224) return "Vfx.DUR_PROTECTION_ELEMENTS";
    if (value == 228) return "Vfx.DUR_PROTECTION_EVIL_MAJOR";
    if (value == 227) return "Vfx.DUR_PROTECTION_EVIL_MINOR";
    if (value == 226) return "Vfx.DUR_PROTECTION_GOOD_MAJOR";
    if (value == 225) return "Vfx.DUR_PROTECTION_GOOD_MINOR";
    if (value == 11) return "Vfx.DUR_PROT_BARKSKIN";
    if (value == 495) return "Vfx.DUR_PROT_EPIC_ARMOR";
    if (value == 497) return "Vfx.DUR_PROT_EPIC_ARMOR_2";
    if (value == 12) return "Vfx.DUR_PROT_GREATER_STONESKIN";
    if (value == 13) return "Vfx.DUR_PROT_PREMONITION";
    if (value == 14) return "Vfx.DUR_PROT_SHADOW_ARMOR";
    if (value == 15) return "Vfx.DUR_PROT_STONESKIN";
    if (value == 639) return "Vfx.DUR_QUILL_IN_CHEST";
    if (value == 16) return "Vfx.DUR_SANCTUARY";
    if (value == 320) return "Vfx.DUR_SMOKE";
    if (value == 138) return "Vfx.DUR_SPELLTURNING";
    if (value == 476) return "Vfx.DUR_STONEHOLD";
    if (value == 346) return "Vfx.DUR_TENTACLE";
    if (value == 244) return "Vfx.DUR_ULTRAVISION";
    if (value == 17) return "Vfx.DUR_WEB";
    if (value == 230) return "Vfx.DUR_WEB_MASS";
    if (value == 596) return "Vfx.EYES_CYN_DWARF_FEMALE";
    if (value == 595) return "Vfx.EYES_CYN_DWARF_MALE";
    if (value == 598) return "Vfx.EYES_CYN_ELF_FEMALE";
    if (value == 597) return "Vfx.EYES_CYN_ELF_MALE";
    if (value == 600) return "Vfx.EYES_CYN_GNOME_FEMALE";
    if (value == 599) return "Vfx.EYES_CYN_GNOME_MALE";
    if (value == 602) return "Vfx.EYES_CYN_HALFLING_FEMALE";
    if (value == 601) return "Vfx.EYES_CYN_HALFLING_MALE";
    if (value == 604) return "Vfx.EYES_CYN_HALFORC_FEMALE";
    if (value == 603) return "Vfx.EYES_CYN_HALFORC_MALE";
    if (value == 594) return "Vfx.EYES_CYN_HUMAN_FEMALE";
    if (value == 593) return "Vfx.EYES_CYN_HUMAN_MALE";
    if (value == 605) return "Vfx.EYES_CYN_TROGLODYTE";
    if (value == 570) return "Vfx.EYES_GREEN_DWARF_FEMALE";
    if (value == 569) return "Vfx.EYES_GREEN_DWARF_MALE";
    if (value == 572) return "Vfx.EYES_GREEN_ELF_FEMALE";
    if (value == 571) return "Vfx.EYES_GREEN_ELF_MALE";
    if (value == 574) return "Vfx.EYES_GREEN_GNOME_FEMALE";
    if (value == 573) return "Vfx.EYES_GREEN_GNOME_MALE";
    if (value == 568) return "Vfx.EYES_GREEN_HALFELF_FEMALE";
    if (value == 567) return "Vfx.EYES_GREEN_HALFELF_MALE";
    if (value == 576) return "Vfx.EYES_GREEN_HALFLING_FEMALE";
    if (value == 575) return "Vfx.EYES_GREEN_HALFLING_MALE";
    if (value == 578) return "Vfx.EYES_GREEN_HALFORC_FEMALE";
    if (value == 577) return "Vfx.EYES_GREEN_HALFORC_MALE";
    if (value == 568) return "Vfx.EYES_GREEN_HUMAN_FEMALE";
    if (value == 567) return "Vfx.EYES_GREEN_HUMAN_MALE";
    if (value == 579) return "Vfx.EYES_GREEN_TROGLODYTE";
    if (value == 389) return "Vfx.EYES_ORG_DWARF_FEMALE";
    if (value == 388) return "Vfx.EYES_ORG_DWARF_MALE";
    if (value == 391) return "Vfx.EYES_ORG_ELF_FEMALE";
    if (value == 390) return "Vfx.EYES_ORG_ELF_MALE";
    if (value == 393) return "Vfx.EYES_ORG_GNOME_FEMALE";
    if (value == 392) return "Vfx.EYES_ORG_GNOME_MALE";
    if (value == 395) return "Vfx.EYES_ORG_HALFLING_FEMALE";
    if (value == 394) return "Vfx.EYES_ORG_HALFLING_MALE";
    if (value == 397) return "Vfx.EYES_ORG_HALFORC_FEMALE";
    if (value == 396) return "Vfx.EYES_ORG_HALFORC_MALE";
    if (value == 387) return "Vfx.EYES_ORG_HUMAN_FEMALE";
    if (value == 386) return "Vfx.EYES_ORG_HUMAN_MALE";
    if (value == 398) return "Vfx.EYES_ORG_TROGLODYTE";
    if (value == 583) return "Vfx.EYES_PUR_DWARF_FEMALE";
    if (value == 582) return "Vfx.EYES_PUR_DWARF_MALE";
    if (value == 585) return "Vfx.EYES_PUR_ELF_FEMALE";
    if (value == 584) return "Vfx.EYES_PUR_ELF_MALE";
    if (value == 587) return "Vfx.EYES_PUR_GNOME_FEMALE";
    if (value == 586) return "Vfx.EYES_PUR_GNOME_MALE";
    if (value == 589) return "Vfx.EYES_PUR_HALFLING_FEMALE";
    if (value == 588) return "Vfx.EYES_PUR_HALFLING_MALE";
    if (value == 591) return "Vfx.EYES_PUR_HALFORC_FEMALE";
    if (value == 590) return "Vfx.EYES_PUR_HALFORC_MALE";
    if (value == 581) return "Vfx.EYES_PUR_HUMAN_FEMALE";
    if (value == 580) return "Vfx.EYES_PUR_HUMAN_MALE";
    if (value == 592) return "Vfx.EYES_PUR_TROGLODYTE";
    if (value == 363) return "Vfx.EYES_RED_FLAME_DWARF_FEMALE";
    if (value == 362) return "Vfx.EYES_RED_FLAME_DWARF_MALE";
    if (value == 365) return "Vfx.EYES_RED_FLAME_ELF_FEMALE";
    if (value == 364) return "Vfx.EYES_RED_FLAME_ELF_MALE";
    if (value == 367) return "Vfx.EYES_RED_FLAME_GNOME_FEMALE";
    if (value == 366) return "Vfx.EYES_RED_FLAME_GNOME_MALE";
    if (value == 361) return "Vfx.EYES_RED_FLAME_HALFELF_FEMALE";
    if (value == 360) return "Vfx.EYES_RED_FLAME_HALFELF_MALE";
    if (value == 369) return "Vfx.EYES_RED_FLAME_HALFLING_FEMALE";
    if (value == 368) return "Vfx.EYES_RED_FLAME_HALFLING_MALE";
    if (value == 371) return "Vfx.EYES_RED_FLAME_HALFORC_FEMALE";
    if (value == 370) return "Vfx.EYES_RED_FLAME_HALFORC_MALE";
    if (value == 361) return "Vfx.EYES_RED_FLAME_HUMAN_FEMALE";
    if (value == 360) return "Vfx.EYES_RED_FLAME_HUMAN_MALE";
    if (value == 372) return "Vfx.EYES_RED_FLAME_TROGLODYTE";
    if (value == 609) return "Vfx.EYES_WHT_DWARF_FEMALE";
    if (value == 608) return "Vfx.EYES_WHT_DWARF_MALE";
    if (value == 611) return "Vfx.EYES_WHT_ELF_FEMALE";
    if (value == 610) return "Vfx.EYES_WHT_ELF_MALE";
    if (value == 613) return "Vfx.EYES_WHT_GNOME_FEMALE";
    if (value == 612) return "Vfx.EYES_WHT_GNOME_MALE";
    if (value == 615) return "Vfx.EYES_WHT_HALFLING_FEMALE";
    if (value == 614) return "Vfx.EYES_WHT_HALFLING_MALE";
    if (value == 617) return "Vfx.EYES_WHT_HALFORC_FEMALE";
    if (value == 616) return "Vfx.EYES_WHT_HALFORC_MALE";
    if (value == 607) return "Vfx.EYES_WHT_HUMAN_FEMALE";
    if (value == 606) return "Vfx.EYES_WHT_HUMAN_MALE";
    if (value == 618) return "Vfx.EYES_WHT_TROGLODYTE";
    if (value == 376) return "Vfx.EYES_YEL_DWARF_FEMALE";
    if (value == 375) return "Vfx.EYES_YEL_DWARF_MALE";
    if (value == 378) return "Vfx.EYES_YEL_ELF_FEMALE";
    if (value == 377) return "Vfx.EYES_YEL_ELF_MALE";
    if (value == 380) return "Vfx.EYES_YEL_GNOME_FEMALE";
    if (value == 379) return "Vfx.EYES_YEL_GNOME_MALE";
    if (value == 382) return "Vfx.EYES_YEL_HALFLING_FEMALE";
    if (value == 381) return "Vfx.EYES_YEL_HALFLING_MALE";
    if (value == 384) return "Vfx.EYES_YEL_HALFORC_FEMALE";
    if (value == 383) return "Vfx.EYES_YEL_HALFORC_MALE";
    if (value == 374) return "Vfx.EYES_YEL_HUMAN_FEMALE";
    if (value == 373) return "Vfx.EYES_YEL_HUMAN_MALE";
    if (value == 385) return "Vfx.EYES_YEL_TROGLODYTE";
    if (value == 18) return "Vfx.FNF_BLINDDEAF";
    if (value == 322) return "Vfx.FNF_DECK";
    if (value == 475) return "Vfx.FNF_DEMON_HAND";
    if (value == 19) return "Vfx.FNF_DISPEL";
    if (value == 20) return "Vfx.FNF_DISPEL_DISJUNCTION";
    if (value == 21 ) return "Vfx.FNF_DISPEL_GREATER";
    if (value == 459) return "Vfx.FNF_ELECTRIC_EXPLOSION";
    if (value == 22 ) return "Vfx.FNF_FIREBALL";
    if (value == 23 ) return "Vfx.FNF_FIRESTORM";
    if (value == 257) return "Vfx.FNF_GAS_EXPLOSION_ACID";
    if (value == 258) return "Vfx.FNF_GAS_EXPLOSION_EVIL";
    if (value == 260) return "Vfx.FNF_GAS_EXPLOSION_FIRE";
    if (value == 261) return "Vfx.FNF_GAS_EXPLOSION_GREASE";
    if (value == 262) return "Vfx.FNF_GAS_EXPLOSION_MIND";
    if (value == 259) return "Vfx.FNF_GAS_EXPLOSION_NATURE";
    if (value == 487) return "Vfx.FNF_GREATER_RUIN";
    if (value == 241) return "Vfx.FNF_HORRID_WILTING";
    if (value == 278) return "Vfx.FNF_HOWL_MIND";
    if (value == 279) return "Vfx.FNF_HOWL_ODD";
    if (value == 285) return "Vfx.FNF_HOWL_WAR_CRY";
    if (value == 290) return "Vfx.FNF_HOWL_WAR_CRY_FEMALE";
    if (value == 231) return "Vfx.FNF_ICESTORM";
    if (value == 24 ) return "Vfx.FNF_IMPLOSION";
    if (value == 185) return "Vfx.FNF_LOS_EVIL_10";
    if (value == 186) return "Vfx.FNF_LOS_EVIL_20";
    if (value == 187) return "Vfx.FNF_LOS_EVIL_30";
    if (value == 188) return "Vfx.FNF_LOS_HOLY_10";
    if (value == 189) return "Vfx.FNF_LOS_HOLY_20";
    if (value == 190) return "Vfx.FNF_LOS_HOLY_30";
    if (value == 191) return "Vfx.FNF_LOS_NORMAL_10";
    if (value == 192) return "Vfx.FNF_LOS_NORMAL_20";
    if (value == 193) return "Vfx.FNF_LOS_NORMAL_30";
    if (value == 26 ) return "Vfx.FNF_MASS_HEAL";
    if (value == 27 ) return "Vfx.FNF_MASS_MIND_AFFECTING";
    if (value == 28 ) return "Vfx.FNF_METEOR_SWARM";
    if (value == 477) return "Vfx.FNF_MYSTICAL_EXPLOSION";
    if (value == 29 ) return "Vfx.FNF_NATURES_BALANCE";
    if (value == 30 ) return "Vfx.FNF_PWKILL";
    if (value == 31 ) return "Vfx.FNF_PWSTUN";
    if (value == 287) return "Vfx.FNF_SCREEN_BUMP";
    if (value == 286) return "Vfx.FNF_SCREEN_SHAKE";
    if (value == 263) return "Vfx.FNF_SMOKE_PUFF";
    if (value == 183) return "Vfx.FNF_SOUND_BURST";
    if (value == 446) return "Vfx.FNF_SOUND_BURST_SILENT";
    if (value == 151) return "Vfx.FNF_STORM";
    if (value == 184) return "Vfx.FNF_STRIKE_HOLY";
    if (value == 481) return "Vfx.FNF_SUMMONDRAGON";
    if (value == 219) return "Vfx.FNF_SUMMON_CELESTIAL";
    if (value == 496) return "Vfx.FNF_SUMMON_EPIC_UNDEAD";
    if (value == 32 ) return "Vfx.FNF_SUMMON_GATE";
    if (value == 33 ) return "Vfx.FNF_SUMMON_MONSTER_1";
    if (value == 34 ) return "Vfx.FNF_SUMMON_MONSTER_2";
    if (value == 35 ) return "Vfx.FNF_SUMMON_MONSTER_3";
    if (value == 36 ) return "Vfx.FNF_SUMMON_UNDEAD";
    if (value == 37 ) return "Vfx.FNF_SUNBEAM";
    if (value == 473) return "Vfx.FNF_SWINGING_BLADE";
    if (value == 38 ) return "Vfx.FNF_TIME_STOP";
    if (value == 488) return "Vfx.FNF_UNDEAD_DRAGON";
    if (value == 39 ) return "Vfx.FNF_WAIL_O_BANSHEES";
    if (value == 40 ) return "Vfx.FNF_WEIRD";
    if (value == 41 ) return "Vfx.FNF_WORD";
    if (value == 43 ) return "Vfx.IMP_ACID_L";
    if (value == 44 ) return "Vfx.IMP_ACID_S";
    if (value == 42 ) return "Vfx.IMP_AC_BONUS";
    if (value == 275) return "Vfx.IMP_AURA_FEAR";
    if (value == 273) return "Vfx.IMP_AURA_HOLY";
    if (value == 276) return "Vfx.IMP_AURA_NEGATIVE_ENERGY";
    if (value == 274) return "Vfx.IMP_AURA_UNEARTHLY";
    if (value == 315) return "Vfx.IMP_BIGBYS_FORCEFUL_HAND";
    if (value == 46 ) return "Vfx.IMP_BLIND_DEAF_M";
    if (value == 47 ) return "Vfx.IMP_BREACH";
    if (value == 140) return "Vfx.IMP_CHARM";
    if (value == 48 ) return "Vfx.IMP_CONFUSION_S";
    if (value == 49 ) return "Vfx.IMP_DAZED_S";
    if (value == 50 ) return "Vfx.IMP_DEATH";
    if (value == 217) return "Vfx.IMP_DEATH_L";
    if (value == 146) return "Vfx.IMP_DEATH_WARD";
    if (value == 234) return "Vfx.IMP_DESTRUCTION";
    if (value == 51 ) return "Vfx.IMP_DISEASE_S";
    if (value == 52 ) return "Vfx.IMP_DISPEL";
    if (value == 53 ) return "Vfx.IMP_DISPEL_DISJUNCTION";
    if (value == 54 ) return "Vfx.IMP_DIVINE_STRIKE_FIRE";
    if (value == 55 ) return "Vfx.IMP_DIVINE_STRIKE_HOLY";
    if (value == 56 ) return "Vfx.IMP_DOMINATE_S";
    if (value == 57 ) return "Vfx.IMP_DOOM";
    if (value == 460) return "Vfx.IMP_DUST_EXPLOSION";
    if (value == 152) return "Vfx.IMP_ELEMENTAL_PROTECTION";
    if (value == 144) return "Vfx.IMP_EVIL_HELP";
    if (value == 58 ) return "Vfx.IMP_FEAR_S";
    if (value == 60 ) return "Vfx.IMP_FLAME_M";
    if (value == 61 ) return "Vfx.IMP_FLAME_S";
    if (value == 255) return "Vfx.IMP_FORTITUDE_SAVING_THROW_USE";
    if (value == 62 ) return "Vfx.IMP_FROST_L";
    if (value == 63 ) return "Vfx.IMP_FROST_S";
    if (value == 251) return "Vfx.IMP_GLOBE_USE";
    if (value == 145) return "Vfx.IMP_GOOD_HELP";
    if (value == 64 ) return "Vfx.IMP_GREASE";
    if (value == 246) return "Vfx.IMP_HARM";
    if (value == 65 ) return "Vfx.IMP_HASTE";
    if (value == 194) return "Vfx.IMP_HEAD_ACID";
    if (value == 198) return "Vfx.IMP_HEAD_COLD";
    if (value == 197) return "Vfx.IMP_HEAD_ELECTRICITY";
    if (value == 203) return "Vfx.IMP_HEAD_EVIL";
    if (value == 195) return "Vfx.IMP_HEAD_FIRE";
    if (value == 201) return "Vfx.IMP_HEAD_HEAL";
    if (value == 199) return "Vfx.IMP_HEAD_HOLY";
    if (value == 202) return "Vfx.IMP_HEAD_MIND";
    if (value == 200) return "Vfx.IMP_HEAD_NATURE";
    if (value == 204) return "Vfx.IMP_HEAD_ODD";
    if (value == 196) return "Vfx.IMP_HEAD_SONIC";
    if (value == 66 ) return "Vfx.IMP_HEALING_G";
    if (value == 67 ) return "Vfx.IMP_HEALING_L";
    if (value == 68 ) return "Vfx.IMP_HEALING_M";
    if (value == 69 ) return "Vfx.IMP_HEALING_S";
    if (value == 70 ) return "Vfx.IMP_HEALING_X";
    if (value == 71 ) return "Vfx.IMP_HOLY_AID";
    if (value == 139) return "Vfx.IMP_IMPROVE_ABILITY_SCORE";
    if (value == 72 ) return "Vfx.IMP_KNOCK";
    if (value == 74 ) return "Vfx.IMP_LIGHTNING_M";
    if (value == 75 ) return "Vfx.IMP_LIGHTNING_S";
    if (value == 76 ) return "Vfx.IMP_MAGBLUE";
    if (value == 141) return "Vfx.IMP_MAGICAL_VISION";
    if (value == 149) return "Vfx.IMP_MAGIC_PROTECTION";
    if (value == 250) return "Vfx.IMP_MAGIC_RESISTANCE_USE";
    if (value == 181) return "Vfx.IMP_MIRV";
    if (value == 503) return "Vfx.IMP_MIRV_ELECTRIC";
    if (value == 233) return "Vfx.IMP_MIRV_FLAME";
    if (value == 81 ) return "Vfx.IMP_NEGATIVE_ENERGY";
    if (value == 670) return "Vfx.IMP_NIGHTMARE_HEAD_HIT";
    if (value == 631) return "Vfx.IMP_PDK_FINAL_STAND";
    if (value == 624) return "Vfx.IMP_PDK_GENERIC_HEAD_HIT";
    if (value == 623) return "Vfx.IMP_PDK_GENERIC_PULSE";
    if (value == 626) return "Vfx.IMP_PDK_HEROIC_SHIELD";
    if (value == 627) return "Vfx.IMP_PDK_INSPIRE_COURAGE";
    if (value == 630) return "Vfx.IMP_PDK_OATH";
    if (value == 625) return "Vfx.IMP_PDK_RALLYING_CRY";
    if (value == 629) return "Vfx.IMP_PDK_WRATH";
    if (value == 83 ) return "Vfx.IMP_POISON_L";
    if (value == 84 ) return "Vfx.IMP_POISON_S";
    if (value == 85 ) return "Vfx.IMP_POLYMORPH";
    if (value == 86 ) return "Vfx.IMP_PULSE_COLD";
    if (value == 87 ) return "Vfx.IMP_PULSE_FIRE";
    if (value == 88 ) return "Vfx.IMP_PULSE_HOLY";
    if (value == 461) return "Vfx.IMP_PULSE_HOLY_SILENT";
    if (value == 266) return "Vfx.IMP_PULSE_NATURE";
    if (value == 89 ) return "Vfx.IMP_PULSE_NEGATIVE";
    if (value == 264) return "Vfx.IMP_PULSE_WATER";
    if (value == 265) return "Vfx.IMP_PULSE_WIND";
    if (value == 90 ) return "Vfx.IMP_RAISE_DEAD";
    if (value == 91 ) return "Vfx.IMP_REDUCE_ABILITY_SCORE";
    if (value == 256) return "Vfx.IMP_REFLEX_SAVE_THROW_USE";
    if (value == 92 ) return "Vfx.IMP_REMOVE_CONDITION";
    if (value == 222) return "Vfx.IMP_RESTORATION";
    if (value == 223) return "Vfx.IMP_RESTORATION_GREATER";
    if (value == 221) return "Vfx.IMP_RESTORATION_LESSER";
    if (value == 93 ) return "Vfx.IMP_SILENCE";
    if (value == 94 ) return "Vfx.IMP_SLEEP";
    if (value == 95 ) return "Vfx.IMP_SLOW";
    if (value == 96 ) return "Vfx.IMP_SONIC";
    if (value == 254) return "Vfx.IMP_SPELL_MANTLE_USE";
    if (value == 253) return "Vfx.IMP_SPIKE_TRAP";
    if (value == 644) return "Vfx.IMP_STARBURST_GREEN";
    if (value == 645) return "Vfx.IMP_STARBURST_RED";
    if (value == 97 ) return "Vfx.IMP_STUN";
    if (value == 98 ) return "Vfx.IMP_SUNSTRIKE";
    if (value == 150) return "Vfx.IMP_SUPER_HEROISM";
    if (value == 407) return "Vfx.IMP_TORNADO";
    if (value == 99 ) return "Vfx.IMP_UNSUMMON";
    if (value == 486) return "Vfx.IMP_WALLSPIKE";
    if (value == 252) return "Vfx.IMP_WILL_SAVING_THROW_USE";
    if (value == -1) return "Vfx.NONE";
    return "Vfx.(not found: " + value + ")";
  }

  public static String nameOf(float value) {
    return "Vfx.(not found: " + value + ")";
  }

  public static String nameOf(String value) {
    return "Vfx.(not found: " + value + ")";
  }
}
